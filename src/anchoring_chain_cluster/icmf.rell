
entity icmf_messages_height {
    key topic: text,
        sender: byte_array,
        sender_height: integer;
    anchor_height: integer;
    index topic, anchor_height;
}

struct signed_block_header_with_anchor_height {
    block_header: byte_array;
    witness: byte_array;
    anchor_height: integer;
}

@extend(after_anchoring_block) function process_icmf(block_rid: byte_array, header: block_header) {
    if (not header.extra.contains("icmf_send")) return;

    val icmf_data = map<text,gtv>.from_gtv_pretty(header.extra["icmf_send"]);
    for (topic in icmf_data.keys()) {
        if (not(topic.starts_with(ICMF_TOPIC_GLOBAL_PREFIX))) continue;
        val previous_anchor_height = icmf_messages_height @? { topic, .anchor_height < op_context.block_height } (@max .anchor_height) ?: -1;
        op_context.emit_event("icmf_header", (block_rid = block_rid, topic = topic, previous_anchor_height = previous_anchor_height).to_gtv_pretty());

        create icmf_messages_height(
            topic = topic,
            sender = header.blockchain_rid,
            sender_height = header.height,
            anchor_height = op_context.block_height
        );
    }
}

query icmf_get_headers_with_messages_after_height(topic: text, from_anchor_height: integer): list<signed_block_header_with_anchor_height> {
    return (m: icmf_messages_height, a: anchor_block) @*
        { a.blockchain_rid == m.sender, a.block_height == m.sender_height, topic, .anchor_height > from_anchor_height }
        (signed_block_header_with_anchor_height(block_header = a.block_header, witness = a.witness, anchor_height = m.anchor_height), @omit @sort m.rowid);
}