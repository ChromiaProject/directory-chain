@test module;

import ^^^.common.operations.*;
import ^^^.common.test.setup.*;
import ^^^.common.test.util.*;
import ^^^.direct_cluster.*;
import ^^^.direct_container.*;
import ^^.*;
import ^.helpers.*;

function test_init_economy_chain() {
    setup_module();

    assert_equals(economy_chain.rid, x"");

    val conf = ["config_consensus_strategy": "HEADER_HASH".to_gtv(),
        "blockstrategy": ["mininterblockinterval": (1000).to_gtv()].to_gtv()];

    rell.test.tx().op(
        init_economy_chain(initial_provider.pub, conf.to_gtv().to_bytes())
    ).sign(initial_provider).run();
    assert_not_equals(economy_chain.rid, x"");
    val bc = blockchain @ { .name == economy_chain_name };
    assert_equals(bc.state, blockchain_state.RUNNING);
    assert_true(bc.system);
    assert_equals(bc.rid, economy_chain.rid);
    assert_not_null(container_blockchain @? { bc, .container.cluster.name == clusters.system });

    conf["nonce"] = "whatever".to_gtv();
    rell.test.tx().op(
        init_economy_chain(initial_provider.pub, conf.to_gtv().to_bytes())
    ).sign(initial_provider).run_must_fail("Economy chain is already started");
    assert_not_equals(economy_chain.rid, x"");
}

function test_create_container_with_auto_create_provider() {
    setup_module();

    val test_provider = rell.test.keypairs.bob;
    val cluster_name = "bob_cluster";
    val cluster_data = cluster_creation_data(cluster_units = 1, extra_storage = 1024);
    val register_node_data = register_node_data(
        rell.test.pubkeys.charlie, host = "host", port = 7777, api_url = "http://host/api_url", [cluster_name],
        cluster_units = 1, extra_storage = 1024
    );

    rell.test.tx().op(
        create_cluster_with_cluster_data(initial_provider.pub, cluster_name, system_voter_set().name, [initial_provider.pub], cluster_data),
        register_node_with_node_data(initial_provider.pub, register_node_data)
    ).sign(initial_provider).run();
    val bob_cluster = cluster @ { .name == cluster_name };

    assert_null(provider @? { test_provider.pub });

    rell.test.tx().op(
        create_container_op(create_container_message(
            ticket_id = 1,
            provider_pubkey = test_provider.pub,
            container_units = 1,
            extra_storage = 0,
            cluster_name = cluster_name
        ).to_gtv())).run();
    val container1 = container @ { bob_cluster, .system == false };
    assert_events(
        ("icmf_message", (
            topic = provider_update_topic,
            body = provider_update_message(test_provider.pub, system = false, tier = provider_tier.COMMUNITY_NODE_PROVIDER.name, active = true).to_gtv()
        ).to_gtv_pretty()),
        ("icmf_message", (
            topic = ticket_container_result_topic,
            body = ticket_container_result_message(1, error_message = null, container_name = container1.name, cluster_name = cluster_name).to_gtv()
        ).to_gtv_pretty())
    );
    assert_not_null(provider @? { test_provider.pub });

    rell.test.tx().op(
        create_container_op(create_container_message(
            ticket_id = 2,
            provider_pubkey = test_provider.pub,
            container_units = 2,
            extra_storage = 1024,
            cluster_name = cluster_name
        ).to_gtv())).run();
    val container2 = container @ { bob_cluster, .system == false, .name != container1.name };
    assert_events(("icmf_message", (
        topic = ticket_container_result_topic,
        body = ticket_container_result_message(2, error_message = null, container_name = container2.name, cluster_name = cluster_name).to_gtv()
    ).to_gtv_pretty()));

    val container_scu_limit = container_resource_limit @ { container2, .container_resource_limit_type == container_resource_limit_type.container_units }.value;
    assert_equals(container_scu_limit, 2);

    val container_extra_storage_limit = container_resource_limit @ { container2, .container_resource_limit_type == container_resource_limit_type.extra_storage }.value;
    assert_equals(container_extra_storage_limit, 1024);

    assert_not_null(provider @? { test_provider.pub });
}

function test_create_container_fail() {
    setup_module();

    val test_provider = rell.test.keypairs.bob;
    val cluster_name = "bob_cluster";

    rell.test.tx().op(
        create_cluster(initial_provider.pub, cluster_name, system_voter_set().name, [initial_provider.pub]),
        register_node_with_territory_and_units(initial_provider.pub, rell.test.pubkeys.charlie, "host", 7777, "http://host/api_url", "SE", 1, [cluster_name])
    ).sign(initial_provider).run();
    val bob_cluster = cluster @ { .name == cluster_name };

    rell.test.tx().op(
        create_container_op(create_container_message(
            ticket_id = 1,
            provider_pubkey = test_provider.pub,
            container_units = 1,
            extra_storage = 0,
            cluster_name = "bogus_cluster"
        ).to_gtv())).run();

    assert_events(
        ("icmf_message", (
            topic = provider_update_topic,
            body = provider_update_message(test_provider.pub, system = false, tier = provider_tier.COMMUNITY_NODE_PROVIDER.name, active = true).to_gtv()
        ).to_gtv_pretty()),
        ("icmf_message", (
            topic = ticket_container_result_topic,
            body = ticket_container_result_message(1, error_message = "Unable to find suitable cluster", container_name = "", cluster_name = "").to_gtv()
        ).to_gtv_pretty())
    );

    assert_not_null(provider @? { test_provider.pub });
}

function test_upgrade_container() {
    setup_module();

    val test_provider = rell.test.keypairs.bob;
    val cluster_name = "bob_cluster";
    val container_name = "bob_container";
    val cluster_creation_data = cluster_creation_data(cluster_units = 1, extra_storage = 1024);
    val register_node_data = register_node_data(
        rell.test.pubkeys.charlie, host = "host", port = 7777, api_url = "http://host/api_url", [cluster_name],
        cluster_units = 1, extra_storage = 1024
    );

    rell.test.tx().op(
        create_cluster_with_cluster_data(initial_provider.pub, cluster_name, voter_sets.system_p, [initial_provider.pub], cluster_creation_data),
        register_node_with_node_data(initial_provider.pub, register_node_data),
        register_provider(initial_provider.pub, rell.test.pubkeys.bob, provider_tier.COMMUNITY_NODE_PROVIDER),
        create_container_with_units(initial_provider.pub, container_name,  cluster_name, 0, [test_provider.pub], 1)
    ).sign(initial_provider).run();
    val initial_limits = get_current_container_resource_limits(container_name);
    assert_equals(initial_limits[container_resource_limit_type.container_units], 1);

    rell.test.tx().op(
        upgrade_container_op(upgrade_container_message(
            ticket_id = 1,
            container_name = container_name,
            container_units = 2,
            extra_storage = 0,
            cluster_name = cluster_name
        ).to_gtv())).run();
    assert_events(("icmf_message", (
        topic = ticket_container_result_topic,
        body = ticket_container_result_message(1, error_message = null, container_name = container_name, cluster_name = cluster_name).to_gtv()
    ).to_gtv_pretty()));

    val upgraded_limits = get_current_container_resource_limits(container_name);
    assert_equals(upgraded_limits[container_resource_limit_type.container_units], 2);
}

function test_upgrade_container_fail() {
    setup_module();

    val test_provider = rell.test.keypairs.bob;
    val cluster_name = "bob_cluster";
    val container_name = "bob_container";
    val cluster_data = cluster_creation_data(cluster_units = 1, extra_storage = 1024);
    val register_node_data = register_node_data(
        rell.test.pubkeys.charlie, host = "host", port = 7777, api_url = "http://host/api_url", [cluster_name],
        cluster_units = 1, extra_storage = 1024
    );

    rell.test.tx().op(
        create_cluster_with_cluster_data(initial_provider.pub, cluster_name, voter_sets.system_p, [initial_provider.pub], cluster_data),
        register_node_with_node_data(initial_provider.pub, register_node_data),
        register_provider(initial_provider.pub, rell.test.pubkeys.bob, provider_tier.COMMUNITY_NODE_PROVIDER),
        create_container_with_units(initial_provider.pub, container_name,  cluster_name, 0, [test_provider.pub], 1)
    ).sign(initial_provider).run();

    rell.test.tx().op(
        upgrade_container_op(upgrade_container_message(
            ticket_id = 1,
            container_name = container_name,
            container_units = 13, // Too many SCUs requested
            extra_storage = 0,
            cluster_name = cluster_name
        ).to_gtv())).run();
    assert_events(("icmf_message", (
        topic = ticket_container_result_topic,
        body = ticket_container_result_message(
            1,
            error_message = "Unable to upgrade container %s".format(container_name),
            container_name = container_name,
            cluster_name = cluster_name).to_gtv()
        ).to_gtv_pretty()));
}
