@test module;

import ^^.*;
import ^.helper_functions.*;
import ^.helper_operations.*;

namespace ft4 {
    import lib.ft4.accounts;
    import lib.ft4.assets;
    import lib.ft4.auth;
    import test_utils: lib.ft4.test.utils;
}
import lib.auth;

struct module_args {
    auth_privkey: byte_array;
    admin_privkey: byte_array;
}

val auth_privkey = chain_context.args.auth_privkey;

function test_create_container_success() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16, container_units = 2);

    assert_false(lease @ { container_name } (.auto_renew));

    val expected_lease = lease_data(
        container_name = container_name,
        container_units = 2,
        extra_storage_gib = 0,
        expire_time_millis = rell.test.DEFAULT_FIRST_BLOCK_TIME + rell.test.DEFAULT_BLOCK_INTERVAL*2 + millis_per_week,
        expired = false,
        auto_renew = false
    );

    val leases2 = get_leases_by_account(alice.id);
    assert_equals(leases2.size(), 1);
    assert_equals(leases2[0], expected_lease);

    val lease_data = require(get_lease_by_container_name(container_name));
    assert_equals(lease_data, expected_lease);
}

function test_create_container_with_auto_renew() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16, container_units = 2, auto_renew = true);

    assert_true(lease @ { container_name } (.auto_renew));

    val expected_lease = lease_data(
        container_name = container_name,
        container_units = 2,
        extra_storage_gib = 0,
        expire_time_millis = rell.test.DEFAULT_FIRST_BLOCK_TIME + rell.test.DEFAULT_BLOCK_INTERVAL*2 + millis_per_week,
        expired = false,
        auto_renew = true
    );

    val leases2 = get_leases_by_account(alice.id);
    assert_equals(leases2.size(), 1);
    assert_equals(leases2[0], expected_lease);

    val lease_data = require(get_lease_by_container_name(container_name));
    assert_equals(lease_data, expected_lease);
}

function test_create_container_failure() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    do_create_container(alice, rell.test.keypairs.alice, success = false, block_height = 2, ticket_id = 16);
}

function test_create_container_no_auth() {
    rell.test.tx().op(init()).run();
    rell.test.tx().op(
        create_container(rell.test.pubkeys.alice, 2, "", integer.MAX_VALUE, 0, "", false)
    ).run_must_fail("make sure that you included auth operation");
}

function test_create_container_insufficient_funds() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.privkeys.alice, "create_container",
            [rell.test.pubkeys.alice.to_gtv(), (100).to_gtv(), "".to_gtv(), (100).to_gtv(), (0).to_gtv(), "".to_gtv(), false.to_gtv()])
    ).op(
        create_container(rell.test.pubkeys.alice, 100, "", 100, 0, "", false)
    ).run_must_fail("Balance is too low");
}

function test_expire_lease() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16);

    assert_false(lease @ { container_name } (.expired));
    rell.test.set_next_block_time_delta(millis_per_week + 1);
    rell.test.block().run();
    rell.test.block().run();
    assert_true(lease @ { container_name } (.expired));
    assert_events(("icmf_message", (
        topic = stop_container_topic,
        body = stop_container_message(container_name).to_gtv(),
        block_height = 5).to_gtv_pretty()
    ));
}

function test_not_expire_lease() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16);

    assert_false(lease @ { container_name } (.expired));
    rell.test.set_next_block_time_delta(millis_per_week - 60000);
    rell.test.block().run();
    rell.test.block().run();
    assert_false(lease @ { container_name } (.expired));
    assert_events(); // assert no ICMF messages sent
}

function test_auto_renew_and_cancel_renew_lease() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16);

    assert_false(lease @ { container_name } (.auto_renew));
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.privkeys.alice, "auto_renew_container",
            [container_name.to_gtv()])
    ).op(
        auto_renew_container(container_name)
    ).run();
    assert_true(lease @ { container_name } (.auto_renew));

    assert_false(lease @ { container_name } (.expired));
    rell.test.set_next_block_time_delta(millis_per_week + 1);
    rell.test.block().run();
    rell.test.block().run();
    assert_false(lease @ { container_name } (.expired));
    assert_events(); // assert no ICMF messages sent

    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.privkeys.alice, "cancel_renew_container",
            [container_name.to_gtv()])
    ).op(
        cancel_renew_container(container_name)
    ).run();
    assert_false(lease @ { container_name } (.auto_renew));

    assert_false(lease @ { container_name } (.expired));
    rell.test.set_next_block_time_delta(millis_per_week + 1);
    rell.test.block().run();
    rell.test.block().run();
    assert_true(lease @ { container_name } (.expired));
    assert_events(("icmf_message", (
        topic = stop_container_topic,
        body = stop_container_message(container_name).to_gtv(),
        block_height = 9).to_gtv_pretty()
    ));
}

function test_auto_renew_lease_insufficient_funds() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16);

    assert_false(lease @ { container_name } (.auto_renew));
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.privkeys.alice, "auto_renew_container",
            [container_name.to_gtv()])
    ).op(
        auto_renew_container(container_name)
    ).run();
    assert_true(lease @ { container_name } (.auto_renew));

    rell.test.tx().op(
        empty_account_op(alice)
    ).run();

    assert_false(lease @ { container_name } (.expired));
    rell.test.set_next_block_time_delta(millis_per_week + 1);
    rell.test.block().run();
    rell.test.block().run();
    assert_true(lease @ { container_name } (.expired));
    assert_events(("icmf_message", (
        topic = stop_container_topic,
        body = stop_container_message(container_name).to_gtv(),
        block_height = 7).to_gtv_pretty()
    ));
}

function test_renew_non_expired_container() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16);

    val alice_balance = get_account_balance(alice);
    val pool_balance = get_pool_balance();

    assert_equals(lease @ { container_name } (.duration_millis), 1 * millis_per_week);
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.privkeys.alice, "renew_container",
            [container_name.to_gtv(), (1).to_gtv()])
    ).op(
        renew_container(container_name, 1)
    ).run();
    assert_lt(get_account_balance(alice), alice_balance);
    assert_gt(get_pool_balance(), pool_balance);
    assert_equals(lease @ { container_name } (.duration_millis), 2 * millis_per_week);
    assert_false(lease @ { container_name } (.expired));
    assert_events(); // assert no ICMF messages sent
}

function test_renew_expired_container() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16);

    val alice_balance = get_account_balance(alice);
    val pool_balance = get_pool_balance();

    rell.test.set_next_block_time_delta(millis_per_week + 1);
    rell.test.block().run();
    rell.test.block().run();
    assert_true(lease @ { container_name } (.expired));

    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.privkeys.alice, "renew_container",
            [container_name.to_gtv(), (1).to_gtv()])
    ).op(
        renew_container(container_name, 1)
    ).run();
    assert_lt(get_account_balance(alice), alice_balance);
    assert_gt(get_pool_balance(), pool_balance);
    assert_equals(lease @ { container_name } (.duration_millis), 2 * millis_per_week);
    assert_false(lease @ { container_name } (.expired));
    assert_events(("icmf_message", (
        topic = restart_container_topic,
        body = restart_container_message(container_name).to_gtv(),
        block_height = 6).to_gtv_pretty()
    ));
}

function test_auto_renew_expired_container() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16);

    val alice_balance = get_account_balance(alice);
    val pool_balance = get_pool_balance();

    rell.test.set_next_block_time_delta(millis_per_week + 1);
    rell.test.block().run();
    rell.test.block().run();
    assert_true(lease @ { container_name } (.expired));

    assert_false(lease @ { container_name } (.auto_renew));
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.privkeys.alice, "auto_renew_container",
            [container_name.to_gtv()])
    ).op(
        auto_renew_container(container_name)
    ).run();
    assert_true(lease @ { container_name } (.auto_renew));
    assert_false(lease @ { container_name } (.expired));
    assert_events(("icmf_message", (
        topic = restart_container_topic,
        body = restart_container_message(container_name).to_gtv(),
        block_height = 6).to_gtv_pretty()
    ));
}

function test_renew_container_insufficient_funds() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16);

    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.privkeys.alice, "renew_container",
            [container_name.to_gtv(), (10000).to_gtv()])
    ).op(
        renew_container(container_name, 10000)
    ).run_must_fail("Balance is too low");
}

function test_upgrade_container_success() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16, container_units = 2);

    val created_lease = lease @ { container_name };
    do_upgrade_container(alice, rell.test.keypairs.alice, success = true, block_height = 4, ticket_id = 21, current_lease = created_lease, container_units = 3);

    val expected_lease = lease_data(
        container_name = container_name,
        container_units = 3, // Should be 3 now
        extra_storage_gib = 0,
        expire_time_millis = rell.test.DEFAULT_FIRST_BLOCK_TIME + rell.test.DEFAULT_BLOCK_INTERVAL * 4 + millis_per_week,
        expired = false,
        auto_renew = false
    );

    val leases2 = get_leases_by_account(alice.id);
    assert_equals(leases2.size(), 1);
    assert_equals(leases2[0], expected_lease);

    val lease_data = require(get_lease_by_container_name(container_name));
    assert_equals(lease_data, expected_lease);
}

function test_upgrade_container_insufficient_funds() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16, container_units = 2);

    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.privkeys.alice, "upgrade_container",
            [container_name.to_gtv(), (100).to_gtv(), "".to_gtv(), (0).to_gtv(), "".to_gtv()])
    ).op(
        upgrade_container(container_name, 10000, "", 0, "")
    ).run_must_fail("Balance is too low");
}

function test_remaining_lease_value_is_correct() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16, container_units = 2);

    val lease = lease @ { container_name };
    val lease_value = calculate_container_cost(1, 2, 0);

    val quarter_week_passed_remaining_value = calculate_remaining_lease_value(lease, lease.start_time + millis_per_week / 4);
    assert_equals(3 * lease_value / 4, quarter_week_passed_remaining_value);

    val half_week_passed_remaining_value = calculate_remaining_lease_value(lease, lease.start_time + millis_per_week / 2);
    assert_equals(lease_value / 2, half_week_passed_remaining_value);

    val expired_lease_remaining_value = calculate_remaining_lease_value(lease, lease.start_time + millis_per_week);
    assert_equals(expired_lease_remaining_value, 0);
}

function test_expire_lease_not_done_when_upgrade_is_pending() {
    rell.test.tx().op(init()).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, block_height = 2, ticket_id = 16);

    // Make a pending upgrade
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.keypairs.alice.priv, "upgrade_container", [container_name.to_gtv(), (3).to_gtv(),
            "".to_gtv(), (0).to_gtv(), "the_cluster".to_gtv()])
    ).op(
        upgrade_container(container_name, 3, "", 0, "the_cluster")
    ).run();

    assert_false(lease @ { container_name } (.expired));
    rell.test.set_next_block_time_delta(millis_per_week + 1);
    rell.test.block().run();
    rell.test.block().run();
    assert_false(lease @ { container_name } (.expired));
}

function do_create_container(
        ft4.accounts.account,
        keypair: rell.test.keypair,
        success: boolean,
        block_height: integer,
        ticket_id: integer,
        container_units: integer = 2,
        auto_renew: boolean = false): text {
    val container_name = "container name";

    val cost = calculate_container_cost(1, container_units, 0);

    val initial_balance = get_account_balance(account);
    val initial_pool_balance = get_pool_balance();

    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(keypair.priv, "create_container", [keypair.pub.to_gtv(), container_units.to_gtv(),
            "".to_gtv(), (1).to_gtv(), (0).to_gtv(), "the_cluster".to_gtv(), auto_renew.to_gtv()])
    ).op(
        create_container(keypair.pub, container_units, "", 1, 0, "the_cluster", auto_renew)
    ).run();
    val tx_rid = transaction @ {} (@sort_desc @omit .rowid, .tx_rid) limit 1;

    assert_events(("icmf_message", (
        topic = create_container_topic,
        body = create_container_message(ticket_id = ticket_id, keypair.pub, container_units = container_units, cluster_class = "", extra_storage = 0, cluster_name = "the_cluster").to_gtv(),
        block_height = block_height).to_gtv_pretty()
    ));

    val pending_ticket = container_ticket_data(ticket_id, ticket_type.CREATE_CONTAINER, ticket_state.PENDING, error_message = "", container_name = "");
    assert_equals(require(get_create_container_ticket_by_id(ticket_id)), pending_ticket);
    assert_equals(require(get_create_container_ticket_by_transaction(tx_rid)), pending_ticket);

    assert_equals(get_account_balance(account), initial_balance - cost);
    assert_equals(get_pool_balance(), initial_pool_balance + cost);

    rell.test.tx().op(
        icmf_message_op(x"", ticket_result_topic, ticket_result_message(ticket_id = ticket_id, error_message = if (success) null else "error", container_name).to_gtv())
    ).run();
    val done_ticket = container_ticket_data(
        ticket_id = ticket_id,
        type = ticket_type.CREATE_CONTAINER,
        state = if (success) ticket_state.SUCCESS else ticket_state.FAILURE,
        error_message = if (success) "" else "error",
        container_name = if (success) container_name else ""
    );
    assert_equals(require(get_create_container_ticket_by_id(ticket_id)), done_ticket);
    assert_equals(require(get_create_container_ticket_by_transaction(tx_rid)), done_ticket);

    if (success) {
        assert_equals(get_account_balance(account), initial_balance - cost);
        assert_equals(get_pool_balance(), initial_pool_balance + cost);
    } else {
        assert_equals(get_account_balance(account), initial_balance);
        assert_equals(get_pool_balance(), initial_pool_balance);
    }

    return container_name;
}

function do_upgrade_container(
        ft4.accounts.account,
        keypair: rell.test.keypair,
        success: boolean,
        block_height: integer,
        ticket_id: integer,
        current_lease: lease,
        container_units: integer = 2,
        auto_renew: boolean = false) {
    val container_name = current_lease.container_name;

    val cost = calculate_container_cost(1, container_units, 0) - calculate_remaining_lease_value(current_lease, rell.test.DEFAULT_FIRST_BLOCK_TIME + rell.test.DEFAULT_BLOCK_INTERVAL * (block_height - 1));

    val initial_balance = get_account_balance(account);
    val initial_pool_balance = get_pool_balance();

    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(keypair.priv, "upgrade_container", [container_name.to_gtv(), container_units.to_gtv(),
            "".to_gtv(), (0).to_gtv(), "the_cluster".to_gtv()])
    ).op(
        upgrade_container(container_name, container_units, "", 0, "the_cluster")
    ).run();
    val tx_rid = transaction @ {} (@sort_desc @omit .rowid, .tx_rid) limit 1;

    assert_events(("icmf_message", (
        topic = upgrade_container_topic,
        body = upgrade_container_message(ticket_id = ticket_id, container_name = container_name, container_units = container_units, cluster_class = "", extra_storage = 0, cluster_name = "the_cluster").to_gtv(),
        block_height = block_height).to_gtv_pretty()
    ));

    val pending_ticket = container_ticket_data(ticket_id, ticket_type.UPGRADE_CONTAINER, ticket_state.PENDING, error_message = "", container_name = container_name);
    assert_equals(require(get_upgrade_container_ticket_by_id(ticket_id)), pending_ticket);
    assert_equals(require(get_upgrade_container_ticket_by_transaction(tx_rid)), pending_ticket);

    assert_equals(get_account_balance(account), initial_balance - cost);
    assert_equals(get_pool_balance(), initial_pool_balance + cost);

    rell.test.tx().op(
        icmf_message_op(x"", ticket_result_topic, ticket_result_message(ticket_id = ticket_id, error_message = if (success) null else "error", container_name).to_gtv())
    ).run();
    val done_ticket = container_ticket_data(
        ticket_id = ticket_id,
        type = ticket_type.UPGRADE_CONTAINER,
        state = if (success) ticket_state.SUCCESS else ticket_state.FAILURE,
        error_message = if (success) "" else "error",
        container_name = if (success) container_name else ""
    );
    assert_equals(require(get_upgrade_container_ticket_by_id(ticket_id)), done_ticket);
    assert_equals(require(get_upgrade_container_ticket_by_transaction(tx_rid)), done_ticket);

    if (success) {
        assert_equals(get_account_balance(account), initial_balance - cost);
        assert_equals(get_pool_balance(), initial_pool_balance + cost);
    } else {
        assert_equals(get_account_balance(account), initial_balance);
        assert_equals(get_pool_balance(), initial_pool_balance);
    }
}