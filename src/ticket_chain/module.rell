module;

import messaging.ticketing.*;
import messaging.icmf.*;

import lib.auth;

namespace ft4 {
    import lib.ft4.accounts;
    import lib.ft4.assets;
    import lib.ft4.auth;
    import lib.ft4.version;
}

// TODO: Revise when we have real pricing
val SCU_COST = 1;
val EXTRA_STORAGE_COST = 1;
val SCU_REWARD = 1;
val EXTRA_STORAGE_REWARD = 1;

val MIN_LEASE_TIME_WEEKS = 1;
val MAX_LEASE_TIME_WEEKS = 12;

struct module_args {
    asset_name: text;
    asset_symbol: text;
    asset_icon: text;
    asset_decimals: integer;
    amount_to_mint: big_integer;
    pool_account_pubkey: pubkey;
    admin_pubkey: pubkey;
}

// Rell does not have a power function/operator
val units_per_asset = integer("1" + "0".repeat(chain_context.args.asset_decimals));

val millis_per_day = 24 * 60 * 60 * 1000;
val millis_per_week = 7 * millis_per_day;

operation init() {
    require(state.initialized == false, "Ticket chain is already initialized");
    state.initialized = true;

    register_assets();

    create_pool_account();

    log("Ticket chain was initialized");
}

operation __begin_block(height: integer) {
    if (state.initialized) {
        expire_leases(op_context.last_block_time);
        calculate_rewards(op_context.last_block_time);
    }
}

function require_initialized() {
    require(state.initialized == true, "Ticket chain is not initialized");
}

function require_pubkey(pubkey) {
    require(pubkey.size() == 33 or pubkey.size() == 65 or pubkey.size() == 1336, "Value is not pubkey: " + pubkey);
}

function require_is_signer(pubkey) {
    require(op_context.is_signer(pubkey), "Operation must be signed by " + pubkey);
}