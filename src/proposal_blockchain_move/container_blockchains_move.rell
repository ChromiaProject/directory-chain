import lib.icmf.*;
import messaging.anchoring_api.*;

function move_container_blockchains_impl(
    src_container_name: text,
    destination_cluster_name: text,
    anchored_blockchains: map<byte_array, integer>,
    destination_container_units: integer,
    destination_container_extra_storage: integer
): (container_name: text, cluster_name: text) {
    // require src container
    val src_container = require_container(src_container_name);
    val src_cluster = src_container.cluster;
    val src_deployer = src_container.deployer;

    // require dst cluster
    val dst_cluster = require_cluster(destination_cluster_name);
    val dst_nodes = cluster_node @* { dst_cluster } ( .node );
    require(dst_nodes.size() > 0, "Cluster %s must have at least one node".format(dst_cluster.name));

    // require blockchains
    val bcs = container_blockchain @* { src_container } ( .blockchain );
    require(anchored_blockchains.keys().contains_all(bcs @* {} ( .rid )),
        "Last anchored height for some of cluster %s blockchains not found".format(src_cluster.name));

    // require blockchain states
    for (bc in bcs) {
        require(bc.state == blockchain_state.PAUSED,
            "Only blockchains in PAUSED states can be moved; current state of blockchain %s is: %s".format(bc.rid, bc.state)
        );
    }

    // require blockchain is not being moved right now
    for (bc in bcs) {
        require(empty(moving_blockchain @? { bc.rid }), "Blockchain %s is being moved".format(bc.rid));
    }

    // require there no pending blockchain actions (pause, resume, remove, archive, unarchive)
    for (bc in bcs) {
        val pba = pending_blockchain_action @? { bc.rid };
        require(empty(pba), "Blockchain %s cannot be moved due to a pending proposal %s related to it".format(bc.rid, pba?.proposal));
    }

    // require there are no pending blockchains to be added to container
    val pb = pending_blockchain @? { src_container };
    require(empty(pb), "Container bcs cannot be moved due to a pending proposal %s related to it".format(pb?.proposal));

    // create dst container
    val new_name = src_container.name + "_new";
    val new_deployers = voter_set_member @* { src_container.deployer } (.provider.pubkey);
    val dst_container = create_container_impl(
        src_container.proposed_by, new_name, dst_cluster,
        consensus_threshold.super_majority, new_deployers,
        destination_container_units,
        standard_container_defaults.max_blockchains,
        destination_container_extra_storage
    );

    // moving
    for (bc in bcs) {
        val final_height = anchored_blockchains[bc.rid];
        create moving_blockchain(bc, source = src_container, destination = dst_container, final_height/*, remove_on_nodes*/);

        val src_nodes_to_replicate_on = (cn: cluster_node, rn: blockchain_replica_node) @* {
            cn.cluster == src_cluster,
            empty(blockchain_replica_node @* { bc, cn.node })
        } ( cn.node );
        for (node in src_nodes_to_replicate_on) {
            create blockchain_replica_node(bc, node);
        }
        // remove bc from src_container
        delete container_blockchain @* { bc };
        // add bc to the dst_container
        create container_blockchain(dst_container, bc);
        // remove dst cluster/container nodes from bc replicas if any exists
        for (node in dst_nodes) {
            delete blockchain_replica_node @* { bc, node };
        }
        // FYI: PCU-based update (i.e. update_configuration_signers_regular()) can't be used here.
        require_height_is_greater_or_equal_to_last_config_height(bc, final_height);
        // base config
        val base_config = require(get_blockchain_configuration(bc.rid, final_height)?.base_config,
            "Can't find config for %s for block %s".format(bc.rid, final_height));
        compress_and_store_configuration(bc, final_height + 1, make_config_unique(base_config));
        // signers config
        val encoded_dst_nodes = (dst_nodes @* {} ( @sort .pubkey )).to_gtv().to_bytes();
        create blockchain_configuration_signers(bc, final_height + 1, encoded_dst_nodes);
    }

    if (bcs.empty()) {
        remove_container_impl(src_container);
    } else {
        src_container.state = container_state.MIGRATING;
    }

    return (container_name = dst_container.name, cluster_name = dst_cluster.name);
}
