@test module;

import ^^.*;
import common.operations.*;
import common.test.ops.*;
import common.test.config_test_helpers.*;
import common.test.setup.*;
import common.test.util.*;
import proposal.voting.test.ops.*;
import proposal_blockchain.*;
import proposal_blockchain.test.utils.*;
import proposal_container.*;
import proposal_provider.*;
import direct_container.*;
import direct_cluster.*;
import nm_api.*;

function test_blockchain_moving_within_a_node() {
    // setup
    setup_module(provider_quota_max_containers = 2, cluster_anchoring_config = ["any": "value".to_gtv()]);
    val ip = provider @ { initial_provider.pub };
    var conf = ["config_consensus_strategy": "HEADER_HASH".to_gtv()];

    rell.test.tx().op(
        // s1 / c1
        create_cluster(initial_provider.pub, "s1", voter_sets.system_p, [initial_provider.pub]),
        create_container(initial_provider.pub, "c1a", "s1", 0, [initial_provider.pub]),
        create_container(initial_provider.pub, "c1b", "s1", 0, [initial_provider.pub]),
        update_node_with_units(initial_provider.pub, test_node.pubkey, cluster_units = 3),
        add_node_to_cluster(initial_provider.pub, test_node.pubkey, "s1"),
        // proposing blockchain to the c1a
        propose_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), "foo_chain", "c1a")
    ).sign(initial_provider).run();
    val foo_chain = blockchain @ { "foo_chain" };

    // 1. start blockchain moving
    rell.test.tx().op(
        propose_blockchain_move(initial_provider.pub, foo_chain.rid, "c1b")
    ).sign(initial_provider).run();
    // asserting moving_blockchain
    val mv_bc = moving_blockchain @? { foo_chain,
        .source.name == "c1a", .destination.name == "c1b",
        .finish_at_height == -1, .remove_on_nodes == x""
    };
    assert_not_null(mv_bc);
    // asserting that s1/c1 nodes are not blockchain replicas
    assert_true(empty(blockchain_replica_node @* { foo_chain }));
    // asserting that blockchain belongs to c1b
    assert_equals(container_blockchain @ { foo_chain } ( .container.name ), "c1b");

    // 2. finish blockchain moving
    rell.test.tx().op(
        propose_blockchain_move_finish(initial_provider.pub, foo_chain.rid, 123)
    ).sign(initial_provider).run();
    // asserting migrating_blockchain_info though NM API
    /// for node0
    val info = nm_get_migrating_blockchain_node_info(test_node.pubkey, foo_chain.rid);
    assert_true(exists(info));
    assert_equals(info!!.source_container, "c1a");
    assert_equals(info.destination_container, "c1b");
    assert_equals(info.is_source_node, true);
    assert_equals(info.is_destination_node, true);
    assert_equals(info.up_to_height, 123);
    // new config
    assert_not_null(blockchain_configuration @? { foo_chain, 123 });
    // new signers config
    val new_signers = blockchain_configuration_signers @? { foo_chain, 123 } .signers;
    assert_true(exists(new_signers));
    assert_equals(list<pubkey>.from_gtv(gtv.from_bytes(new_signers!!)), [test_node.pubkey]);
    // old signers are not replicas
    assert_true(empty(blockchain_replica_node @* { foo_chain }));

    // imitation of ICMF message receiving
    rell.test.tx().op(
        receive_configuration_updated_op(
            cluster_anchoring_chain @ { .cluster.name == "s1" } ( .blockchain.rid ),
            configuration_updated_topic,
            configuration_updated(
                blockchain_rid = foo_chain.rid,
                height = 123,
                config_hash = x"" // x"" is enough for this test
            ).to_gtv()
        )
    ).run();
    // no replicas for foo_chain
    assert_true(empty(blockchain_replica_node @* { foo_chain }));
    // no moving state for foo_chain
    assert_true(empty(moving_blockchain @? { foo_chain }));
    // asserting migrating_blockchain_info though NM API
    assert_null(nm_get_migrating_blockchain_node_info(test_node.pubkey, foo_chain.rid));
    // bs state didn't change (RUNNING)
    assert_equals(foo_chain.state, blockchain_state.RUNNING);
}

function test_blockchain_moving_between_containers_running_on_different_nodes() {
    // setup
    setup_module(provider_quota_max_containers = 3, cluster_anchoring_config = ["any": "value".to_gtv()]);
    val ip = provider @ { initial_provider.pub };
    val node0 = node @ { test_node.pubkey };
    var conf = ["config_consensus_strategy": "HEADER_HASH".to_gtv()];

    rell.test.tx().op(
        register_provider(initial_provider.pub, rell.test.pubkeys.bob, provider_tier.NODE_PROVIDER),
        propose_provider_is_system(initial_provider.pub, rell.test.pubkeys.bob, true),
        // s1 / c1
        create_cluster(initial_provider.pub, "s1", voter_sets.system_p, [initial_provider.pub]),
        create_container(initial_provider.pub, "c1", "s1", 0, [initial_provider.pub, rell.test.pubkeys.bob]),
        update_node_with_units(initial_provider.pub, node0.pubkey, cluster_units = 2),
        add_node_to_cluster(initial_provider.pub, node0.pubkey, "s1"),
        // s2 / c2, c3
        create_cluster(initial_provider.pub, "s2", voter_sets.system_p, [initial_provider.pub]),
        create_container(initial_provider.pub, "c2", "s2", 0, [initial_provider.pub, rell.test.pubkeys.bob]),
        create_container_with_resource_limits(initial_provider.pub, "c3", "s2", 0, [initial_provider.pub], [container_resource_limit_type.container_units : 1, container_resource_limit_type.max_blockchains : 1]),
        // proposing the blockchain to the c1
        propose_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), "foo_chain", "c1")
    ).sign(initial_provider).run();
    bob_votes();
    val foo_chain = blockchain @ { "foo_chain" };

    rell.test.tx().op(
        create_test_node(ip, rell.test.pubkeys.trudy, cluster @ { .name == "s2" }),
        // proposing the blockchain to the c3 to make it full
        propose_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), "foo_chain", "c3")
    ).sign(initial_provider).run();
    val node1 = node @ { rell.test.pubkeys.trudy };

    // 1. start blockchain moving
    // Trying to move the blockchain to a full container c3 -- must fail
    rell.test.tx().op(
        propose_blockchain_move(initial_provider.pub, foo_chain.rid, "c3")
    ).sign(initial_provider).run_must_fail("Can't add blockchain, container c3 is full");

    // Moving to a proper container c2
    rell.test.tx().op(
        propose_blockchain_move(initial_provider.pub, foo_chain.rid, "c2")
    ).sign(initial_provider).run();
    assert_not_null(pending_blockchain_move @? { foo_chain });
    // Trying to propose an blockchain_action, must fail due to non-null pending_blockchain_move
    rell.test.tx().op(
        propose_blockchain_action(initial_provider.pub, foo_chain.rid, blockchain_action.pause)
    ).sign(initial_provider).run_must_fail("Moving blockchain can't be paused");
    // Continuing with pending_blockchain_move
    bob_votes();
    val mv_bc = moving_blockchain @? { foo_chain,
        .source.name == "c1", .destination.name == "c2",
        .finish_at_height == -1, .remove_on_nodes == x""
    };
    assert_not_null(mv_bc);
    // asserting that s1/c1 nodes are blockchain replicas
    assert_equals(blockchain_replica_node @* { foo_chain } ( .node ), [node0]);
    // asserting that blockchain belongs to c2
    assert_equals(container_blockchain @ { foo_chain } ( .container.name ), "c2");
    // asserting migrating_blockchain_info though NM API
    /// for node0
    val info0 = nm_get_migrating_blockchain_node_info(node0.pubkey, foo_chain.rid);
    assert_true(exists(info0));
    assert_equals(info0!!.source_container, "c1");
    assert_equals(info0.destination_container, "c2");
    assert_equals(info0.is_source_node, true);
    assert_equals(info0.is_destination_node, false);
    assert_equals(info0.up_to_height, -1);
    /// for node1
    val info1 = nm_get_migrating_blockchain_node_info(node1.pubkey, foo_chain.rid);
    assert_true(exists(info1));
    assert_equals(info1!!.source_container, "c1");
    assert_equals(info1.destination_container, "c2");
    assert_equals(info1.is_source_node, false);
    assert_equals(info1.is_destination_node, true);
    assert_equals(info1.up_to_height, -1);

    // Trying again to propose an blockchain_action, must fail due to non-null moving_blockchain
    rell.test.tx().op(
        propose_blockchain_action(initial_provider.pub, foo_chain.rid, blockchain_action.pause)
    ).sign(initial_provider).run_must_fail("Moving blockchain can't be paused");

    // Trying to move blockchain that is already being moved -- must fail
    rell.test.tx().op(
        propose_blockchain_move(initial_provider.pub, foo_chain.rid, "c1") // c2 -> c1
    ).sign(initial_provider).run_must_fail("Blockchain 0x5c2e022c482853fdf9db276dd37e6235a7d81a679362a2446f468c83387cfef6 is being moved");

    // 2. finish blockchain moving
    rell.test.tx().op(
        propose_blockchain_move_finish(initial_provider.pub, foo_chain.rid, 123)
    ).sign(initial_provider).run();
    bob_votes();
    // asserting that src nodes are blockchain replicas and dst nodes are not
    assert_equals(blockchain_replica_node @* { foo_chain } ( .node ), [node0]);
    // asserting that blockchain belongs to c2
    assert_equals(container_blockchain @ { foo_chain } ( .container.name ), "c2");
    // asserting migrating_blockchain_info
    assert_equals(nm_get_migrating_blockchain_node_info(node0.pubkey, foo_chain.rid)?.up_to_height, 123);
    assert_equals(nm_get_migrating_blockchain_node_info(node1.pubkey, foo_chain.rid)?.up_to_height, 123);
    // new config
    assert_not_null(blockchain_configuration @? { foo_chain, 123 });
    // asserting that a new signers config is present at the proposed height
    val bcs = blockchain_configuration_signers @? { foo_chain, 123 };
    assert_not_null(bcs);
    assert_equals(bcs.signers, [node1.pubkey].to_gtv().to_bytes());
    // asserting that mv_bc has relevant .finish_at_height and .remove_on_nodes
    assert_equals(mv_bc.finish_at_height, 123);
    assert_equals(mv_bc.remove_on_nodes, [node0.pubkey].to_gtv().to_bytes());

    // imitation of ICMF message receiving
    rell.test.tx().op(
        receive_configuration_updated_op(
            cluster_anchoring_chain @ { .cluster.name == "s2" } ( .blockchain.rid ),
            configuration_updated_topic,
            configuration_updated(
                blockchain_rid = foo_chain.rid,
                height = 123,
                config_hash = x"" // x"" is enough for this test
            ).to_gtv()
        )
    ).run();
    // no replicas for foo_chain
    assert_true(empty(blockchain_replica_node @* { foo_chain }));
    // no moving state for foo_chain
    assert_true(empty(moving_blockchain @? { foo_chain }));
    // asserting migrating_blockchain_info though NM API
    assert_null(nm_get_migrating_blockchain_node_info(node0.pubkey, foo_chain.rid));
    assert_null(nm_get_migrating_blockchain_node_info(node1.pubkey, foo_chain.rid));
    // bs state didn't chang (RUNNING)
    assert_equals(foo_chain.state, blockchain_state.RUNNING);
}

function test_paused_blockchain_moving_between_containers_running_on_different_nodes() {
    // setup
    setup_module(provider_quota_max_containers = 3);
    val ip = provider @ { initial_provider.pub };
    val node0 = node @ { test_node.pubkey };
    var conf = ["config_consensus_strategy": "HEADER_HASH".to_gtv()];

    rell.test.tx().op(
        register_provider(initial_provider.pub, rell.test.pubkeys.bob, provider_tier.NODE_PROVIDER),
        propose_provider_is_system(initial_provider.pub, rell.test.pubkeys.bob, true),
        // s1 / c1
        create_cluster(initial_provider.pub, "s1", voter_sets.system_p, [initial_provider.pub]),
        create_container(initial_provider.pub, "c1", "s1", 0, [initial_provider.pub, rell.test.pubkeys.bob]),
        update_node_with_units(initial_provider.pub, node0.pubkey, cluster_units = 2),
        add_node_to_cluster(initial_provider.pub, node0.pubkey, "s1"),
        // s2 / c2
        create_cluster(initial_provider.pub, "s2", voter_sets.system_p, [initial_provider.pub]),
        create_container(initial_provider.pub, "c2", "s2", 0, [initial_provider.pub, rell.test.pubkeys.bob]),
        // proposing the blockchain to the c1
        propose_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), "foo_chain", "c1")
    ).sign(initial_provider).run();
    bob_votes();
    val foo_chain = blockchain @ { "foo_chain" };

    rell.test.tx().op(
        create_test_node(ip, rell.test.pubkeys.trudy, cluster @ { .name == "s2" }),
        propose_blockchain_action(initial_provider.pub, foo_chain.rid, blockchain_action.pause)
    ).sign(initial_provider).run();
    bob_votes();
    assert_equals(foo_chain.state, blockchain_state.PAUSED);
    val node1 = node @ { rell.test.pubkeys.trudy };

    // 1. start blockchain moving
    rell.test.tx().op(
        propose_blockchain_move(initial_provider.pub, foo_chain.rid, "c2")
    ).sign(initial_provider).run();
    assert_not_null(pending_blockchain_move @? { foo_chain });
    bob_votes();
    val mv_bc = moving_blockchain @? { foo_chain,
        .source.name == "c1", .destination.name == "c2",
        .finish_at_height == -1, .remove_on_nodes == x""
    };
    assert_not_null(mv_bc);
    // asserting that s1/c1 nodes are blockchain replicas
    assert_equals(blockchain_replica_node @* { foo_chain } ( .node ), [node0]);
    // asserting that blockchain belongs to c2
    assert_equals(container_blockchain @ { foo_chain } ( .container.name ), "c2");
    // asserting that nm_get_container_for_blockchain_on_node returns proper values for node0 and node1
    assert_equals(nm_get_container_for_blockchain_on_node(node0.pubkey, foo_chain.rid), "c1");
    assert_equals(nm_get_container_for_blockchain_on_node(node1.pubkey, foo_chain.rid), "c2");

    // 2. finish blockchain moving
    rell.test.tx().op(
        propose_blockchain_move_finish(initial_provider.pub, foo_chain.rid, 123)
    ).sign(initial_provider).run();
    bob_votes();
    // asserting that src nodes are blockchain replicas and dst nodes are not
    assert_equals(blockchain_replica_node @* { foo_chain } ( .node ), [node0]);
    // asserting that blockchain belongs to c2
    assert_equals(container_blockchain @ { foo_chain } ( .container.name ), "c2");
    // asserting that a new signers config is present at the proposed height
    val bcs = blockchain_configuration_signers @? { foo_chain, 123 };
    assert_not_null(bcs);
    assert_equals(bcs.signers, [node1.pubkey].to_gtv().to_bytes());
    // asserting that mv_bc has relevant .finish_at_height and .remove_on_nodes
    assert_equals(mv_bc.finish_at_height, 123);
    assert_equals(mv_bc.remove_on_nodes, [node0.pubkey].to_gtv().to_bytes());
    // asserting that blockchain_state is PAUSED
    assert_equals(foo_chain.state, blockchain_state.PAUSED);
}

function test_removed_blockchain_moving_is_not_allowed() {
    // setup
    setup_module(provider_quota_max_containers = 2);
    var conf = ["config_consensus_strategy": "HEADER_HASH".to_gtv()];

    rell.test.tx().op(
        create_container(initial_provider.pub, "c1", containers.system, 0, [initial_provider.pub]),
        create_container(initial_provider.pub, "c2", containers.system, 0, [initial_provider.pub]),
        propose_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), "foo_chain", "c1")
    ).sign(initial_provider).run();
    val foo_chain = blockchain @ { "foo_chain" };

    rell.test.tx().op(
        propose_blockchain_action(initial_provider.pub, foo_chain.rid, blockchain_action.remove)
    ).sign(initial_provider).run();
    log(foo_chain.to_struct());

    // asserting that moving of removed blockchain is not allowed
    rell.test.tx().op(
        propose_blockchain_move(initial_provider.pub, foo_chain.rid, "c2")
    ).sign(initial_provider).run_must_fail("Only blockchains in RUNNING | PAUSED states can be moved; current state of blockchain 0x5c2e022c482853fdf9db276dd37e6235a7d81a679362a2446f468c83387cfef6 is: REMOVED");
}

function test_blockchain_moving_is_not_allowed_due_to_pending_blockchain_action_proposal() {
    // setup
    setup_module();
    // adding system provider bob
    rell.test.tx().op(
        register_provider(initial_provider.pub, rell.test.pubkeys.bob, provider_tier.NODE_PROVIDER),
        propose_provider_is_system(initial_provider.pub, rell.test.pubkeys.bob, true)
    ).sign(initial_provider).run();
    // propose blockchain
    var conf = ["config_consensus_strategy": "HEADER_HASH".to_gtv()];
    rell.test.tx().op(
        create_container(initial_provider.pub, "c1", clusters.system, 0, [initial_provider.pub, rell.test.pubkeys.bob]),
        propose_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), "foo_chain", "c1")
    ).sign(initial_provider).run();
    bob_votes();
    val foo_chain = blockchain @ { "foo_chain" };

    // proposing blockchain action
    rell.test.tx().op(
        propose_blockchain_action(initial_provider.pub, foo_chain.rid, blockchain_action.pause)
    ).sign(initial_provider).run();
    // asserting that there is a pending proposal for the blockchain
    val pba = pending_blockchain_action @? { foo_chain };
    assert_not_null(pba);
    assert_equals(pba.proposal.state, proposal_state.PENDING);

    // asserting that blockchain_moving is not allowed due to the pending blockchain action proposal
    rell.test.tx().op(
        propose_blockchain_move(initial_provider.pub, foo_chain.rid, "c2")
    ).sign(initial_provider).run_must_fail(
        "Blockchain %s cannot be moved due to a pending proposal %s related to it"
        .format(foo_chain.rid, pba.proposal)
    );
}

function test_system_blockchain_moving_is_not_allowed() {
    setup_module();
    rell.test.tx().op(
        propose_blockchain_move(initial_provider.pub, blockchain @ { blockchains.directory_chain } (.rid), "c1")
    ).sign(initial_provider).run_must_fail("Moving of system chains is not allowed: ");
}
