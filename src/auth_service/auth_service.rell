
namespace auth_service {

    operation create_provider(pubkey, name?, url: text?) {
        require_module_auth();
        require_pubkey(pubkey);
        require(not(exists(provider @? { pubkey })), "Provider with pubkey %s already exists".format(pubkey));
        register_and_enable_provider(provider_info(pubkey, name = name ?: "", url = url ?: ""), provider_tier.COMMUNITY_NODE_PROVIDER, null, null, true);
    }

    operation create_container(pubkey, cluster_name: text?) {
        require_module_auth();
        require_pubkey(pubkey);
        require(empty((voter_set_member, container) @? {
            container.deployer == voter_set_member.voter_set,
            voter_set_member.provider.pubkey == pubkey
        }), "Only one container per provider can be created");
        if (cluster_name != null) {
            val cluster = require_cluster(cluster_name);
            create_container_in_cluster(pubkey, cluster);
            return;
        }

        val clusters = if (chain_context.args.include_system_cluster) cluster @* {} else cluster @* { cluster.name != clusters.system };
        for (cluster in clusters) {
            val available_container_units = get_available_container_units(cluster);
            if (available_container_units > 0) {
                create_container_in_cluster(pubkey, cluster);
                return;
            }
        }
        require(false, "No available clusters exist");
    }

    function create_container_in_cluster(pubkey, cluster) {
        val name = [cluster.to_gtv(), pubkey.to_gtv(), op_context.transaction.tx_rid.to_gtv()].hash().to_hex();
        if (not(exists(provider @? { pubkey }))) {
            register_and_enable_provider(
                provider_info(pubkey),
                provider_tier.COMMUNITY_NODE_PROVIDER,
                null,
                null,
                enabled_by_default = true
            );
        }
        create_container_impl(provider @ { pubkey }, name, cluster, 1, [pubkey], standard_container_defaults.container_units, standard_container_defaults.max_blockchains);
    }

    query get_licenses(pubkey) : list<text> { 
        return (c: container, vsm: voter_set_member) @* { 
            c.deployer == vsm.voter_set,
            vsm.provider.pubkey == pubkey
        }.name;
    }

}
