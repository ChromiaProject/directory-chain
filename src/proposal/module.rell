module;

import common.*;
import .voting.*;

enum proposal_type {
    configuration_at,
    configuration,
    bc,
    container_limits,
    cluster_limits,
    cluster_provider,
    cluster_remove,
    voter_set_update,
    provider_state,
    provider_is_system,
    provider_quota,
    provider_batch,
    blockchain_action,
    cluster_anchoring_configuration,
    container,
    container_remove,

    blockchain_import,
    configuration_import,
    finish_blockchain_import,

    foreign_blockchain_import,
    foreign_blockchain_blocks_import,
}

enum proposal_state {
    PENDING, APPROVED, REJECTED, REVOKED
}

entity proposal {
    index timestamp, proposal_type;
    proposed_by: provider;
    index voter_set;
    description: text = "";
    transaction = op_context.transaction;
    mutable state: proposal_state = proposal_state.PENDING;
}

operation revoke_proposal(my_pubkey: pubkey, proposal_rowid: rowid) {
    val me = require_is_provider_with_rate_limit(my_pubkey);
    require_provider_auth_with_rate_limit(me);
    val prop = proposal @? { proposal_rowid };
    require(exists(prop), "Proposal not found: %d".format(proposal_rowid));
    require(prop!!.proposed_by == me, "It is only allowed to revoke own proposals");
    delete_proposal(prop, proposal_state.REVOKED);
}

function delete_proposal(prop: proposal, state: proposal_state) {
    delete_proposal_handlers()[prop.proposal_type.name](prop);
    prop.state = state;
}

@extendable function delete_proposal_handlers(): map<text, (proposal) -> unit>;