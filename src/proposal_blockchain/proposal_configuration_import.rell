entity pending_configuration_import {
    key proposal;
    blockchain;
    height: integer;
    config_data: byte_array;
}

@extend(apply_voting_result_handlers) function() = [proposal_type.configuration_import.name: apply_configuration_import(*)];
@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [proposal_type.configuration_import.name: delete_pending_configuration_import(*)];

operation propose_import_configuration(my_pubkey: pubkey, blockchain_rid: byte_array, height: integer, config_data: byte_array,
                                       description: text = "Propose import configuration") {
    val me = require_is_provider_with_rate_limit(my_pubkey);
    val blockchain = require_blockchain(blockchain_rid);
    val container = container_blockchain @ { blockchain }.container;
    require_container_deployer(container, me);

    require(blockchain.state == blockchain_state.PAUSED, "Blockchain must be paused to import configurations");

    require(empty(blockchain_configuration @? { blockchain, height } limit 1), 
        "Configuration at height %d already exists for blockchain %s".format(height, blockchain.rid));

    require("signers" in map<text, gtv>.from_gtv(gtv.from_bytes(config_data)), "No signers in configuration");

    require(empty(pending_configuration_import @* { blockchain, .proposal.state == proposal_state.PENDING } limit 1), "Already proposed");
    val prop = create proposal(op_context.last_block_time, proposal_type.configuration_import, me, container.deployer, description);
    create pending_configuration_import(prop, blockchain, height, config_data);
    internal_vote(me, prop, true);
}

function apply_configuration_import(proposal) {
    val pci = pending_configuration_import @? { proposal };
    if (pci == null) return;

    val container = container_blockchain @ { pci.blockchain }.container;
    val nodes = cluster_node @* { container.cluster } (@sort .node.pubkey);
    // do not write new configuration when size is 0 since it's impossible to recover from that
    require(nodes.size() > 0, "Cluster must have at least one node");

    require(empty(blockchain_configuration @? { pci.blockchain, pci.height } limit 1), 
        "Configuration at height %d already exists for blockchain %s".format(pci.height, pci.blockchain.rid));

    add_configuration_with_signers(pci.blockchain, pci.height, pci.config_data);

    log("Configuration imported: %d / %s".format(pci.height, pci.blockchain.rid));
}

function delete_pending_configuration_import(proposal) {
    delete pending_configuration_import @? { proposal };
}

query get_configuration_import_proposal(rowid?):
    (blockchain_rid: byte_array, height: integer, config_data: byte_array)?
{
    val proposal = get_latest_proposal(rowid, proposal_type.configuration_import);
    if (proposal == null) return null;
    return pending_configuration_import @ { proposal } (
        blockchain_rid = .blockchain.rid,
        height = .height,
        config_data = .config_data
    );
}
