entity pending_configuration_at {
    key proposal;
    blockchain;
    height: integer;
    force: boolean;
    data: byte_array;
}

@extend(apply_voting_result_handlers) function() = [proposal_type.configuration_at.name: apply_configuration_at(*)];

function apply_configuration_at(proposal) {
    val pc = pending_configuration_at @? { proposal };
    if (pc == null) return;

    require(pc.height >=0, "height must be >= 0");
    require(empty(blockchain_configuration @? { pc.blockchain, pc.height } limit 1) or pc.force, "Configuration at height %d already exists for blockchain %s, need to set force to override".format(pc.height, pc.blockchain.rid));

    val height = pc.height;

    val is_chain0 = pc.blockchain.rid == chain_context.blockchain_rid;
    val config_data = make_config_unique(pc.data);
    compress_and_store_configuration(pc.blockchain, height, config_data, true);
    add_dependencies(config_data, pc.blockchain.rid, height);
}

@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [proposal_type.configuration_at.name: delete_pending_configuration_at(*)];

function delete_pending_configuration_at(proposal) {
    delete pending_configuration_at @? { proposal };
}

/*
 * Proposes a new configuration for a blockchain.
 * NB: Only the deployer of the container the blockchain is running in can perform operation
 */
operation propose_configuration_at(my_pubkey: pubkey, blockchain_rid: byte_array, config_data: byte_array, height: integer, force: boolean, description: text = "") {
    val me = require_is_provider_with_rate_limit(my_pubkey);
    val blockchain = require_blockchain(blockchain_rid);
    val container = container_blockchain @ { blockchain }.container;
    require_container_deployer(container, me);
    val is_chain0 = blockchain.rid == chain_context.blockchain_rid or
        chain_context.blockchain_rid == x"0000000000000000000000000000000000000000000000000000000000000000"; // for unit tests
    require(is_chain0, "Proposing configuration at a specific height disallowed for chain: " + blockchain_rid);
    validate_blockchain_configuration(config_data, signers = not is_chain0, header_hash = false, system_chain = blockchain.system);

    require(height >= 0, "height must be >= 0");
    require(empty(blockchain_configuration @? { blockchain, height } limit 1) or force, "Configuration at height %d already exists for blockchain %s, need to set force to override".format(height, blockchain.rid));

    val pending_config = pending_configuration_at @? { blockchain, height, .proposal.state == proposal_state.PENDING } limit 1;
    require(empty(pending_config),
        "Pending configuration proposal already exists: blockchain_rid: %s, height: %d. Revoke the proposal %d first."
            .format(blockchain.rid, height, pending_config?.proposal)
    );

    val prop = create proposal(op_context.last_block_time, proposal_type.configuration_at, me, container.deployer, description);
    create pending_configuration_at(prop, blockchain, height, force, data = config_data);
    internal_vote(me, prop, true);
}

struct pending_blockchain_configuration_at_data {
    proposal;
    blockchain;
    data: byte_array;
    height: integer;
    force: boolean;
}

query get_configuration_proposal_at(rowid?): (
    current_conf:blockchain_configuration_data,
    proposed_conf:pending_blockchain_configuration_at_data
)? {
    val proposal = get_latest_proposal(rowid, proposal_type.configuration_at);
    if (proposal == null) return null;
    val config = pending_configuration_at @? { require_proposal(proposal.rowid) }
        (pending_blockchain_configuration_at_data(.proposal, .blockchain, decompress_configuration(.data), .height, .force));
    if (config == null) return null;

    val current = get_latest_blockchain_configuration_data(config.blockchain);

    return (
        current_conf = blockchain_configuration_data(current.height, config.blockchain, current.config),
        proposed_conf = config
    );
}
