enum blockchain_action {
    pause,
    resume,
    remove,
    archive,
    unarchive
}

struct unarchive_args {
    destination_container: text;
    final_height: integer;
}

entity pending_blockchain_action {
    key proposal;
    key blockchain;
    action: blockchain_action;
    args: byte_array = x"";
}

@extend(proposal_str)
function proposal_blockchain_action_str(prop: proposal): text? =
    pending_blockchain_action @? { prop } ( "%s:%s:%d".format(prop.proposal_type, .action, prop.rowid) );

@extend(apply_voting_result_handlers) function() = [proposal_type.blockchain_action.name: apply_blockchain_action(*)];

function apply_blockchain_action(proposal) {
    val pba = pending_blockchain_action @? { proposal };
    if (pba == null) return;
    when (pba.action) {
        pause -> _apply_pause_blockchain(pba, proposal);
        resume -> _apply_resume_blockchain(pba, proposal);
        remove -> _apply_delete_blockchain(pba, proposal);
        archive -> _apply_archive_blockchain(pba, proposal);
        unarchive -> _apply_unarchive_blockchain(pba, proposal);
    }
}

@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [proposal_type.blockchain_action.name: delete_pending_blockchain_action(*)];

function delete_pending_blockchain_action(proposal) {
    delete pending_blockchain_action @? { proposal };
}

// Stop block production by inactivating bc, and keep replicas.
function _apply_pause_blockchain(action: pending_blockchain_action, proposal) {
    action.blockchain.state = blockchain_state.PAUSED;
    // Keep replicas
    for (signer in get_blockchain_signer_nodes(action.blockchain)) {
        create blockchain_replica_node(action.blockchain, signer);
    }
}

// Restart block production; block builders will be the ones in cluster_node.
function _apply_resume_blockchain(action: pending_blockchain_action, proposal) {
    action.blockchain.state = blockchain_state.RUNNING;
    // Removing replicas if they are cluster nodes
    val nodes = get_blockchain_signer_nodes(action.blockchain);
    for (node_info in nodes) {
        delete blockchain_replica_node @? { action.blockchain, node_info };
    }
}

// Delete everything about this bc except D1 information
function _apply_delete_blockchain(action: pending_blockchain_action, proposal) {
    val bc = action.blockchain;
    before_delete_blockchain(bc);
    bc.state = blockchain_state.REMOVED;
    delete container_blockchain @ { bc };
    delete blockchain_replica_node @* { bc };
    delete pending_blockchain_action @ { proposal };
    delete blockchain_dependency @* { .me == bc };
    delete inactive_blockchain @? { bc };
    create inactive_blockchain(bc, op_context.block_height);
}

function _apply_archive_blockchain(action: pending_blockchain_action, proposal) {
    action.blockchain.state = blockchain_state.ARCHIVED;
    delete blockchain_replica_node @* { action.blockchain };
    create inactive_blockchain(action.blockchain, op_context.block_height);
}

function _apply_unarchive_blockchain(action: pending_blockchain_action, proposal) {
    action.blockchain.state = blockchain_state.UNARCHIVING;
    val args = unarchive_args.from_bytes(action.args);

    // keep src cluster/container nodes as replicas
    val src_container = container_blockchain @ { action.blockchain } (.container);
    val src_cluster_nodes_to_replicate_on = cluster_node @* {
        src_container.cluster, .node not in blockchain_replica_node @* { action.blockchain } (.node)
    } (.node);
    for (node in src_cluster_nodes_to_replicate_on) {
        create blockchain_replica_node(action.blockchain, node);
    }
    // remove bc from container
    delete container_blockchain @* { action.blockchain };

    // add bc to the dst container
    val dst_container = require_container(args.destination_container);
    require_container_is_not_full(dst_container);
    create container_blockchain(dst_container, action.blockchain);
    // remove dst cluster/container nodes from bc replicas
    val dst_nodes = cluster_node @* { dst_container.cluster } (@omit @sort .node.pubkey, .node);
    require(dst_nodes.size() > 0, "Cluster %s must have at least one node".format(dst_container.cluster.name));
    for (node in dst_nodes) {
        delete blockchain_replica_node @* { action.blockchain, node };
    }

    // create a base_config and signers config at final_height (base_config needed if signers don't change)
    // FYI: PCU-based update (i.e. update_configuration_signers_regular()) can't be used here.
    require_height_is_greater_or_equal_to_last_config_height(action.blockchain, args.final_height);
    // base config
    val base_config = require(get_blockchain_configuration(action.blockchain.rid, args.final_height)?.base_config,
        "Can't find config for %s for block %s".format(action.blockchain.rid, args.final_height));
    compress_and_store_configuration(action.blockchain, args.final_height + 1, make_config_unique(base_config));
    // signers config
    val encoded_dst_nodes = (dst_nodes @* {} ( .pubkey )).to_gtv().to_bytes();
    create blockchain_configuration_signers(action.blockchain, args.final_height + 1, encoded_dst_nodes);

    // create unarchiving_blockchain state
    create unarchiving_blockchain(action.blockchain, source = src_container, destination = dst_container, args.final_height);
    delete inactive_blockchain @? { action.blockchain };
}

operation propose_blockchain_action(my_pubkey: pubkey, blockchain_rid: byte_array, action: blockchain_action, description: text = "") {
    require(action != blockchain_action.unarchive, "Use propose_blockchain_unarchive_action() for unarchive operation");
    propose_blockchain_action_impl(my_pubkey, blockchain_rid, action, x"", description);
}

operation propose_blockchain_unarchive_action(my_pubkey: pubkey, blockchain_rid: byte_array, destination_container: text, final_height: integer, description: text = "") {
    val args = unarchive_args(destination_container, final_height);
    propose_blockchain_action_impl(my_pubkey, blockchain_rid, blockchain_action.unarchive, args.to_bytes(), description);
}

function propose_blockchain_action_impl(my_pubkey: pubkey, blockchain_rid: byte_array, action: blockchain_action, args: byte_array, description: text = "") {
    val me = require_is_provider_with_rate_limit(my_pubkey);

    // blockchain state requirements
    val blockchain = require_blockchain(blockchain_rid, include_removed = true);
    val pending_proposal = pending_blockchain_action @? { blockchain, .proposal.state == proposal_state.PENDING };
    require(empty(pending_proposal), "Blockchain action already proposed: " + pending_proposal?.proposal);

    // simple states
    when (blockchain.state) {
        blockchain_state.RUNNING -> {
            require(action != blockchain_action.resume, "Blockchain is already running: " + blockchain.rid);
            require(action != blockchain_action.unarchive, "Running blockchain can't be unarchived: " + blockchain.rid);
        }
        blockchain_state.PAUSED -> {
            require(action != blockchain_action.pause, "Blockchain is already paused: " + blockchain.rid);
            require(action != blockchain_action.unarchive, "Paused blockchain can't be unarchived: " + blockchain.rid);
        }
        blockchain_state.REMOVED -> {
            require(false, "Removed blockchain can't be %sd: %s".format(action.name, blockchain.rid));
        }
        blockchain_state.IMPORTING -> {
            require(false, "Importing blockchain can't be %sd: %s".format(action.name, blockchain.rid));
        }
        blockchain_state.ARCHIVED -> {
            require(action != blockchain_action.pause, "Archived blockchain can't be paused: " + blockchain.rid);
            require(action != blockchain_action.resume, "Archived blockchain can't be resumed: " + blockchain.rid);
            require(action != blockchain_action.archive, "Blockchain is already archived: " + blockchain.rid);
        }
    }

    // complex state: moving
    if (exists(pending_blockchain_move @? { blockchain }) or exists(moving_blockchain @? { blockchain, .final_height == -1 })) {
        require(false, "Moving blockchain can't be %sd: %s".format(action.name, blockchain.rid));
    }

    // container requirements
    val container = container_blockchain @ { blockchain } .container;
    require_container_deployer(container, me);

    // action requirements
    if (action == blockchain_action.remove) {
        require(empty(blockchain_dependency @* { .dependent_on == blockchain }), "Blockchain can't be removed since other blockchains depend on it: " + blockchain.rid);
    } else if (action == blockchain_action.archive) {
        require(not(blockchain.system), "Archiving of system chains is not allowed: " + blockchain_rid);
    } else if (action == blockchain_action.unarchive) {
        // unarchiving from a container to another container running on the same node is not allowed
        val args0 = unarchive_args.from_bytes(args);
        val dst_container = require_container(args0.destination_container);
        require_container_deployer(dst_container, me);
        require_container_is_not_full(dst_container);
    }

    val prop = create proposal(op_context.last_block_time, proposal_type.blockchain_action, me, container.deployer, description);
    create pending_blockchain_action(prop, blockchain, action, args);
    internal_vote(me, prop, true);
}

query get_blockchain_action_proposal(rowid) {
    val proposal = get_latest_proposal(rowid, proposal_type.blockchain_action);
    if (proposal == null) return null;
    val pba = pending_blockchain_action @ { proposal };
    return (
        blockchain = pba.blockchain.rid,
        blockchain_name = pba.blockchain.name,
        action = pba.action
    );
}

query get_blockchain_unarchive_action_proposal(rowid) {
    val proposal = get_latest_proposal(rowid, proposal_type.blockchain_action);
    if (proposal == null) return null;
    val pba = pending_blockchain_action @ { proposal };
    require(pba.action == blockchain_action.unarchive, "Proposal action is not 'unarchive'. Use get_blockchain_action_proposal() query");
    val args = unarchive_args.from_bytes(pba.args);
    val source_container = container_blockchain @ { pba.blockchain } ( .container.name );
    return (
        blockchain = pba.blockchain.rid,
        blockchain_name = pba.blockchain.name,
        action = pba.action,
        source_container = source_container,
        destination_container = args.destination_container,
        final_height = args.final_height
    );
}
