module;

import model.*;
import common.*;

function validate_blockchain_configuration(config_data: byte_array, signers: boolean, header_hash: boolean) {
    val config_map = map<text, gtv>.from_gtv(gtv.from_bytes(config_data));
    if (signers) {
        require("signers" not in config_map, "Configuration must not contain \"signers\"");
    }
    if (header_hash) {
        require("config_consensus_strategy" in config_map,
            "Configuration must contain \"config_consensus_strategy\"=\"HEADER_HASH\"");
        require(config_map["config_consensus_strategy"] == "HEADER_HASH".to_gtv(),
            "Configuration must contain \"config_consensus_strategy\"=\"HEADER_HASH\"");
    }
}

function add_configuration_with_signers(blockchain, height: integer, config_data: byte_array) {
    val config_map = map<text, gtv>.from_gtv(gtv.from_bytes(config_data));
    val signers = require(config_map.remove_or_null("signers"), "No signers in configuration");
    val base_config = config_map.to_gtv();

    create blockchain_configuration(blockchain, height, base_config.to_bytes());
    create blockchain_configuration_signers(blockchain, height, signers.to_bytes());
    add_dependencies(config_data, blockchain.rid, height);
}
