/**
 * Returns NM API Version
 * NM API Version: 1
 */
query nm_api_version() = 16;

/**
 * Returns version of peerlist
 * NM API Version: 1
 * @deprecated since version 5, is not relevant for multi-cluster environment
 */
query nm_get_peer_list_version() = node_list.last_update;

/**
 * Returns peer info list
 * NM API Version: 1
 * (API expects array, so we need suppress naming)
 */
query nm_get_peer_infos(): list<(text, integer, pubkey, timestamp)> {
    val peer_infos = list<(text, integer, pubkey, timestamp)>();
    peer_infos.add_all(node @* {} (_ = .host, _ = .port, _ = .pubkey, _ = .last_updated));
    peer_infos.add_all(importing_foreign_blockchain @* {} (_ = .host, _ = .port, _ = .pubkey, _ = 0));
    return peer_infos;
}

/**
 * Configuration updates are found in two tables. Both must be checked to get next configuration height.
 * NM API Version: 1
 */
query nm_find_next_configuration_height(blockchain_rid: byte_array, height: integer): integer? {
    val bc = blockchain @? { blockchain_rid };
    if (bc == null) return null;
    val conf_h = blockchain_configuration @? { bc, .height > height } (@sort .height) limit 1;
    val sign_h = blockchain_configuration_signers @? { bc, .height > height } (@sort .height) limit 1;
    if (conf_h == null) return sign_h;
    if (sign_h == null) return conf_h;
    return min(conf_h, sign_h);
}

/**
 * Merge content of blockchain_configuration and blockchain_configuration_signers
 * NM API Version: 1
 */
query nm_get_blockchain_configuration(blockchain_rid: byte_array, height: integer): byte_array? {
    val config = get_blockchain_configuration(blockchain_rid, height);
    if (config != null) {
        val full_config = map<text, gtv>.from_gtv(gtv.from_bytes(config.base_config));
        full_config["signers"] = config.signers.to_gtv();
        return full_config.to_gtv().to_bytes();
    } else {
        return null;
    }
}

/**
 * NM API Version: 5
 */
query nm_get_blockchain_configuration_v5(blockchain_rid: byte_array, height: integer):
    (base_config: byte_array, signers: list<pubkey>, config_hash: byte_array)?
        = get_blockchain_configuration(blockchain_rid, height);

/**
 * Returns list of blockchains to be launched
 * NM API Version: 1
 * @deprecated use nm_compute_blockchain_info_list
 */
query nm_compute_blockchain_list(node_id: pubkey): list<byte_array> {
    val res = list<byte_array>();
    for (blockchain in compute_blockchain_info_list(node_id)) {
        res.add(blockchain.rid);
    }
    return res;
}

/**
 * Returns a list of blockchains to be launched or to be initialized on a node (RUNNING, PAUSED, IMPORTING, UNARCHIVING)
 * NM API Version: 4
 * Compatibility:
 *  - NM API Version 4-8: Returns RUNNING or PAUSED blockchains
 *  - NM API Version 9-11: Returns RUNNING or PAUSED or IMPORTING blockchains
 */
query nm_compute_blockchain_info_list(node_id: pubkey): list<blockchain_info> {
    return compute_blockchain_info_list(node_id);
}

function compute_blockchain_info_list(node_id: pubkey): list<blockchain_info> {
    val node = node @? { node_id };
    if (exists(node)) {
        val res = set<blockchain_info>();
        res.add_all(get_mandatory_system_chains());
        res.add_all(get_cluster_node_blockchains(node));
        res.add_all(get_cluster_replica_node_blockchains(node));
        res.add_all(get_blockchains_replicated_by_node(node));
        return list(res);
    } else {
        return [blockchain_info(chain_context.blockchain_rid, true, blockchain_state.RUNNING)];
    }
}

/**
 * NM API Version: 4
 */
query nm_get_blockchain_replica_node_map(blockchain_rids: set<byte_array>): map<byte_array, set<byte_array>> {
    val res = map<byte_array, set<byte_array>>();
    for (brid in set(blockchain_rids)) {
        res.put(brid, get_blockchain_replica_nodes(brid));
    }
    return res;
}

/**
 * NM API Version: 3
 */
query nm_get_container_limits(name): map<text, integer> {
    require_container(name);

    var return_map = map<text, integer>();

    val container_limits = get_current_container_resource_limits(name);

    val container_units = container_limits[container_resource_limit_type.container_units];
    val max_blockchains = container_limits[container_resource_limit_type.max_blockchains];
    val extra_storage = container_limits[container_resource_limit_type.extra_storage];

    val cpu = _get_container_limit_or_default(standard_container_unit.cpu, container_units);
    val ram = _get_container_limit_or_default(standard_container_unit.ram, container_units);
    val io_read = _get_container_limit_or_default(standard_container_unit.io_read, container_units);
    val io_write = _get_container_limit_or_default(standard_container_unit.io_write, container_units);
    val storage = _get_container_limit_or_default(standard_container_unit.storage, container_units);

    return_map.put(container_resource_limit_type.container_units.name, container_units);
    return_map.put(container_resource_limit_type.max_blockchains.name, max_blockchains);
    return_map.put("storage", storage + extra_storage);
    return_map.put("cpu", cpu);
    return_map.put("ram", ram);
    return_map.put("io_read", io_read);
    return_map.put("io_write", io_write);

    return return_map;
}

function _get_container_limit_or_default(value: integer, container_units: integer): integer {
    return if (container_units == -1 or value == -1) -1 else container_units * value;
}

/**
 * Returns node containers
 * NM API Version: 3
 */
query nm_get_containers(pubkey): list<text> {
    val n = require_node(pubkey);
    val clusters = cluster_node @* { n } .cluster;
    val res = list<text>();
    for (cl in clusters) {
        val containers = container @* { cl, .state == container_state.RUNNING } .name;
        res.add_all(containers);
    }
    return res;
}

/**
 * NM API Version: 3
 */
query nm_get_blockchains_for_container(container_name: text): list<byte_array> {
    val container = container @? {container_name};
    val res = list<byte_array>();
    if (exists(container)) {
        val cluster = container.cluster;
        res.add_all(container_blockchain @* {container, .blockchain.state in [blockchain_state.RUNNING, blockchain_state.PAUSED]} .blockchain.rid);
    }
    return res;
}

/**
 * Returns container blockchain is running in.
 * NM API Version: 3
 */
query nm_get_container_for_blockchain(blockchain_rid: byte_array): text {
    val bc = require_blockchain_entity(blockchain_rid);
    require(bc.state != blockchain_state.REMOVED, "Blockchain is removed: " + bc.rid);
    return container_blockchain @ { bc } .container.name;
}

/**
 * Returns a destination container for node for moving/unarchiving blockchains.
 * Otherwise, returns nm_get_container_for_blockchain() result.
 * NM API Version: 12
 */
query nm_get_container_for_blockchain_on_node(pubkey, blockchain_rid: byte_array): text {
    val node = require_node(pubkey);
    val bc = require_blockchain_entity(blockchain_rid);

    val moving_from = (mb: moving_blockchain, cn: cluster_node) @? {
        mb.blockchain == bc,
        cn.cluster == mb.source.cluster,
        cn.node == node
    } ( mb.source.name );
    if (exists(moving_from)) return moving_from;

    val unarchiving_from = (ub: unarchiving_blockchain, cn: cluster_node) @? {
        ub.blockchain == bc,
        cn.cluster == ub.source.cluster,
        cn.node == node
    } ( ub.source.name );
    if (exists(unarchiving_from)) return unarchiving_from;

    return nm_get_container_for_blockchain(blockchain_rid);
}

/**
 * Returns a list of containers running on a node.
 * NM API Version: 14
 */
query nm_get_blockchain_containers_for_node(node_id: pubkey, blockchain_rid: byte_array): list<text> {
    val node = require_node(node_id);
    val bc = require_blockchain_entity(blockchain_rid);

    val mbc = moving_blockchain @? { bc };
    if (exists(mbc)) {
        val res = list<text>();
        if (cluster_node @? { node, mbc.source.cluster } ??) res.add(mbc.source.name);
        if (cluster_node @? { node, mbc.destination.cluster } ??) res.add(mbc.destination.name);
        return res;
    }

    val unbc = unarchiving_blockchain @? { bc };
    if (exists(unbc)) {
        val res = list<text>();
        if (cluster_node @? { node, unbc.source.cluster } ??) res.add(unbc.source.name);
        if (cluster_node @? { node, unbc.destination.cluster } ??) res.add(unbc.destination.name);
        return res;
    }

    return [nm_get_container_for_blockchain(blockchain_rid)];
}

/**
 * Returns a list of brids with corresponding container that this blockchain is dependent on. At the given height.
 * NM API Version: 3
 */
query nm_get_blockchain_dependencies(blockchain, height: integer): list<(byte_array, text)> {
    val res = list<(byte_array, text)>();
    val conf_h = blockchain_configuration @? { blockchain, .height <= height } (@sort .height) limit 1;
    if (conf_h != null) {
        val brids = blockchain_dependency @* {.me == blockchain, conf_h} .dependent_on.rid;
        for (brid in brids) {
            res.add((brid, container_blockchain @ { blockchain @{brid}} .container.name));
        }
    }
    return res;
}

/**
 * Precise Configuration Update: Returns list of pending configs with minimum_height <= height
 * NM API Version: 5
 */
query nm_get_pending_blockchain_configuration(blockchain_rid: byte_array, height: integer):
        list<(base_config: byte_array, signers: list<pubkey>, minimum_height: integer)> {
    val bc = require_blockchain(blockchain_rid, include_removed = true);
    return get_pending_blockchain_configuration(bc, height);
}

/**
 * Precise Configuration Update: Returns a pending blockchain config by config hash or null
 * NM API Version: 5
 */
query nm_get_pending_blockchain_configuration_by_hash(blockchain_rid: byte_array, config_hash: byte_array):
        (base_config: byte_array, signers: list<pubkey>, minimum_height: integer)? {
    val bc = require_blockchain(blockchain_rid, include_removed = true);
    return get_pending_blockchain_configuration_by_hash(bc, config_hash);
}

/**
 * Precise Configuration Update: Returns a faulty blockchain config by height or null
 * NM API Version: 5
 */
query nm_get_faulty_blockchain_configuration(blockchain_rid: byte_array, height: integer): byte_array? {
    val bc = require_blockchain(blockchain_rid, include_removed = true);
    return faulty_blockchain_configuration @? { bc, .reported_at_height == height }.config_hash;
}

/**
 * Returns current state of blockchain
 * NM API Version: 6
 */
query nm_get_blockchain_state(blockchain_rid: byte_array): text {
    val bc = require_blockchain(blockchain_rid, false, true);
    return bc.state.name;
}

/**
 * Returns Blockchain RID of management chain
 * NM API Version: 7
 */
query nm_get_management_chain() = blockchain @ { blockchains.directory_chain } (.rid);

/**
 * Returns blockchain_configuration_options structure for given blockchain and height or null
 * NM API Version 8
 */
query nm_get_blockchain_configuration_options(blockchain_rid: byte_array, height: integer)
    = blockchain_configuration_options @? { .blockchain.rid == blockchain_rid, .height <= height }
    (@omit @sort_desc .height, $.to_struct()) limit 1;

/**
 * Returns the blockchain signers from the latest configuration
 * NM API Version 9
 */
query nm_get_blockchain_signers_in_latest_configuration(blockchain_rid: byte_array): list<byte_array> {
    val bc = require_blockchain(blockchain_rid, false, true);
    val signers_bytes = blockchain_configuration_signers @ { bc } (@omit @sort_desc .height, .signers) limit 1;
    return list<byte_array>.from_gtv(gtv.from_bytes(signers_bytes));
}

/**
 * Finds the next height blockchains were removed at and returns found blockchain RIDs and heights.
 * Returns an empty list if there are no blockchains removed after `height`.
 * NM API Version 10
 * @deprecated in NM API Version 11
 */
query nm_find_next_removed_blockchains(height: integer): list<removed_blockchain_info> {
    val next_height = removed_blockchain @? { .height > height } (@sort .height) limit 1;
    return if (empty(next_height)) []
    else removed_blockchain @* { next_height } ( removed_blockchain_info(.blockchain.rid, .height) );
}

/**
 * Finds the next height blockchains were deactivated (removed, archived) at and returns found blockchain RIDs and heights.
 * Returns an empty list if there are no blockchains deactivated after `height`.
 * NM API Version 11
 */
query nm_find_next_inactive_blockchains(height: integer): list<inactive_blockchain_info> {
    val next_height = inactive_blockchain @? { .height > height } (@sort .height) limit 1;
    return if (empty(next_height)) []
    else inactive_blockchain @* { next_height } ( inactive_blockchain_info(.blockchain.rid, .blockchain.state, .height) );
}

/**
 * Returns unarchiving blockchain info.
 * NM API Version 13
 * @deprecated since NM API Version 15, use nm_get_migrating_blockchain_node_info()
 */
query nm_get_unarchiving_blockchain_node_info(pubkey, blockchain_rid: byte_array): unarchiving_blockchain_node_info? {
    val node = require_node(pubkey);
    val bc = require_blockchain_entity(blockchain_rid);
    if (bc.state != blockchain_state.UNARCHIVING) return null;

    val ubc = unarchiving_blockchain @? { bc } ( $.to_struct() );
    if (empty(ubc)) return null;

    return unarchiving_blockchain_node_info(
        rid = [bc.rid.to_gtv(), ubc.transaction.tx_rid.to_gtv()].hash(),
        source_container = ubc.source.name,
        destination_container = ubc.destination.name,
        is_source_node = exists(cluster_node @? { ubc.source.cluster, node }),
        is_destination_node = exists(cluster_node @? { ubc.destination.cluster, node }),
        up_to_height = ubc.final_height
    );
}

/**
 * Returns migrating (moving or unarchiving) blockchain info.
 * NM API Version 15
 */
query nm_get_migrating_blockchain_node_info(node_id: pubkey, blockchain_rid: byte_array): migrating_blockchain_node_info? {
    val node = require_node(node_id);
    val bc = require_blockchain_entity(blockchain_rid);

    val mvbc = moving_blockchain @? { bc } ($.to_struct());
    if (exists(mvbc)) {
        return migrating_blockchain_node_info(
            rid = [bc.rid.to_gtv(), mvbc.transaction.tx_rid.to_gtv()].hash(),
            source_container = mvbc.source.name,
            destination_container = mvbc.destination.name,
            is_source_node = exists(cluster_node @? { mvbc.source.cluster, node }),
            is_destination_node = exists(cluster_node @? { mvbc.destination.cluster, node }),
            final_height = mvbc.final_height
        );
    }

    val unbc = unarchiving_blockchain @? { bc } ($.to_struct());
    if (exists(unbc)) {
        return migrating_blockchain_node_info(
            rid = [bc.rid.to_gtv(), unbc.transaction.tx_rid.to_gtv()].hash(),
            source_container = unbc.source.name,
            destination_container = unbc.destination.name,
            is_source_node = exists(cluster_node @? { unbc.source.cluster, node }),
            is_destination_node = exists(cluster_node @? { unbc.destination.cluster, node }),
            final_height = unbc.final_height
        );
    }

    return null;
}
