// Creates a cluster with a set of providers
operation create_cluster(my_pubkey: pubkey, name, governor_voter_set: text, provider_pubkeys: list<pubkey>) {
    create_cluster_with_units_impl(my_pubkey, name, governor_voter_set, provider_pubkeys, standard_cluster_defaults.cluster_units);
}

operation create_cluster_with_units(my_pubkey: pubkey, name, governor_voter_set: text, provider_pubkeys: list<pubkey>, cluster_units: integer) {
    create_cluster_with_units_impl(my_pubkey, name, governor_voter_set, provider_pubkeys, cluster_units);
}

function create_cluster_with_units_impl(my_pubkey: pubkey, name, governor_voter_set: text, provider_pubkeys: list<pubkey>, cluster_units: integer) {
    val cluster_creation_data = cluster_creation_data(cluster_units = cluster_units, extra_storage = standard_cluster_defaults.extra_storage);
    create_cluster_with_cluster_data_impl(my_pubkey, name, governor_voter_set, provider_pubkeys, cluster_creation_data);
}

/**
 * @deprecated use create_cluster_with_cluster_data instead
 */
operation create_cluster_with_cluster_quota_data(my_pubkey: pubkey, name, governor_voter_set: text, provider_pubkeys: list<pubkey>, cluster_creation_data) {
    create_cluster_with_cluster_data_impl(my_pubkey, name, governor_voter_set, provider_pubkeys, cluster_creation_data);
}

operation create_cluster_with_cluster_data(my_pubkey: pubkey, name, governor_voter_set: text, provider_pubkeys: list<pubkey>, cluster_creation_data) {
    create_cluster_with_cluster_data_impl(my_pubkey, name, governor_voter_set, provider_pubkeys, cluster_creation_data);
}

function create_cluster_with_cluster_data_impl(my_pubkey: pubkey, name, governor_voter_set: text, provider_pubkeys: list<pubkey>, cluster_creation_data) {
    val me = require_is_provider_with_rate_limit(my_pubkey);
    require_system_access(me);
    val governor = require_voter_set(governor_voter_set);
    create_cluster_impl(me, name, governor, provider_pubkeys, cluster_creation_data);
}

// Creates a cluster provided by the members of an existing voter set
operation create_cluster_from(my_pubkey: pubkey, name, governor_voter_set: text, provider_voter_set: text) {
    create_cluster_from_with_units_impl(my_pubkey, name, governor_voter_set, provider_voter_set, standard_cluster_defaults.cluster_units);
}

operation create_cluster_from_with_units(my_pubkey: pubkey, name, governor_voter_set: text, provider_voter_set: text, cluster_units: integer) {
    create_cluster_from_with_units_impl(my_pubkey, name, governor_voter_set, provider_voter_set, cluster_units);
}

function create_cluster_from_with_units_impl(my_pubkey: pubkey, name, governor_voter_set: text, provider_voter_set: text, cluster_units: integer) {
    val cluster_creation_data = cluster_creation_data(cluster_units);
    create_cluster_from_with_cluster_data_impl(my_pubkey, name, governor_voter_set, provider_voter_set, cluster_creation_data);
}

/**
 * @deprecated use create_cluster_from_with_cluster_data instead
 */
operation create_cluster_from_with_cluster_quota_data_data(my_pubkey: pubkey, name, governor_voter_set: text, provider_voter_set: text, cluster_creation_data) {
    create_cluster_from_with_cluster_data_impl(my_pubkey, name, governor_voter_set, provider_voter_set, cluster_creation_data);
}

operation create_cluster_from_with_cluster_data(my_pubkey: pubkey, name, governor_voter_set: text, provider_voter_set: text, cluster_creation_data) {
    create_cluster_from_with_cluster_data_impl(my_pubkey, name, governor_voter_set, provider_voter_set, cluster_creation_data);
}

function create_cluster_from_with_cluster_data_impl(my_pubkey: pubkey, name, governor_voter_set: text, provider_voter_set: text, cluster_creation_data) {
    val me = require_is_provider_with_rate_limit(my_pubkey);
    require_system_access(me);
    val governor = require_voter_set(governor_voter_set);
    val node_provider_set = require_voter_set(provider_voter_set);
    create_cluster_impl(me, name, governor, voter_set_member @* { node_provider_set }.provider.pubkey, cluster_creation_data);
}