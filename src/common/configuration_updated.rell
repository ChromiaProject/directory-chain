@extend(receive_icmf_message) function receive_configuration_updated(sender: byte_array, topic: text, body: gtv) {
    if (topic != configuration_updated_topic) return;

    val message = configuration_updated.from_gtv(body);

    if (message.blockchain_rid == chain_context.blockchain_rid) {
        log("Received updated configuration from chain %s for chain0 at height %d to %s, ignoring"
            .format(sender, message.height, message.config_hash));
        return;
    }
    val bc = blockchain @? { message.blockchain_rid };
    if (bc == null) {
        log("Unknown blockchain " + message.blockchain_rid);
        return;
    }

    val cluster = get_cluster_for_blockchain(message.blockchain_rid);
    val anchoring_chain = cluster_anchoring_chain @? { cluster } (.blockchain);
    if (anchoring_chain == null) {
        log("No anchoring chain for cluster %s".format(cluster.name));
        return;
    }
    if (sender != anchoring_chain.rid and sender != system_anchoring_chain.rid) {
        log("Received updated configuration from chain %s, which is not anchor chain for cluster %s".format(sender, cluster.name));
        return;
    }

    log("Received updated configuration from chain %s for chain %s at height %d to %s"
        .format(sender, message.blockchain_rid, message.height, message.config_hash));

    on_configuration_updated(message);

    val pending_configuration = pending_blockchain_configuration @?
        { bc, .config_hash == message.config_hash, .minimum_height <= message.height };
    if (pending_configuration == null) {
        log("Configuration with hash %s and minimum_height<=%d not found for chain %s".format(message.config_hash, message.height, message.blockchain_rid));
        return;
    }

    val pending_base_config = pending_configuration.base_config;
    val pending_signers = pending_configuration.signers;
    if (blockchain_configuration @? { bc, message.height } != null) {
        log("Configuration at height %d already exists for chain %s".format(message.height, message.blockchain_rid));
        return;
    }

    update blockchain_configuration_update_attempt @? { .config_hash == message.config_hash }
        (state = blockchain_configuration_update_state.SUCCESSFUL, applied_at_height = message.height);
    delete signer_excluded_from_pending_configuration @* { bc, .config_hash == pending_configuration.config_hash };
    delete pending_configuration;

    compress_and_store_configuration(bc, message.height, pending_base_config);

    val current_signer_config = blockchain_configuration_signers @ { bc } (@omit @sort_desc .height, $) limit 1;
    if (current_signer_config.signers != pending_signers) {
        if (current_signer_config.height != message.height) {
            create blockchain_configuration_signers(bc, message.height, pending_signers);
        } else {
            current_signer_config.signers = pending_signers;
        }
        // This is essentially double storage in the block header since we also send an ICMF message but it will simplify proof on EVM side
        val update_message = signer_list_update_message(
            blockchain_rid = message.blockchain_rid,
            signers = pending_signers,
            confirmed_in_directory_at_height = op_context.block_height
        ).to_gtv();
        send_message(signer_list_update_topic, update_message);
        op_context.emit_event("signer_list_update_event", signer_list_update_event(
            message.blockchain_rid,
            list<byte_array>.from_gtv(gtv.from_bytes(pending_signers))
        ).to_gtv());
    }

    add_dependencies(pending_base_config, bc.rid, message.height);
}

@extendable function on_configuration_updated(message: configuration_updated) {}
