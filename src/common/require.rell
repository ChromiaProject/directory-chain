function require_is_signer(pubkey) {
    require(op_context.is_signer(pubkey), "Operation must be signed by " + pubkey);
}

function require_provider(pubkey) = require(provider @? { pubkey }, "Unknown provider " + pubkey);
function require_cluster(name) = require(cluster @? { name }, "Cluster %s not found".format(name));
function require_clusters(names: list<text>): list<cluster> {
    val clusters = cluster @* { .name in names };
    if (clusters.size() != names.size()) {
        val missing_clusters = list<text>();
        for (name in names) {
            val cl = clusters @? { name };
            if (cl == null) missing_clusters.add(name);
        }    
        require(missing_clusters.empty(), "Clusters %s not found".format(missing_clusters.to_text()));
    }
    return clusters;
}
function require_node(pubkey, include_disabled: boolean = true) = require(node @? { pubkey, include_disabled or .active },
    "Node not found" + (if(include_disabled) "" else " or disabled") + ": " + pubkey);
function require_container(name) = require(container @? { name }, "Container %s not found".format(name));
function require_running_container(name) = require(container @? { name, .state == container_state.RUNNING }, "Container %s not found or is not running".format(name));
function require_voter_set(name) = require(voter_set @? { name }, "Voter set %s does not exist".format(name));
function require_blockchain_entity(blockchain_rid: byte_array) = require(blockchain @? { blockchain_rid }, "Unknown blockchain " + blockchain_rid);
function require_blockchain(
    blockchain_rid: byte_array,
    require_running: boolean = false,
    include_removed: boolean = false
) = require(
    blockchain @? {
        blockchain_rid,
        include_removed or
        (require_running and .state == blockchain_state.RUNNING) or
        .state in [blockchain_state.RUNNING, blockchain_state.PAUSED]
    }, "Unknown blockchain " + blockchain_rid
);

function require_is_system_provider(pubkey) {
    val p = require_provider(pubkey);
    require_system_access(p);
    return p;
}

function require_system_p_member(provider) {
    require_voter_set_member(system_p_voter_set(), provider);
}

function require_cluster_governor(cluster, provider) {
    require_voter_set_member(cluster.governance, provider);
}

function require_voter_set_governor(voter_set, provider) {
    val governor = voter_set_governance @ { voter_set } .governor;
    require_voter_set_member(governor, provider);
}

function require_container_deployer(container, provider) {
    require(roles.has_deploy_access(provider, container), "Provider %s is not a deployer of container %s".format(provider.pubkey, container.name));
}

function require_voter_set_member(voter_set, provider) {
    require(exists(voter_set_member @* { voter_set, provider}), "Provider is not a member of voter set " + voter_set.name);
}

function require_is_provider_with_rate_limit(pubkey) {
    val provider = require_provider(pubkey);
    require_provider_auth_with_rate_limit(provider);
    return provider;
}

// This is the function we should use for auth
function require_provider_auth_with_rate_limit(provider) {
    require_is_signer(provider.pubkey);
    provider_rate_limit(provider);
}

function require_pubkey(pubkey) {
    require(pubkey.size() == 33 or pubkey.size() == 65 or pubkey.size() == 1336, "Value is not pubkey: " + pubkey);
}
