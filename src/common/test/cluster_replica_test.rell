@test module;

import ^^.operations.*;
import ^^.test.setup.*;
import ^^.test.util.*;
import direct_cluster.*;
import proposal_provider.*;

function test_cluster_replica() {
    setup_module();
    val node = node @ { .provider == initial_provider() };
    val node_provider1 = rell.test.keypairs.bob;
    val np1_node_key = x"fffffffffffffffffffffffffffffffffffffffff4B1FCAC8D888F2272982EC3C1";

    // Creating cluster
    val cluster1_name = "cluster1";
    rell.test.tx().op(
        create_cluster(initial_provider.pub, cluster1_name, voter_sets.system_p, list()),
        register_provider(initial_provider.pub, node_provider1.pub, provider_tier.NODE_PROVIDER),
        propose_provider_state(initial_provider.pub, node_provider1.pub, true)
    ).sign(initial_provider).run();

    rell.test.tx().op(
        register_node(node_provider1.pub, np1_node_key, "host", 7777, "http://host/api_url")
    ).sign(node_provider1).run();

    // Asserting stuff added
    val cluster1 = cluster @ { .name == cluster1_name };
    val np1 = provider @ { node_provider1.pub };
    val np1_node = node @ { np1_node_key };

    // Removing a replica node from cluster1, when node is not a replica if cluster1
    rell.test.tx().op(
        remove_replica_node_from_cluster(initial_provider.pub, node.pubkey, cluster1_name)
    ).sign(initial_provider).run_must_fail();

    // Adding a replica node to cluster1 with to few cluster_units
    rell.test.tx().op(
        add_replica_node_to_cluster(initial_provider.pub, node.pubkey, cluster1_name)
    ).sign(initial_provider).run_must_fail();

    // Adding a replica node to cluster1
    rell.test.tx().op(
        update_node_with_units(initial_provider.pub, node.pubkey, cluster_units = 2),
        add_replica_node_to_cluster(initial_provider.pub, node.pubkey, cluster1_name)
    ).sign(initial_provider).run();
    assert_true(not(empty(cluster_replica_node @* { cluster1, node })));

    // Adding the same replica node to cluster1, must fail
    rell.test.tx().op(
        add_replica_node_to_cluster(initial_provider.pub, node.pubkey, cluster1_name),
        rell.test.nop()
    ).sign(initial_provider).run_must_fail();

    // Removing a replica node from cluster1
    rell.test.tx().op(
        remove_replica_node_from_cluster(initial_provider.pub, node.pubkey, cluster1_name)
    ).sign(initial_provider).run();
    assert_true(empty(cluster_replica_node @* { cluster1, node }));

    // Adding another provider's node as a replica node
    rell.test.tx().op(
        add_replica_node_to_cluster(initial_provider.pub, np1_node.pubkey, cluster1_name)
    ).sign(initial_provider).run_must_fail();

    // Removing another provider's replica node
    rell.test.tx().op(
        remove_replica_node_from_cluster(node_provider1.pub, node.pubkey, cluster1_name)
    ).sign(node_provider1).run_must_fail();
}

function test_cluster_node_added_as_cluster_replica_node() {
    setup_module();
    val node = node @ { .provider == initial_provider() };

    // Creating cluster
    val cluster1_name = "cluster1";
    rell.test.tx().op(
        update_node_with_units(initial_provider.pub, node.pubkey, cluster_units = 2),
        create_cluster(initial_provider.pub, cluster1_name, voter_sets.system_p, [initial_provider.pub]),
        add_node_to_cluster(initial_provider.pub, node.pubkey, cluster1_name)
    ).sign(initial_provider).run();
    assert_true(exists(cluster_node @? { .cluster.name == cluster1_name, node }));

    // Adding cluster node as a cluster replica node
    rell.test.tx().op(
        add_replica_node_to_cluster(initial_provider.pub, node.pubkey, cluster1_name)
    ).sign(initial_provider).run_must_fail();
}

function test_cluster_replica_node_added_as_cluster_node() {
    setup_module();
    val node = node @ { .provider == initial_provider() };

    // Creating cluster
    val cluster1_name = "cluster1";
    rell.test.tx().op(
        update_node_with_units(initial_provider.pub, node.pubkey, cluster_units = 2),
        create_cluster(initial_provider.pub, cluster1_name, voter_sets.system_p, [initial_provider.pub]),
        add_replica_node_to_cluster(initial_provider.pub, node.pubkey, cluster1_name)
    ).sign(initial_provider).run();
    assert_true(exists(cluster_replica_node @? { .cluster.name == cluster1_name, node }));

    // Adding cluster replica node as a cluster node
    rell.test.tx().op(
        add_node_to_cluster(initial_provider.pub, node.pubkey, cluster1_name)
    ).sign(initial_provider).run();
    assert_true(empty(cluster_replica_node @? { .cluster.name == cluster1_name, node }));
    assert_true(exists(cluster_node @? { .cluster.name == cluster1_name, node }));
}

