module;

import ^^.*;

operation initialize_test_module(
    pubkey,
    test_node: node_info,
    system_anchoring_config: map<text, gtv> = map<text, gtv>(),
    cluster_anchoring_config: map<text, gtv> = map<text, gtv>(),
    majority_threshold: integer = 0,
    provider_quota_max_actions_per_day: integer = provider_quota_defaults.MAX_ACTIONS_PER_DAY,
    provider_quota_max_containers: integer = provider_quota_defaults.MAX_CONTAINERS
) {
    initialize_module(
        pubkey,
        test_node,
        system_anchoring_config = system_anchoring_config.to_gtv().to_bytes(),
        cluster_anchoring_config = cluster_anchoring_config.to_gtv().to_bytes(),
        majority_threshold = majority_threshold,
        provider_quota_max_actions_per_day = provider_quota_max_actions_per_day,
        provider_quota_max_containers = provider_quota_max_containers
    );
}

operation create_test_provider(name, pubkey, provider_tier = provider_tier.NODE_PROVIDER) {
    if (empty(provider_quota @* { .tier == provider_tier })) {
        create provider_quota(provider_tier, provider_quota_type.max_actions_per_day, value = 100);
        create provider_quota(provider_tier, provider_quota_type.max_nodes, value = provider_quota_defaults.MAX_NODES);
    }
    val p = create provider(pubkey, name, active = true, provider_tier);
    create provider_rl_state(p, points = 10000, last_update = 0);
}

operation create_test_node(provider, pubkey, cluster, cluster_units: integer = 1) {
    val c = list<text>();
    c.add(cluster.name);
    add_node_internal(provider, node_info(pubkey, host = "", 0, api_url = "", territory = "SE"), c, cluster_units);
}

operation create_test_voter_set(name, threshold: integer, governor: voter_set?) {
    create_voter_set_internal(name, threshold, governor);
}
