
query get_node(pubkey) = node @ { pubkey };

struct node_data {
    provider: pubkey;
    pubkey;
    active: boolean;
    host: text;
    port: integer;
    last_updated: timestamp;
    api_url: text;
    cluster_units: integer?;
    territory: text?;
}

query get_node_data(pubkey) {
    val node = require_node(pubkey);
    return node_data(
        provider = node.provider.pubkey,
        pubkey = node.pubkey,
        active = node.active,
        host = node.host,
        port = node.port,
        last_updated = node.last_updated,
        api_url = node.api_url,
        cluster_units = node.cluster_units,
        territory = node.territory
    );
}

query list_clusters_of_node(pubkey): list<text> {
    val node = require_node(pubkey);
    return cluster_node @* { node }.cluster.name;
}

query get_node_containers(pubkey): list<(cluster:text, name:text, deployer:text)> {
    val node = require_node(pubkey);
    val clusters = cluster_node @* { node } .cluster;
    val res = list<(cluster:text, name:text, deployer:text)>();
    for (cl in clusters) {
        val containers = container @* { cl } (@sort cluster = .cluster.name, @sort name = .name, deployer = .deployer.name);
        res.add_all(containers);
    }
    return res;
}

// deprecated
query get_nodes_with_provider() {
    return node @* {} (
        pubkey = .pubkey,
        node_active = .active,
        host = .host,
        port = .port,
        last_updated = .last_updated,
        name = .provider.name,
        provider_active = .provider.active,
        @sort provider = .provider.pubkey
    );
}

query get_all_nodes(include_inactive: boolean) {
    val nodes = if (include_inactive) node @* {} else node @* { .active };
    return nodes @* {} (
        info = node_info(.pubkey, host = .host, port = .port, api_url = .api_url, territory = .territory),
        active = .active,
        last_updated = .last_updated,
        provider = .provider.to_struct()
    );
}
