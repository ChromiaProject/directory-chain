@test module;

import ^^.*;
import ^^^.*;
import ^^^.operations.*;
import ^^^.test.ops.*;
import ^^^.test.setup.*;
import direct_cluster.*;
import direct_container.*;
import model.*;
import proposal_cluster.*;
import proposal_container.*;
import proposal_provider.*;

function test_get_operational_dapp_clusters() {
    setup_module();

    // Create a new node
    rell.test.tx().op(
        register_node_with_node_data(rell.test.pubkeys.alice, register_node_data(rell.test.pubkeys.bob, host = "host", port = 7777, api_url = "http://host/api_url"))
    ).sign(rell.test.keypairs.alice).run();
    val node = node @ { .pubkey == rell.test.pubkeys.bob };

    // Adding a new cluster
    rell.test.tx().op(
        create_cluster(rell.test.pubkeys.alice, "cluster1", voter_sets.system_p, [rell.test.pubkeys.alice])
    ).sign(rell.test.keypairs.alice).run();

    rell.test.tx().op(
        add_node_to_cluster(rell.test.pubkeys.alice, node.pubkey, "cluster1")
    ).sign(rell.test.keypairs.alice).run();

    val clusters = get_operational_dapp_clusters();
    val expected_clusters = [
        cluster_data(
            name = "cluster1",
            governor = voter_sets.system_p,
            is_operational = true,
            cluster_units = 1,
            extra_storage = 0,
            number_of_nodes = 1,
            container_units_available = 12,
            extra_storage_available = 0
        )
    ];
    assert_equals(clusters, expected_clusters);
}
