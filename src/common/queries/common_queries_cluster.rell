
query get_cluster(name) = cluster @ { name };

query get_clusters() {
    return cluster @* {} (
        name = .name,
        governor = .governance.name,
        operational = .operational
    );
}

struct cluster_data {
    name;
    governor: text;
    is_operational: boolean;
    cluster_units: integer?;
    extra_storage: integer?;
    number_of_nodes: integer;
    container_units_available: integer?;
    extra_storage_available: integer?;
}

query get_cluster_data(name) {
    val cluster = require_cluster(name);
    return cluster_data(
        name = cluster.name,
        governor = cluster.governance.name,
        is_operational = cluster.operational,
        cluster_units = cluster.cluster_units,
        extra_storage = cluster.extra_storage,
        number_of_nodes = number_of_nodes_in_cluster(cluster),
        container_units_available = get_available_container_units(cluster),
        extra_storage_available = get_available_extra_storage(cluster)
    );
}

query get_operational_dapp_clusters(): list<cluster_data> {
    val counts = map(cluster_node @* { .cluster.operational == true, .cluster.name != clusters.system } (@group .cluster, @sum 1));
    return cluster @* { .operational == true, .name != clusters.system } (cluster_data(
        name = .name,
        governor = .governance.name,
        is_operational = .operational,
        cluster_units = .cluster_units,
        extra_storage = .extra_storage,
        number_of_nodes = counts.get_or_default($, 0),
        container_units_available = get_available_container_units($),
        extra_storage_available = get_available_extra_storage($)
    ));
}

query get_cluster_providers(name): list<(name:text, pubkey:pubkey)> {
    val cluster = require_cluster(name);
    return cluster_provider @* { cluster } (name = .provider.name, pubkey = .provider.pubkey);
}

query get_cluster_nodes(name) {
    val cluster = require_cluster(name);
    return cluster_node @* { cluster } (
        pubkey = .node.pubkey,
        host = .node.host,
        port = .node.port,
        api_url = .node.api_url,
        active = .node.active
    );
}

query get_cluster_replica_nodes(name) {
    val cluster = require_cluster(name);
    return cluster_replica_node @* { cluster } (
        pubkey = .node.pubkey,
        host = .node.host,
        port = .node.port,
        api_url = .node.api_url,
        active = .node.active
    );
}

query get_cluster_containers(cluster_name: text): list<(name:text, deployer:text)> {
    return container @* { .cluster.name == cluster_name } ( @sort name = .name, deployer = .deployer.name);
}

query get_cluster_blockchains(name) = cm_get_cluster_blockchains(name);

query get_cluster_api_urls(name) {
    return (cluster_node, cluster) @* { cluster.name == name and cluster == cluster_node.cluster } ( cluster_node.node.api_url );
}

