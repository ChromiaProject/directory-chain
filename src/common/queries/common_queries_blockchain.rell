query get_blockchain(rid: byte_array) = blockchain @ { rid };

query get_blockchain_signers(blockchain_rid: byte_array): list<(byte_array, text, integer, boolean, integer)> {
    val blockchain = require_blockchain(blockchain_rid, true);
    return get_blockchain_signer_nodes(blockchain) @* {} (
        @sort _ = .pubkey,
        _ = .host,
        _ = .port,
        _ = .active,
        _ = .last_updated
    );
}

query get_blockchain_replicas(blockchain_rid: byte_array) {
    return blockchain_replica_node @* { .blockchain.rid == blockchain_rid } (
        @sort .node.pubkey,
        .node.host,
        .node.port,
        .node.active,
        .node.last_updated
    );
}

query get_blockchains(include_inactive: boolean): list<struct<blockchain>> {
    if (include_inactive) {
        return blockchain @* {} ($.to_struct());
    }
    return blockchain @* { .state == blockchain_state.RUNNING } ($.to_struct());
}

// Will return RUNNING and PAUSED if include_inactive == true
function get_blockchains_with_container(include_inactive: boolean) {
    if (include_inactive) {
        return (b: blockchain, c: container_blockchain) @* { c.blockchain == b } (blockchain=b, c.container) ;
    } else {
        return (b: blockchain, c: container_blockchain) @* { c.blockchain == b and b.state == blockchain_state.RUNNING } (blockchain = b, c.container);
    }
}

struct blockchain_info {
    rid: byte_array;
    name: text;
    state: blockchain_state;
    container: name?;
    cluster: name?;
    system: boolean?;
    is_foreign_importing: boolean?;
    is_moving: boolean?;
    is_unarchiving: boolean?;
}

query get_blockchain_info(rid: byte_array): blockchain_info? {
    val blockchain = blockchain @? { rid };
    if (blockchain != null) {
        val container = container_blockchain @? { blockchain } (.container);
        return blockchain_info(
            rid = blockchain.rid,
            name = blockchain.name,
            state = blockchain.state,
            container = container?.name,
            cluster = container?.cluster?.name,
            system = blockchain.system,
            is_foreign_importing = importing_foreign_blockchain @? { .blockchain_rid == rid } ??,
            is_moving = moving_blockchain @? { blockchain } ??,
            is_unarchiving = unarchiving_blockchain @? { blockchain } ??
        );
    } else {
        return null;
    }
}

// Will return RUNNING, PAUSED and REMOVED if include_inactive == true
query get_blockchain_info_list(include_inactive: boolean): list<blockchain_info> {
    var bc_infos = list<(blockchain: blockchain, container: container?)>();
    if (include_inactive) {
        val connected_blockchains = container_blockchain @* {} (.blockchain, .container);
        val removed_blockchains = blockchain @* {
            blockchain not in connected_blockchains @* {}.blockchain
        } (blockchain = blockchain, container = null);
        bc_infos.add_all(connected_blockchains);
        bc_infos.add_all(removed_blockchains);
    } else {
        bc_infos.add_all((b: blockchain, c: container_blockchain) @* { c.blockchain == b and b.state == blockchain_state.RUNNING } (blockchain = b, c.container));
    }

    val result = list<blockchain_info>();
    for (bc in bc_infos) {
        result.add(blockchain_info(
            rid = bc.blockchain.rid,
            name = bc.blockchain.name,
            state = bc.blockchain.state,
            container = bc.container?.name,
            cluster = bc.container?.cluster?.name,
            system = bc.blockchain.system,
            is_foreign_importing = importing_foreign_blockchain @? { .blockchain_rid == bc.blockchain.rid } ??,
            is_moving = moving_blockchain @? { bc.blockchain } ??,
            is_unarchiving = unarchiving_blockchain @? { bc.blockchain } ??
        ));
    }
    return result;
}

query get_blockchain_cluster(blockchain_rid: byte_array) = cm_get_blockchain_cluster(blockchain_rid);

query get_blockchain_api_urls(blockchain_rid: byte_array) = cm_get_blockchain_api_urls(blockchain_rid);

struct blockchain_signers_info {
    height: integer;
    signers: list<pubkey>;
}

query get_blockchain_signer_updates(blockchain_rid: byte_array, from_height: integer): list<blockchain_signers_info> {
    val blockchain = require_blockchain(blockchain_rid, false, true);
    return blockchain_configuration_signers @* { blockchain, .height >= from_height }
        (@omit @sort .height, blockchain_signers_info(.height, list<pubkey>.from_gtv(gtv.from_bytes(.signers))));
}

query get_compressed_configuration_parts(configuration_part_hashes: set<byte_array>): list<byte_array> =
        compressed_blockchain_configuration_part @* { .hash in configuration_part_hashes }.hash;

query get_importing_foreign_blockchain_info(blockchain_rid: byte_array): struct<importing_foreign_blockchain>? =
        importing_foreign_blockchain @? { blockchain_rid } ($.to_struct());

query get_moving_blockchain_info(blockchain_rid: byte_array) = moving_blockchain @? { .blockchain.rid == blockchain_rid } (
    source_container = .source.name,
    destination_container = .destination.name,
    final_height = .final_height
);

query get_unarchiving_blockchain_info(blockchain_rid: byte_array) = unarchiving_blockchain @? { .blockchain.rid == blockchain_rid } (
    source_container = .source.name,
    destination_container = .destination.name,
    final_height = .final_height
);
