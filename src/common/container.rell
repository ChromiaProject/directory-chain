function create_system_container(me: provider, name, cluster, voter_set): container {
    val c = create container(name, cluster, voter_set, me, system = true);
    create container_resource_limit(c, container_resource_limit_type.container_units, system_container_defaults.container_units);
    create container_resource_limit(c, container_resource_limit_type.max_blockchains, system_container_defaults.max_blockchains);
    create container_resource_limit(c, container_resource_limit_type.extra_storage, system_container_defaults.extra_storage);
    return c;
}

function create_container_with_limits(me: provider, name, cluster, voter_set, container_units: integer, max_blockchains: integer, extra_storage: integer): container {
    require(container_units > 0, "Container must have at least 1 container unit");
    require_cluster_quotas(cluster, container_units, extra_storage);
    val c = create container(name, cluster, voter_set, me);
    create container_resource_limit(c, container_resource_limit_type.container_units, container_units);
    create container_resource_limit(c, container_resource_limit_type.max_blockchains, max_blockchains);
    create container_resource_limit(c, container_resource_limit_type.extra_storage, extra_storage);
    return c;
}

function remove_container_impl(container) {
    before_remove_container(container);
    delete container_resource_limit @* { container };
    delete container;
}

@extendable function before_remove_container(container) {}

@extendable function is_container_available_for_removal(container): text? {
    return when {
        container.system -> "System container can't be deleted";
        exists(container_blockchain @* { container }) -> "Container %s is not empty and can't be deleted. Delete blockchains first".format(container.name);
        else -> null;
    };
}

function require_container_available_for_removal(container) {
    val objections = is_container_available_for_removal(container);
    require(empty(objections), objections!!);
}

@extend(before_cluster_removal) function remove_system_container(cluster) {
    before_system_container_removal(cluster);
    remove_container_impl(container @ { cluster, .system == true });
}

@extendable function before_system_container_removal(cluster) {}

function create_container_impl(me: provider, name, cluster, consensus_threshold: integer, deployers: list<pubkey>, container_units: integer, max_blockchains: integer, extra_storage: integer): container {
    require(consensus_threshold >= -1 and consensus_threshold <= deployers.size(), "Invalid threshold");

    val vs_name = "container_" + name + "_deployer";
    require(empty(voter_set @? { vs_name }), "Voter set named %s already exists".format(vs_name));
    val vs = create_voter_set_internal(vs_name, consensus_threshold, cluster.governance);
    for (deployer_key in deployers) {
        val deployer = require_provider(deployer_key);
        create voter_set_member(vs, deployer);
    }

    return create_container_with_limits(me, name, cluster, vs, container_units, max_blockchains, extra_storage);
}

function remove_container_and_voter_set(container) {
    if (empty(is_container_available_for_removal(container))) {
        val vs = container.deployer;
        remove_container_impl(container);
    }
}

function get_current_container_resource_limits(container_name: text): map<container_resource_limit_type, integer> {
    var limits_map = map<container_resource_limit_type, integer>();
    val cur_limits_list = container_resource_limit @* { .container.name == container_name };
    for (l in cur_limits_list) {
        limits_map[l.container_resource_limit_type] = l.value;
    }
    return limits_map;
}

function get_container_limit_or_default(container, type: container_resource_limit_type, default: integer): integer {
    return container_resource_limit @? { container, .container_resource_limit_type == type } (.value) ?: default;
}

function require_container_is_not_full(container) {
    val max_blockchains = container_resource_limit @ { container, container_resource_limit_type.max_blockchains } (.value);
    if (max_blockchains > 0) {
        val container_dapps_count = container_blockchain @* { container } (@sum 1)[0];
        require(container_dapps_count < max_blockchains, "Can't add blockchain, container %s is full".format(container.name));
    }
}

function get_container_blockchain_count(container) {
    return container_blockchain @* { container } (@sum 1)[0];
}