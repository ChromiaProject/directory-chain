/**
 * Adding a node to a cluster automatically makes it signer of all bc in this cluster.
 * Only one node per provider and cluster.
 */
operation add_node_to_cluster(my_pubkey: pubkey, node_pubkey: pubkey, cluster_name: text) {
    val provider = require_provider(my_pubkey);
    require_provider_auth_with_rate_limit(provider);
    val cluster = require_cluster(cluster_name);
    val node = require_node(node_pubkey, false);
    add_node_to_cluster_internal(provider, node, cluster);
}

operation add_replica_node_to_cluster(my_pubkey: pubkey, node_pubkey: pubkey, cluster_name: text) {
    val provider = require_provider(my_pubkey);
    require_provider_auth_with_rate_limit(provider);
    val cluster = require_cluster(cluster_name);
    val node = require_node(node_pubkey, false);
    require(empty(cluster_replica_node @* { cluster, node }), "Node %s is already a replica of the cluster %s".format(node_pubkey, cluster_name));
    require(node.provider == provider, "It is only allowed to add own node as a container replica");
    require(empty(cluster_node @* { cluster, node }), "Node %s is a cluster node and can't be added to cluster %s as a replica node".format(node_pubkey, cluster_name));
    _add_replica_node_to_cluster_internal(cluster, node);
}

operation remove_replica_node_from_cluster(my_pubkey: pubkey, node_pubkey: pubkey, cluster_name: text) {
    val provider = require_provider(my_pubkey);
    require_provider_auth_with_rate_limit(provider);
    val cluster = require_cluster(cluster_name);
    val node = require_node(node_pubkey);
    require(exists(cluster_replica_node @* { cluster, node }), "Node %s is not a replica of the cluster %s".format(node_pubkey, cluster_name));
    require(node.provider == provider, "It is only allowed to remove own container replica node");
    _remove_replica_node_from_cluster_internal(cluster, node);
}