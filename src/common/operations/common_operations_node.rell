/**
 * @deprecated use register_node_with_node_data instead
 */
operation register_node(my_pubkey: pubkey, node_pubkey: pubkey, host: text, port: integer, api_url: text, clusters:list<text> = list<text>()) {
    register_node_impl_dep(my_pubkey, node_pubkey, host, port, api_url, clusters, "", 1);
}

/**
 * @deprecated use register_node_with_node_data instead
 */
operation register_node_with_units(my_pubkey: pubkey, node_pubkey: pubkey, host: text, port: integer, api_url: text, clusters:list<text> = list<text>(), cluster_units: integer) {
    register_node_impl_dep(my_pubkey, node_pubkey, host, port, api_url, clusters, "", cluster_units);
}

/**
 * @deprecated use register_node_with_node_data instead
 */
operation register_node_with_territory_and_units(my_pubkey: pubkey, node_pubkey: pubkey, host: text, port: integer, api_url: text, territory: text, cluster_units: integer, clusters:list<text> = list<text>()) {
    register_node_impl_dep(my_pubkey, node_pubkey, host, port, api_url, clusters, territory, cluster_units);
}

/**
 * @deprecated use register_node_with_node_data instead
 */
function register_node_impl_dep(my_pubkey: pubkey, node_pubkey: pubkey, host: text, port: integer, api_url: text, clusters:list<text> = list<text>(), territory: text, cluster_units: integer) {
    val node_data = register_node_data(node_pubkey, host = host, port, api_url = api_url,clusters=clusters, cluster_units = cluster_units, territory = territory, extra_storage = 0);
    register_node_impl(my_pubkey, node_data);
}

operation register_node_with_node_data(my_pubkey: pubkey, node_data: register_node_data) {
    register_node_impl(my_pubkey, node_data);
}

function register_node_impl(my_pubkey: pubkey, node_data: register_node_data) {
    log("------------- Register-Node: %s --------------".format(node_data.pubkey));
    val provider = require_provider(my_pubkey);
    require_provider_auth_with_rate_limit(provider);
    require_pubkey(node_data.pubkey);
    add_node_internal(provider, node_data);
    log("Added node information for node: " + node_data.pubkey);
    log("-----------------------------------");
}

/**
 * @deprecated use replace_node_with_node_data instead
 */
operation replace_node(my_pubkey: pubkey, old_node_key: pubkey, new_node_key: pubkey, new_host: text?, new_port: integer?, new_api_url: text?) {
    replace_node_with_units_impl(my_pubkey, old_node_key, new_node_key, new_host, new_port, new_api_url, new_cluster_units = 1, new_territory = null);
}

/**
 * @deprecated use replace_node_with_node_data instead
 */
operation replace_node_with_units(my_pubkey: pubkey, old_node_key: pubkey, new_node_key: pubkey, new_host: text?, new_port: integer?, new_api_url: text?, cluster_units: integer) {
    replace_node_with_units_impl(my_pubkey, old_node_key, new_node_key, new_host, new_port, new_api_url, new_cluster_units = cluster_units, new_territory = null);
}

/**
 * @deprecated use replace_node_with_node_data instead
 */
operation replace_node_with_units_and_territory(my_pubkey: pubkey, old_node_key: pubkey, new_node_key: pubkey, new_host: text?, new_port: integer?, new_api_url: text?, new_territory: text?, cluster_units: integer) {
    replace_node_with_units_impl(my_pubkey, old_node_key, new_node_key, new_host, new_port, new_api_url, new_cluster_units = cluster_units, new_territory = new_territory);
}

/**
 * @deprecated use replace_node_with_node_data instead
 */
function replace_node_with_units_impl(my_pubkey: pubkey, old_node_key: pubkey, new_node_key: pubkey, new_host: text?, new_port: integer?, new_api_url: text?, new_territory: text?, new_cluster_units: integer) {
    val node_data = replace_node_data(old_node_key, new_node_key, new_host, new_port, new_api_url, new_cluster_units, new_territory, new_extra_storage = 0);
    replace_node_with_node_data_impl(my_pubkey, node_data);
}

operation replace_node_with_node_data(my_pubkey: pubkey, node_data: replace_node_data) {
    replace_node_with_node_data_impl(my_pubkey, node_data);
}

function replace_node_with_node_data_impl(my_pubkey: pubkey, node_data: replace_node_data) {
    log("------------- Replace-Node: %s --------------".format(node_data.old_node_key));
    val me = require_is_provider_with_rate_limit(my_pubkey);
    require_is_signer(node_data.old_node_key);
    require_is_signer(node_data.new_node_key);
    val old_node = node @ { node_data.old_node_key };
    require(old_node.provider == me, "Node must be owned by provider");
    _require_replace_cluster_units(old_node, node_data);
    _require_replace_extra_storage(old_node, node_data);

    val cluster_names = cluster_node @* { old_node }.cluster.name;
    delete cluster_node @* { old_node };
    val clusters_replicated_by_node = cluster_replica_node @* { old_node } (.cluster);
    delete cluster_replica_node @* { old_node };
    val blockchains_replicated_by_node = blockchain_replica_node @* { old_node } (.blockchain);
    delete blockchain_replica_node @* { old_node };

    val register_node_data = register_node_data(
        node_data.new_node_key, 
        host = node_data.new_host ?: old_node.host, 
        port = node_data.new_port ?: old_node.port,
        api_url = node_data.new_api_url ?: old_node.api_url,
        clusters = cluster_names,
        cluster_units = node_data.new_cluster_units ?: old_node.cluster_units,
        territory = node_data.new_territory ?: old_node.territory,
        extra_storage = node_data.new_extra_storage ?: old_node.extra_storage);

    before_node_removal(old_node);
    delete old_node;
    val new_node = add_node_internal(me, register_node_data, require_not_exists = false);

    for (cl in clusters_replicated_by_node) {
        _add_replica_node_to_cluster_internal(cl, new_node);
    }

    for (blockchain in blockchains_replicated_by_node) {
        if (not(exists(blockchain_replica_node @? { blockchain, new_node }))) {
            create blockchain_replica_node(blockchain, new_node);
        }
    }

    node_list.last_update = op_context.last_block_time;
    log("---------------------------------------");
}

function _require_replace_cluster_units(old_node: node, node_data: replace_node_data) {
    val new_cluster_units = node_data.new_cluster_units;
    if (new_cluster_units != null) {
        val old_cluster_units_used = get_used_cluster_units_for_node(old_node);
        require(new_cluster_units >= old_cluster_units_used, "Node must have at least %d cluster_units".format(old_cluster_units_used));
    }
}

function _require_replace_extra_storage(old_node: node, node_data: replace_node_data) {
    val new_extra_storage = node_data.new_extra_storage;
    if (new_extra_storage != null) {
        val old_extra_storage_used = get_used_extra_storage_for_node(old_node);
        require(new_extra_storage >= old_extra_storage_used, "Node must have at least %d MiB extra storage".format(old_extra_storage_used));
    }
}    

operation enable_node(my_pubkey: pubkey, node_pubkey: pubkey) {
    log("------------- Enable-Node: %s --------------".format(node_pubkey));
    val provider = require_is_provider_with_rate_limit(my_pubkey);
    val node = require_node(node_pubkey);
    require(node.provider == provider, "Node must be owned by provider: " + node_pubkey);
    require(not(node.active), "Node is already active: " + node_pubkey);
    node.active = true;
    after_node_added(node);
    log("-----------------------------------");
}

operation disable_node(my_pubkey: pubkey, node_pubkey: pubkey) {
    val provider = require_provider(my_pubkey);
    require_provider_auth_with_rate_limit(provider);
    val node_to_disable = require_node(node_pubkey);

    if (provider != node_to_disable.provider) {
        require(roles.has_system_access(provider), "Non system provider is only allowed to disable own nodes");
        require(
            node_to_disable.provider.tier == provider_tier.NODE_PROVIDER and not(node_to_disable.provider.system),
            "System provider is only allowed to disable nodes of non system provider");
    }

    node_to_disable.active = false;

    // cluster nodes
    val clusters = cluster_node @* { node_to_disable } .cluster;
    delete cluster_node @* { node_to_disable };
    for (cl in clusters) {
        update_configuration_signers(cl, node_to_disable);
    }
    after_node_removed_from_cluster(node_to_disable, null);

    // cluster replica nodes
    delete cluster_replica_node @* { .node.pubkey == node_pubkey };
    after_replica_node_removed_from_cluster(node_to_disable, null);

    // blockchain replica nodes
    delete blockchain_replica_node @* { .node.pubkey == node_pubkey };

    // updating node list timestamp
    node_list.last_update = op_context.last_block_time;
}

operation remove_node(my_pubkey: pubkey, node_pubkey: pubkey) {
    log("------------- Remove-Node: %s --------------".format(node_pubkey));
    val provider = require_provider(my_pubkey);
    require_provider_auth_with_rate_limit(provider);
    val node_to_remove = require_node(node_pubkey);
    require(provider == node_to_remove.provider, "It is only allowed to remove own nodes: " + node_pubkey);
    require(not(node_to_remove.active), "Can't remove active nodes: " + node_pubkey);
    before_node_removal(node_to_remove);
    delete node_to_remove;
    log("---------------------------------------");
}

/**
 * @deprecated use update_node_with_node_data instead
 */
operation update_node(my_pubkey: pubkey, node_pubkey: pubkey, host: text? = null, port: integer? = null, api_url: text? = null) {
    update_node_impl(my_pubkey, node_pubkey, host, port, api_url, null, null);
}

/**
 * @deprecated use update_node_with_node_data instead
 */
operation update_node_with_units(my_pubkey: pubkey, node_pubkey: pubkey, host: text? = null, port: integer? = null, api_url: text? = null, cluster_units: integer? = null) {
    update_node_impl(my_pubkey, node_pubkey, host, port, api_url, null, cluster_units);
}

/**
 * @deprecated use update_node_with_node_data instead
 */
operation update_node_with_territory_and_units(my_pubkey: pubkey, node_pubkey: pubkey, host: text? = null, port: integer? = null, api_url: text? = null, territory: text? = null, cluster_units: integer? = null) {
    update_node_impl(my_pubkey, node_pubkey, host, port, api_url, territory, cluster_units);
}

/**
 * @deprecated use update_node_with_node_data instead
 */
function update_node_impl(my_pubkey: pubkey, node_pubkey: pubkey, host: text?, port: integer?, api_url: text?, territory: text?, cluster_units: integer?) {
    val node_data = update_node_data(node_pubkey, host, port, api_url, cluster_units, territory, extra_storage = null);
    update_node_with_node_data_impl(my_pubkey, node_data);
}

operation update_node_with_node_data(my_pubkey: pubkey, node_data: update_node_data) {
    update_node_with_node_data_impl(my_pubkey, node_data);
}

function update_node_with_node_data_impl(my_pubkey: pubkey, node_data: update_node_data) {
    val node = require_node_provider(node_data.pubkey, my_pubkey);
    if (node_data.host != null) node.host = node_data.host!!;
    if (node_data.port != null) node.port = node_data.port!!;
    if (node_data.api_url != null) node.api_url = node_data.api_url!!;
    if (node_data.territory != null) node.territory = node_data.territory!!;
    if (
        node_data.host != null or
        node_data.port != null or
        node_data.api_url != null or
        node_data.territory != null or
        node_data.cluster_units != null or
        node_data.extra_storage != null
    ) node.last_updated = op_context.last_block_time;
    if (node_data.host != null or node_data.port != null) node_list.last_update = op_context.last_block_time;
    val cluster_units = node_data.cluster_units;
    if (cluster_units != null) {
        require(cluster_units > 0, "Node must have at least 1 cluster_unit");
        val needed_cluster_units = get_used_cluster_units_for_node(node);
        require(cluster_units >= needed_cluster_units,
            "Can not update cluster units to %d since the node needs at least %d to support current clusters.".format(cluster_units, needed_cluster_units));
        node.cluster_units = cluster_units;
    }
    val extra_storage = node_data.extra_storage;
    if (extra_storage != null) {
        val needed_extra_storage = get_used_extra_storage_for_node(node);
        require(extra_storage >= needed_extra_storage,
            "Can not update extra storage to %d MiB since the node needs at least %d MiB to support current clusters.".format(extra_storage, needed_extra_storage));
        node.extra_storage = extra_storage;
    }
    after_node_updated(node);
}

operation update_node_capability(my_pubkey: pubkey, node_pubkey: pubkey, type: node_capability_type, add: boolean) {
    val node = require_node_provider(node_pubkey, my_pubkey);
    if (add) {
        require(node_capabilities @? { node, type } == null, "Node already has this capability");
        create node_capabilities(node, type);
        after_node_capability_added(node, type);
    } else {
        require(node_capabilities @? { node, type } != null, "Node does not have this capability");
        before_node_capability_removal(node, type);
        delete node_capabilities @ { node, type };
    }
}