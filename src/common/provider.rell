function _is_node_provider(tier: provider_tier) = tier == provider_tier.NODE_PROVIDER;

@extendable function register_and_enable_provider(provider_info, provider_tier, cluster?, voter_set?, enabled_by_default: boolean = false) {
    require(empty(node @? { provider_info.pubkey }), "This pubkey is already registered as a node: " + provider_info.pubkey);
    val provider = create provider(
        provider_info.pubkey,
        name = provider_info.name,
        url = provider_info.url,
        active = enabled_by_default,
        tier = provider_tier
    );
    create provider_rl_state(provider, points = 100, last_update=op_context.last_block_time);
    if (exists(cluster)) {
        create cluster_provider(cluster, provider);
    }
    if (exists(voter_set)) {
        create voter_set_member(voter_set, provider);
    }
    after_provider_registered(provider, cluster);
}

// Recover provider's action points and consume one, if possible
function provider_rate_limit(provider) {
    val max_actions_per_day = provider_quota @ {
            .tier == provider.tier,
            provider_quota_type.max_actions_per_day
    } .value;

    // We recover max_actions_per_day in 24 hours, find time needed to recover 1 point
    val recovery_time = (86400 * 1000) / max_actions_per_day;
    val state = provider_rl_state @ { provider } (.points, .last_update);
    val time_delta = op_context.last_block_time - state.last_update;
    var got_points = 0;
    var update_time = state.last_update;

    if (time_delta > recovery_time) {
        got_points = time_delta / recovery_time;
        // advance  update_time to a multiple of recovery_time to avoid wasting time
        update_time = state.last_update + got_points * recovery_time;
        if (got_points + state.points > max_actions_per_day) {
            got_points = max_actions_per_day - state.points;
            // if user is at the maximum reset his timer
            update_time = op_context.last_block_time;
        }
    }

    require(state.points + got_points > 0, "Provider has no points to spend: " + provider.pubkey);

    update provider_rl_state @ { provider } (
        .points += got_points - 1,
        .last_update = update_time
    );
}

function require_provider_quota(provider, quota_type: provider_quota_type) {
    val quota = provider_quota @ { provider.tier, quota_type } (.value);
    if (quota > 0) {
        when (quota_type) {
            max_nodes -> _require_provider_quota(quota, quota_type, node @ { provider } (@sum 1));
            max_containers -> _require_provider_quota(quota, quota_type, container @ { provider, .system == false } (@sum 1));
        }
    }
}

function _require_provider_quota(quota: integer, quota_type: provider_quota_type, count: integer) {
    require(count < quota , "Provider quota exceeded: %s = %d".format(quota_type, quota));
}

@extendable function after_provider_registered(provider, cluster: cluster?) {}

@extendable function after_provider_updated(provider) {}