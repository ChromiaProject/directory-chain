entity pending_container {
    key proposal;
    key name;
    cluster;
    deployer: voter_set;
    container_units: integer;
    max_blockchains: integer;
    extra_storage: integer;
    proposed_by: provider;
}

@extend(apply_voting_result_handlers) function() = [proposal_type.container.name: apply_container(*)];

function apply_container(proposal) {
    val pps = pending_container @? { proposal };
    if (pps == null) return;
    create_container_with_limits(
        pps.proposed_by,
        pps.name,
        pps.cluster,
        pps.deployer,
        pps.container_units,
        pps.max_blockchains,
        pps.extra_storage
    );
}

@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [proposal_type.container.name: delete_pending_container(*)];

function delete_pending_container(proposal) {
    delete pending_container @? { proposal };
}

// Who can create a new container? Cluster deployers' voter set. (They can also update container limits.)
operation propose_container(my_pubkey: pubkey, cluster_name: text, name, deployer_name: text, description: text = "") {
    // check that provider authority and that it is cluster's deployer
    val me = require_provider(my_pubkey);
    require_provider_auth_with_rate_limit(me);
    val cluster = require_cluster(cluster_name);
    val deployer = require_voter_set(deployer_name);
    require_cluster_governor(cluster, me);
    require_provider_quota(me, provider_quota_type.max_containers);

    val container_units = standard_container_defaults.container_units;
    val max_blockchains = standard_container_defaults.max_blockchains;
    val extra_storage = standard_container_defaults.extra_storage;

    require_cluster_quotas(cluster, container_units, extra_storage);

    val prop = create proposal(op_context.last_block_time, proposal_type.container, me, cluster.governance, description);
    create pending_container(
        prop, name, cluster, deployer, container_units, max_blockchains, extra_storage, me
    );
    internal_vote(me, prop, true);
}

query get_container_proposal(rowid) {
    val proposal = get_latest_proposal(rowid, proposal_type.container);
    if (proposal == null) return null;
    val pcwl = pending_container @ { proposal };
    return (
        container = pcwl.name,
        container_units = pcwl.container_units,
        max_blockchains = pcwl.max_blockchains,
        extra_storage = pcwl.extra_storage
    );
}

