module;

import common.*;
import model.*;

/**
 * Cluster Management api used by postchain to get information about cluster anchoring chains
 */

struct cm_peer_info {
    pubkey: pubkey;
    api_url: text;
}

struct cm_cluster_info {
    name;
    anchoring_chain: byte_array;
    peers: list<cm_peer_info>;
}

query cm_get_cluster_info(name): cm_cluster_info {
    val cluster = require_cluster(name);
    val cac = require(cluster_anchoring_chain @? { cluster }, "Cluster anchoring chain not found for cluster " + name);
    val cluster_peer = cluster_node @* {
        cluster_node.cluster == cluster,
        cluster.name == name
    } (
        peer = .node.pubkey,
        peer_api_url = .node.api_url
    ); 
    val peers = list<cm_peer_info>();
    for (cp in cluster_peer) {
        peers.add(cm_peer_info(pubkey = cp.peer, api_url = cp.peer_api_url));
    }
    return cm_cluster_info(
        name = cluster.name,
        anchoring_chain = cac.blockchain.rid,
        peers = peers
    );
}

query cm_get_cluster_names(): list<text> {
    return cluster @* { .operational == true } ( .name );
}

query cm_get_cluster_blockchains(name): list<byte_array> {
    return (container_blockchain) @* { .container.cluster.name == name } ( .blockchain.rid );
}

// Returns signers of blockchain at specific height
// NB: doesn't take into account pending configurations
query cm_get_peer_info(brid: byte_array, height: integer): set<pubkey> {
    val bc = require_blockchain(brid);
    return set<pubkey>.from_gtv(
        get_signers_for_configuration(bc, height)
    );
}

query cm_get_blockchain_cluster(brid: byte_array): text {
    if (brid == chain_context.blockchain_rid) return clusters.system; // I am chain0

    val bc = require_blockchain(brid);
    return container_blockchain @ { bc } ( .container.cluster.name );
}

query cm_get_blockchain_api_urls(blockchain_rid: byte_array) {
    return (blockchain, container_blockchain, cluster_node) @*
    {
        blockchain.rid == blockchain_rid,
        container_blockchain.blockchain.rid == blockchain.rid,
        container_blockchain.container.cluster == cluster_node.cluster
    } (
        cluster_node.node.api_url
    );
}

query cm_get_cluster_anchoring_chains(): list<byte_array> {
    return cluster_anchoring_chain @* {} ( .blockchain.rid );
}

query cm_get_system_anchoring_chain(): byte_array? {
    if (system_anchoring_chain.rid.empty()) return null;

    return system_anchoring_chain.rid;
}

query cm_get_system_chains(): list<byte_array> {
    return blockchain @* { .system }.rid;
}