enum blockchain_state {
    // active states: RUNNING, PAUSED, IMPORTING, UNARCHIVING
    // inactive states: REMOVED, ARCHIVED
    RUNNING, PAUSED, REMOVED, IMPORTING, ARCHIVED, UNARCHIVING
}

entity blockchain {
    key rid: byte_array; 
    mutable name: text;
    system: boolean = false;
    mutable state: blockchain_state = blockchain_state.RUNNING;
}

entity blockchain_configuration {
    key blockchain, height: integer;
    mutable data: byte_array; // base_config, without signers
}

entity compressed_blockchain_configuration_part {
    key hash: byte_array;
    data: byte_array;
}

entity pending_blockchain_configuration {
    key blockchain, minimum_height: integer;
    key blockchain, config_hash: byte_array;
    base_config: byte_array;
    signers: byte_array;
}

entity signer_excluded_from_pending_configuration {
    key blockchain, config_hash: byte_array;
    pubkey;
}

entity faulty_blockchain_configuration {
    key blockchain, reported_at_height: integer;
    config_hash: byte_array;
}

entity blockchain_configuration_signers {
    key blockchain, height: integer;
    mutable signers: byte_array;
}

entity blockchain_replica_node { 
    key blockchain, node; 
}

/**
* For blockchain dependency tracking. Dependency is not static.
* Blockchain (me) might be dependent on different blockchains (dependent_on) at different heights.
*/
entity blockchain_dependency { 
    key me: blockchain, height: integer, dependent_on: blockchain; 
}

entity blockchain_configuration_options {
    key blockchain, height: integer;
    suppress_special_transaction_validation: boolean;
}

entity importing_foreign_blockchain {
    key blockchain_rid: byte_array;
    pubkey;
    host: text;
    port: integer;
    api_url: text;
    chain0_rid: byte_array;
    mutable up_to_height: integer = -1;
}

// @Deprecated
entity removed_blockchain {
    key blockchain;
    height: integer;
}

entity inactive_blockchain {
    key blockchain;
    height: integer;
}

entity moving_blockchain {
    key blockchain;
    destination: container;
    mutable finish_at_height: integer = -1;
    mutable remove_on_nodes: byte_array = x""; // gtv(list<pubkey>)
}

entity unarchiving_blockchain {
    key blockchain;
    source: container;
    destination: container;
    up_to_height: integer;
}
