entity price_oracle_rates {
    key symbol: text;
    name: text;
    mutable price: decimal;
}

function receive_price_oracle_update(sender: byte_array, body: gtv) {

    require(exists(sender_blockchain @? { .name == blockchains.price_oracle_chain_name, .rid == sender }),
        "Received price oracle message from sender: %s that is not tracked by economy chain.".format(sender));

    val message = token_price_changed_body.from_gtv(body);

    set_price_oracle_rate_value(message);

    if (message.symbol == chain_context.args.asset_symbol) {
        economy_constants.chr_per_usd = message.price;
    }
}

function set_price_oracle_rate_value(message: token_price_changed_body) {

    val price_oracle_rates = price_oracle_rates @? { .name == message.name };

    if (price_oracle_rates == null) {
        create price_oracle_rates(symbol = message.symbol, name = message.name, message.price);
    } else {
        price_oracle_rates.price = message.price;
    }
}
