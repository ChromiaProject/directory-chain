enum ticket_state {
    PENDING, SUCCESS, FAILURE
}

enum ticket_type {
    CREATE_CONTAINER, UPGRADE_CONTAINER
}

enum cluster_creation_status {
    SUCCESS, FAILURE, PENDING_APPROVAL, PENDING_CREATION, UNKNOWN
}

object state {
    mutable initialized: boolean = false;
}

object economy_constants {
    mutable min_lease_time_weeks: integer = 1;
    mutable max_lease_time_weeks: integer = 12;
    mutable chr_per_usd: decimal = 5;
    mutable total_cost_system_providers: integer = 828;
    mutable system_provider_fee_share: decimal = 0.1;
    mutable staking_reward_fee_share: decimal = 0.1;
    mutable chromia_foundation_fee_share: decimal = 0.1;
    mutable resource_pool_margin_fee_share: decimal = 0.1;
    mutable system_provider_risk_share: decimal = 0.1;
    mutable dapp_provider_risk_share: decimal = 0.2;
}

entity sender_blockchain {
    rid: byte_array;
    name: text;
}

entity node_availability {
    index node: byte_array;
    availability: decimal;
    start_time: timestamp;
    index end_time: timestamp;
}

struct provider_availability {
    availability: decimal;
    start_time: timestamp;
    end_time: timestamp;
}

entity node_payed_reward {
    index node: byte_array;
    value: big_integer;
    index time: timestamp;
}

struct provider_payed_reward {
    time: timestamp;
    value: big_integer;
}

struct economy_constants_data {
    min_lease_time_weeks: integer;
    max_lease_time_weeks: integer;
    chr_per_usd: decimal;
    total_cost_system_providers: integer;
    system_provider_fee_share: decimal;
    staking_reward_fee_share: decimal;
    chromia_foundation_fee_share: decimal;
    resource_pool_margin_fee_share: decimal;
    system_provider_risk_share: decimal;
    dapp_provider_risk_share: decimal;
}

struct economy_metrics {
    average_availability_on_a_providers_nodes: decimal;
    total_number_of_nodes_per_provider: integer;
    total_number_of_scus_per_provider: integer;
    average_occupancy_rate_of_a_providers_scus: decimal;
    amount_of_the_last_reward_payout: big_integer;
}

struct provider_performance_metrics {
    availabilities: list<provider_availability>;
    payed_rewards: list<provider_payed_reward>;
}

entity user {
    key ft4.accounts.account;
    mutable last_refill_millis: integer;
}

entity lease {
    key container_name: text;
    index ft4.accounts.account;
    container_units: integer;
    extra_storage_gib: integer;
    cluster;
    start_time: integer;
    mutable duration_millis: integer;
    mutable expired: boolean = false;
    mutable auto_renew: boolean = false;
}

entity ticket {
    index transaction = op_context.transaction;
    index type: ticket_type;
    account: ft4.accounts.account;
    mutable state: ticket_state = ticket_state.PENDING;
    mutable error_message: text = "";
}

entity create_container_ticket {
    key ticket;
    container_units: integer;
    extra_storage_gib: integer;
    duration_millis: integer;
    cost: integer;
    auto_renew: boolean = false;
    mutable container_name: text = "";
    cluster_name: text;
}

entity upgrade_container_ticket {
    key ticket;
    container_name: text;
    container_units: integer;
    extra_storage_gib: integer;
    cost: integer;
    cluster_name: text;
}

struct container_ticket_data {
    ticket_id: integer;
    type: ticket_type;
    state: ticket_state;
    error_message: text;
    container_name: text;
}

struct lease_data {
    container_name: text;
    cluster_name: text;
    container_units: integer;
    extra_storage_gib: integer;
    expire_time_millis: integer;
    expired: boolean;
    auto_renew: boolean;
}

struct cluster_data {
    name: text;
    tag_name: text;
}

struct tag_data {
    name: text;
    scu_price: integer;
    extra_storage_price: integer;
}

entity provider_account {
    key provider, account: ft4.accounts.account;
    mutable last_reward_check: timestamp = 0;
    mutable reward_debt: big_integer = 0;
}

object chromia_foundation {
    mutable reward_debt: big_integer = 0;
}

object pool_details {
    mutable last_refill_millis: integer = 0;
}

struct pay_reward_result {
    payed_reward: big_integer;
    pool_balance: big_integer;
    reward_debt: big_integer;
}

// Same structure for create, update and remove
entity pending_tag_operation {
    key name;
    key proposal: common_proposal;
    scu_price: integer = -1;
    extra_storage_price: integer = -1;
}

entity pending_cluster_change_tag {
    key cluster, tag;
    key proposal: common_proposal;
}

struct pending_cluster_change_tag_data {
    cluster: text;
    current_tag: text;
    new_tag: text;
}

entity pending_economy_constants {
    key proposal: common_proposal;
    min_lease_time_weeks: integer;
    max_lease_time_weeks: integer;
    staking_reward_fee_share: decimal;
    chromia_foundation_fee_share: decimal;
    resource_pool_margin_fee_share: decimal;
    dapp_provider_risk_share: decimal;
}

struct pending_economy_constants_data {
    min_lease_time_weeks: integer?;
    max_lease_time_weeks: integer?;
    staking_reward_fee_share: decimal?;
    chromia_foundation_fee_share: decimal?;
    resource_pool_margin_fee_share: decimal?;
    dapp_provider_risk_share: decimal?;
}

entity tag {
    key name;
    mutable scu_price: integer;
    mutable extra_storage_price: integer;
}

enum pending_cluster_status {
    PENDING_APPROVAL,
    PENDING_CREATION,
    FAILURE
}

entity pending_cluster {
    key name;
    tag: tag;
    proposer_pubkey: pubkey;
    governor_voter_set_name: text;
    voter_set_name: text;
    cluster_units: integer;
    extra_storage: integer;
    proposal: common_proposal;
    mutable status: pending_cluster_status;
}

struct pending_cluster_data {
    name: text;
    tag: text;
    proposer_pubkey: pubkey;
    governor_voter_set_name: text;
    voter_set_name: text;
    cluster_units: integer;
    extra_storage: integer;
    status: pending_cluster_status;
}

entity bridge_lease {
    key blockchain_rid: byte_array, evm_network_id: integer;
    index lease; // Must be connected to a container lease
    mutable validator_contract: text;
    mutable bridge_contract: text;
    mutable anomaly_detection: boolean = false;
}

struct bridge_lease_data {
    blockchain_rid: byte_array;
    evm_network_id: integer;
    container_name: text;
    expired: boolean;
    validator_contract: text;
    bridge_contract: text;
}

struct bridge_anomaly_detector_data {
    blockchain_rid: byte_array;
    evm_network_id: integer;
    bridge_contract: text;
}

//////////////////////////////////
// directory-chain synced entities
object standard_cluster_unit {
    mutable container_units: integer = 16;
    system_container_units: integer = 4;
}

enum provider_tier {
    COMMUNITY_NODE_PROVIDER,
    NODE_PROVIDER
}

entity provider {
    key pubkey;
    mutable system: boolean = false;
    mutable tier: provider_tier;
    mutable active: boolean;
}

entity node {
    index provider;
    key pubkey;
    mutable active: boolean;
    mutable territory: text;
    mutable cluster_units: integer;
    mutable extra_storage: integer;
}

val system_cluster_name = "system";

entity cluster {
    key name;
    mutable operational: boolean;
    mutable cluster_units: integer;
    mutable extra_storage: integer;
    mutable anchoring_chain: byte_array;
    mutable tag;
}

entity cluster_node {
    key cluster, node;
}

entity cluster_replica_node {
    key cluster, node;
}


//////////////////////////////////