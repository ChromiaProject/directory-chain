enum ticket_state {
    PENDING, SUCCESS, FAILURE
}

enum ticket_type {
    CREATE_CONTAINER, UPGRADE_CONTAINER
}

object state {
    mutable initialized: boolean = false;
}

object economy_constants {
    mutable min_lease_time_weeks: integer = 1;
    mutable max_lease_time_weeks: integer = 12;

    mutable chr_per_usd: decimal = 5;

    mutable dapp_scu_cost: decimal = 1; // TODO: Update
    mutable dapp_extra_storage_cost: decimal = 1; // TODO: Update
    mutable dapp_bridge_chain_cost: decimal = 1; // TODO: Update

    mutable scu_dapp_reward: decimal = 17; // USD per day
    mutable extra_storage_reward: decimal = 0.003; // USD per GiB and day
    mutable system_node_reward: decimal = 34; // USD per day
    mutable bridge_chain_reward: decimal = 5; // USD per day
}

struct economy_constants_data {
    min_lease_time_weeks: integer;
    max_lease_time_weeks: integer;

    chr_per_usd: decimal;

    dapp_scu_cost: decimal;
    dapp_extra_storage_cost: decimal;
    dapp_bridge_chain_cost: decimal;

    scu_dapp_reward: decimal;
    extra_storage_reward: decimal;
    system_node_reward: decimal;
    bridge_chain_reward: decimal;
}

entity user {
    key ft4.accounts.account;
    mutable last_refill_millis: integer;
}

entity lease {
    key container_name: text;
    index ft4.accounts.account;
    container_units: integer;
    extra_storage_gib: integer;
    cluster_class: text;
    cluster_name: text;
    start_time: integer;
    mutable duration_millis: integer;
    mutable expired: boolean = false;
    mutable auto_renew: boolean = false;
}

entity ticket {
    index transaction = op_context.transaction;
    index type: ticket_type;
    account: ft4.accounts.account;
    mutable state: ticket_state = ticket_state.PENDING;
    mutable error_message: text = "";
}

entity create_container_ticket {
    key ticket;
    container_units: integer;
    extra_storage_gib: integer;
    duration_millis: integer;
    cost: integer;
    auto_renew: boolean = false;
    mutable container_name: text = "";
}

entity upgrade_container_ticket {
    key ticket;
    container_name: text;
    container_units: integer;
    extra_storage_gib: integer;
    cost: integer;
}

struct container_ticket_data {
    ticket_id: integer;
    type: ticket_type;
    state: ticket_state;
    error_message: text;
    container_name: text;
}

struct lease_data {
    container_name: text;
    cluster_name: text;
    container_units: integer;
    extra_storage_gib: integer;
    expire_time_millis: integer;
    expired: boolean;
    auto_renew: boolean;
}

entity provider_account {
    key provider, account: ft4.accounts.account;
    mutable last_reward_check: timestamp = 0;
    mutable reward_debt: big_integer = 0;
}

//////////////////////////////////
// directory-chain synced entities
object standard_cluster_unit {
    mutable container_units: integer = 16;
}

enum provider_tier {
    COMMUNITY_NODE_PROVIDER,
    NODE_PROVIDER
}

entity provider {
    key pubkey;
    mutable system: boolean = false;
    mutable tier: provider_tier;
}

entity node {
    index provider;
    key pubkey;
    mutable active: boolean;
    mutable territory: text;
    mutable cluster_units: integer;
    mutable extra_storage: integer;
}

val system_cluster_name = "system";

entity cluster {
    key name;
    mutable operational: boolean;
    mutable cluster_units: integer;
    mutable extra_storage: integer;
    mutable cluster_class: text;
}

entity cluster_node {
    key cluster, node;
}

entity cluster_replica_node {
    key cluster, node;
}
//////////////////////////////////