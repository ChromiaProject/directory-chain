@extend(receive_icmf_message) function icmf_message_receive(sender: byte_array, topic: text, body: gtv) {
    if (topic_needs_initialization(topic)) require_initialized();

    if (not try_call(handle_icmf_message(sender, topic, body, *))) {
        log("Error while processing ICMF message in topic %s".format(topic));
    }
}

function handle_icmf_message(sender: byte_array, topic: text, body: gtv) {
    when (topic) {
        // No need to validate sender since we use a local ICMF receiver
        create_cluster_error_topic -> receive_create_cluster_error_message(body);
        ticket_container_result_topic -> receive_ticket_container_result_message(body);
        cluster_update_topic -> receive_cluster_update_message(body);
        provider_update_topic -> receive_provider_update_message(body);
        node_update_topic -> receive_node_update_message(body);
        cluster_node_update_topic -> receive_cluster_node_update_message(body);
        blockchain_rid_topic -> receive_blockchain_rid(body);
        // Topics received from anchoring chains
        node_availability_report_topic -> receive_node_availability_report(sender, body);
        // Topics received from price oracle
        token_price_changed_topic -> receive_price_oracle_update(sender, body);
        // Topics received from postchain-eif
        evm_transaction_submitter_cost_topic -> receive_evm_transaction_submitter_cost(sender, body);
        else -> log("Unexpected ICMF topic %s".format(topic));
    }
}

function topic_needs_initialization(topic: text): boolean =
    when (topic) {
        ticket_container_result_topic -> true;
        else -> false;
    };
