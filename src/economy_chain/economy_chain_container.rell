function expire_leases(current_time_millis: integer) {
    for (lease in lease @* { current_time_millis > .start_time + .duration_millis, .expired == false }) {
        // Don't touch leases for containers that are currently being upgraded
        if (not has_pending_upgrade(lease.container_name)) {
            maybe_expire_lease(lease);
        }
    }
}

function maybe_expire_lease(lease) {
    if (lease.auto_renew) {
        log("Auto-renewing lease for container %s".format(lease.container_name));
        val success = try_call(renew_container_lease(lease.account, lease, 1, *));
        if (not success) {
            log("Unable to auto-renew lease for container %s".format(lease.container_name));
            expire_lease(lease);
        }
    } else {
        expire_lease(lease);
    }
}

function expire_lease(lease) {
    lease.expired = true;
    log("Lease for container %s has expired, stopping it".format(lease.container_name));
    send_message(stop_container_topic, stop_container_message(container_name = lease.container_name).to_gtv()); // fire-and-forget
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
    scope = "create_container",
    flags = ["T"],
    message = create_container_auth_message(*)
);

function create_container_auth_message(gtv): text {
    val args = struct<create_container>.from_gtv(gtv);
    val tag = require_cluster(args.cluster_name).tag;
    val cost = calculate_container_cost(args.duration_weeks, args.container_units, args.extra_storage_gib, tag);
    return "Please sign the message\nto lease container %s\nwith %s SCUs and %s GiB extra storage\nin cluster %s\nfor %s weeks\ncosting %s %s\n%son account {account_id}".format(
        args.container_units,
        args.extra_storage_gib,
        args.cluster_name,
        args.duration_weeks,
        ft4.assets.format_amount_with_decimals(cost, chain_context.args.asset_decimals),
        chain_context.args.asset_symbol,
        if (args.auto_renew) "with auto-renewal\n" else "");
}

function create_container_impl(
    provider_pubkey: pubkey,
    container_units: integer,
    duration_weeks: integer,
    extra_storage_gib: integer,
    cluster_name: text,
    auto_renew: boolean) {

    require_initialized();
    require_pubkey(provider_pubkey);
    require(container_units > 0, "container_units must be positive");
    require_lease_duration(duration_weeks);
    require(extra_storage_gib > -1, "extra_storage_gib must not be negative");
    require_dapp_cluster(cluster_name);

    val cluster = require_cluster(cluster_name);
    val account = ft4.auth.authenticate();
    require(user @? { account }, "No user for account %s".format(account.id));

    val cost = calculate_container_cost(duration_weeks, container_units, extra_storage_gib, cluster.tag);
    ft4.assets.Unsafe.transfer(account, get_pool_account(), get_asset(), cost);

    val ticket = create ticket(type = ticket_type.CREATE_CONTAINER, account);
    create create_container_ticket(ticket,
        container_units = container_units,
        extra_storage_gib = extra_storage_gib,
        duration_millis = duration_weeks * millis_per_week,
        cost = cost,
        auto_renew = auto_renew,
        cluster_name = cluster.name
    );
    send_message(create_container_topic, create_container_message(
        ticket_id = ticket.rowid.to_integer(),
        provider_pubkey = provider_pubkey,
        container_units = container_units,
        extra_storage = 1024 * extra_storage_gib,
        cluster_name = cluster_name
    ).to_gtv());
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
    scope = "upgrade_container",
    flags = ["T"],
    message = upgrade_container_auth_message(*)
);

function upgrade_container_auth_message(gtv): text {
    val args = struct<upgrade_container>.from_gtv(gtv);
    val lease = require_lease(args.container_name);
    val lease_duration_in_weeks = lease.duration_millis / millis_per_week;
    val tag = require_cluster(args.upgraded_cluster_name).tag;
    val cost = calculate_container_cost(lease_duration_in_weeks, args.upgraded_container_units, args.upgraded_extra_storage_gib, tag);
    return "Please sign the message\nto upgrade container %s %s\nto have %s SCUs and %s GiB extra storage\nin cluster %s\nfor %s weeks\ncosting (before applying refund of current lease) %s %s\n%son account {account_id}".format(
        args.container_name,
        args.upgraded_container_units,
        args.upgraded_extra_storage_gib,
        args.upgraded_cluster_name,
        lease_duration_in_weeks,
        ft4.assets.format_amount_with_decimals(cost, chain_context.args.asset_decimals),
        chain_context.args.asset_symbol
    );
}

function upgrade_container_impl(
    container_name: text,
    upgraded_container_units: integer,
    upgraded_extra_storage_gib: integer,
    upgraded_cluster_name: text
) {
    require_initialized();
    val lease = require_lease(container_name);
    require(not has_pending_upgrade(container_name), "Container already has a pending upgrade");
    require(
        upgraded_container_units != lease.container_units or upgraded_extra_storage_gib != lease.extra_storage_gib,
        "New container specifications are identical to current lease"
    );
    require(upgraded_container_units >= lease.container_units, "new_container_units must be greater or equal to current lease");
    require(upgraded_extra_storage_gib >= lease.extra_storage_gib, "extra_storage_gib must be greater or equal to current lease");
    require_dapp_cluster(upgraded_cluster_name);

    val account = ft4.auth.authenticate();
    require(user @? { account }, "No user for account %s".format(account.id));
    require(lease.account == account, "Lease for container %s was not created by you".format(container_name));

    val cluster = require_cluster(upgraded_cluster_name);

    val cost = calculate_container_cost(lease.duration_millis / millis_per_week, upgraded_container_units, upgraded_extra_storage_gib, cluster.tag)
    - if (lease.expired) 0 else calculate_remaining_lease_value(lease, op_context.last_block_time);
    ft4.assets.Unsafe.transfer(account, get_pool_account(), get_asset(), cost);

    val ticket = create ticket(type = ticket_type.UPGRADE_CONTAINER, account);
    create upgrade_container_ticket(ticket,
        container_name = container_name,
        container_units = upgraded_container_units,
        extra_storage_gib = upgraded_extra_storage_gib,
        cost = cost,
        cluster_name = cluster.name
    );
    send_message(upgrade_container_topic, upgrade_container_message(
        ticket_id = ticket.rowid.to_integer(),
        container_name = container_name,
        container_units = upgraded_container_units,
        extra_storage = 1024 * upgraded_extra_storage_gib,
        cluster_name = upgraded_cluster_name
    ).to_gtv());
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
    scope = "renew_container",
    flags = ["T"],
    message = renew_container_auth_message(*)
);

function renew_container_auth_message(gtv): text {
    val args = struct<renew_container>.from_gtv(gtv);

    val lease = require_lease(args.container_name);
    val tag = lease.cluster.tag;
    val cost = calculate_container_cost(args.duration_weeks, lease.container_units, lease.extra_storage_gib, tag);

    return "Please sign the message\nto renew lease of container %s\nfor %s weeks\ncosting %s %s\non account {account_id}".format(
        args.container_name,
        args.duration_weeks,
        ft4.assets.format_amount_with_decimals(cost, chain_context.args.asset_decimals),
        chain_context.args.asset_symbol);
}

function renew_container_impl(container_name: text, duration_weeks: integer) {
    require_initialized();
    require_lease_duration(duration_weeks);

    val account = ft4.auth.authenticate();
    require(user @? { account }, "No user for account %s".format(account.id));

    val lease = require_lease(container_name);

    renew_container_lease(account, lease, duration_weeks);
    if (lease.expired) {
        restart_container(lease);
    }
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
    scope = "auto_renew_container",
    flags = ["T"],
    message = auto_renew_container_auth_message(*)
);

function auto_renew_container_auth_message(gtv): text {
    val args = struct<auto_renew_container>.from_gtv(gtv);

    val lease = require_lease(args.container_name);
    val tag = lease.cluster.tag;
    val weekly_cost = calculate_container_cost(1, lease.container_units, lease.extra_storage_gib, tag);

    return "Please sign the message\nto enable auto-renewal of container %s\ncosting %s %s per week\non account {account_id}".format(
        args.container_name,
        ft4.assets.format_amount_with_decimals(weekly_cost, chain_context.args.asset_decimals),
        chain_context.args.asset_symbol);
}

function auto_renew_container_impl(container_name: text) {
    require_initialized();

    val account = ft4.auth.authenticate();
    require(user @? { account }, "No user for account %s".format(account.id));

    val lease = require_lease(container_name);
    require(lease.account == account, "Lease for container %s was not created by you".format(container_name));
    require(lease.auto_renew == false, "Container %s is already auto-renewing".format(container_name));

    lease.auto_renew = true;

    if (lease.expired) {
        renew_container_lease(account, lease, 1);
        restart_container(lease);
    }
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
    scope = "cancel_renew_container",
    flags = ["T"],
    message = cancel_renew_container_auth_message(*)
);

function cancel_renew_container_auth_message(gtv): text {
    val args = struct<cancel_renew_container>.from_gtv(gtv);

    val lease = require_lease(args.container_name);

    return "Please sign the message\nto cancel auto-renewal of container %s\non account {account_id}".format(
        args.container_name);
}

function cancel_renew_container_impl(container_name: text) {
    require_initialized();

    val account = ft4.auth.authenticate();
    require(user @? { account }, "No user for account %s".format(account.id));

    val lease = require_lease(container_name);
    require(lease.account == account, "Lease for container %s was not created by you".format(container_name));
    require(lease.auto_renew == true, "Container %s is not auto-renewing".format(container_name));

    lease.auto_renew = false;
}

function renew_container_lease(ft4.accounts.account, lease, duration_weeks: integer) {
    val tag = lease.cluster.tag;
    val cost = calculate_container_cost(duration_weeks, lease.container_units, lease.extra_storage_gib, tag);
    ft4.assets.Unsafe.transfer(account, get_pool_account(), get_asset(), cost);
    lease.duration_millis += duration_weeks * millis_per_week;
}

function restart_container(lease) {
    log("Lease for container %s was expired, restarting it".format(lease.container_name));
    send_message(restart_container_topic, restart_container_message(container_name = lease.container_name).to_gtv()); // fire-and-forget
    // TODO what if restart fails?
    lease.expired = false;
}

function calculate_container_cost(duration_weeks: integer, container_units: integer, extra_storage_gib: integer, tag: tag): integer {
    val scu_cost = container_units * tag.scu_price;
    val extra_storage_cost = extra_storage_gib * tag.extra_storage_price;

    return ((scu_cost + extra_storage_cost) * 7 * duration_weeks * economy_constants.chr_per_usd * units_per_asset).to_integer();
}

function calculate_remaining_lease_value(lease, current_time: integer): integer {
    val tag = lease.cluster.tag;
    val lease_weekly_cost = calculate_container_cost(1, lease.container_units, lease.extra_storage_gib, tag);
    val remaining_lease_time = lease.start_time + lease.duration_millis - current_time;
    val remaining_weeks = decimal(remaining_lease_time) / decimal(millis_per_week);
    val remaining_value = remaining_weeks * lease_weekly_cost;
    return remaining_value.round().to_integer();
}

function refund_lease(lease: lease) {

    if (not lease.expired) {
        val lease_value = calculate_remaining_lease_value(lease, op_context.last_block_time);
        if (not try_call(ft4.assets.Unsafe.transfer(get_pool_account(), lease.account, get_asset(), lease_value, *))) {
            log("Unable to refund lease with container name %s".format(lease.container_name));
        }
    }

}