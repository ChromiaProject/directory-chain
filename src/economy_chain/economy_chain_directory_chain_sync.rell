function receive_cluster_update_message(body: gtv) {
    val message = cluster_update_message.from_gtv(body);
    val cluster = cluster @? { .name == message.name };
    if (message.deleted) {
        if (exists(cluster)) {
            log("Deleting cluster %s".format(message.name));

            val leases = lease @* { cluster };
            for (lease in leases) {
                refund_lease(lease);
                delete lease;
            }

            delete cluster_node @* { cluster };
            delete cluster_replica_node @* { cluster };
            delete cluster;
        } else {
            log("Did not have to delete cluster %s".format(message.name));
        }
    } else {
        if (exists(cluster)) {
            log("Updating cluster %s".format(message.name));
            update cluster @ { .name == message.name } (
                operational = message.operational,
                cluster_units = message.cluster_units,
                extra_storage = message.extra_storage,
                anchoring_chain = message.anchoring_chain ?: x""
            );
        } else {
            val pending_cluster = pending_cluster @? { message.name };
            if (pending_cluster != null) {
                log("Creating cluster %s".format(message.name));
                create cluster(
                    name = message.name,
                    operational = message.operational,
                    cluster_units = message.cluster_units,
                    extra_storage = message.extra_storage,
                    anchoring_chain = message.anchoring_chain ?: x"",
                    tag = pending_cluster.tag
                );
                delete pending_cluster;
            } else if (message.name == system_cluster_name) {
                log("Creating system cluster");
                create cluster(
                    name = message.name,
                    operational = message.operational,
                    cluster_units = message.cluster_units,
                    extra_storage = message.extra_storage,
                    anchoring_chain = message.anchoring_chain ?: x"",
                    tag = create tag("system", scu_price = 0, extra_storage_price = 0)
                );
            } else {
                log("Received cluster that is not PENDING with name %s".format(message.name));
            }
        }
    }
}

function receive_provider_update_message(body: gtv) {
    val message = provider_update_message.from_gtv(body);
    val provider = provider @? { message.pubkey };

    if (exists(provider)) {
        log("Updating provider %s".format(message.pubkey));
        provider.system = message.system;
        provider.tier = provider_tier.value(message.tier);
        provider.active = message.active;
    } else {
        log("Creating provider %s".format(message.pubkey));
        create provider(pubkey = message.pubkey,
            system = message.system,
            tier = provider_tier.value(message.tier),
            active = message.active
        );
    }
}

function receive_node_update_message(body: gtv) {
    val message = node_update_message.from_gtv(body);
    val node = node @? { message.pubkey };
    if (message.deleted) {
        if (exists(node)) {
            log("Deleting node %s".format(message.pubkey));
            delete cluster_node @* { node };
            delete cluster_replica_node @* { node };
            delete node;
        } else {
            log("Did not have to delete node %s".format(message.pubkey));
        }
    } else {
        if (exists(node)) {
            log("Updating node %s".format(message.pubkey));
            update node @ { message.pubkey } (
                active = message.active,
                territory = message.territory,
                cluster_units = message.cluster_units,
                extra_storage = message.extra_storage
            );
        } else {
            val provider = require(provider @? { message.provider_pubkey }, "Cannot add node %s due to missing provider %s".format(message.pubkey, message.provider_pubkey));
            log("Creating node %s".format(message.pubkey));
            create node(pubkey = message.pubkey,
                provider = provider,
                active = message.active,
                territory = message.territory,
                cluster_units = message.cluster_units,
                extra_storage = message.extra_storage
            );
        }
    }
}

function receive_cluster_node_update_message(body: gtv) {
    val message = cluster_node_update_message.from_gtv(body);
    val node = require(node @? { message.pubkey }, "Cannot update cluster node due to missing node %s".format(message.pubkey));
    if (message.deleted) {
        val cluster = if (exists(message.name)) require(cluster @? { .name == message.name!! }, "Cannot update cluster node due to missing cluster %s".format(message.name)) else null;
        if (message.replica_node) {
            if (exists(cluster)) {
                log("Deleting cluster_replica_node for cluster %s and node %s".format(cluster.name, node.pubkey));
                delete cluster_replica_node @ { cluster, node };
            } else {
                log("Deleting cluster_replica_node for node %s".format(node.pubkey));
                delete cluster_replica_node @* { node };
            }
        } else {
            if (exists(cluster)) {
                log("Deleting cluster_node for cluster %s and node %s".format(cluster.name, node.pubkey));
                delete cluster_node @ { cluster, node };
            } else {
                log("Deleting cluster_node for node %s".format(node.pubkey));
                delete cluster_node @* { node };
            }
        }
    } else {
        require(message.name, "Missing cluster name when updating node %s".format(message.pubkey));
        val cluster = require(cluster @? { .name == message.name!! }, "Cannot update cluster node due to missing cluster %s".format(message.name));
        if (message.replica_node) {
            val crn = cluster_replica_node @? { cluster, node };
            if (exists(crn)) {
                log("Did not create cluster_replica_node since it already exists for cluster %s and node %s".format(cluster.name, node.pubkey));
            } else {
                log("Creating cluster_replica_node for cluster %s and node %s".format(cluster.name, node.pubkey));
                create cluster_replica_node(cluster, node);
            }
        } else {
            val cn = cluster_node @? { cluster, node };
            if (exists(cn)) {
                log("Did not create cluster_node since it already exists for cluster %s and node %s".format(cluster.name, node.pubkey));
            } else {
                log("Creating cluster_node for cluster %s and node %s".format(cluster.name, node.pubkey));
                create cluster_node(cluster, node);
            }
        }
    }
}
