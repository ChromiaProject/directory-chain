operation staking_undelegate() {
    val staker = ft4.auth.authenticate();
    _staking_delegate(staker, get_null_account());
}

operation staking_set_rate(rate: decimal) {
    require_admin();
    _staking_set_rate_at(rate, _staking_last_known_time() + chain_context.args.staking_rate_change_delay_ms);
}

operation staking_set_rate_at(rate: decimal, timestamp: timestamp) {
    require_admin();
    val change_at = _staking_last_known_time() + chain_context.args.staking_rate_change_delay_ms;
    require(timestamp >= change_at, "Cannot change rate before " + change_at);
    _staking_set_rate_at(rate, timestamp);
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
        scope = "staking_deposit_native",
        flags = ["T"],
        message = staking_deposit_auth_message(*)
    );

function staking_deposit_auth_message(gtv): text {
    val args = struct<staking_deposit_native>.from_gtv(gtv);

    return "Please sign the message\nto transfer %s %s from account {account_id} \nto deposit account.".format(
        ft4.assets.format_amount_with_decimals(args.amount, chain_context.args.asset_decimals),
        chain_context.args.asset_symbol
    );
}

operation staking_deposit_native(amount: integer, delegateTo: pubkey? = null) {
    _staking_deposit_native_impl(amount, delegateTo);
}

operation staking_claim_rewards() {
    require_admin();
    _staking_distribute_rewards();
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
        scope = "staking_request_withdrawal",
        flags = [],
        message = staking_request_withdrawal_auth_message(*)
    );

function staking_request_withdrawal_auth_message(gtv): text {
    val args = struct<staking_request_withdrawal>.from_gtv(gtv);
    return "Please sign the message to request a withdrawal.";
}

operation staking_request_withdrawal() {
    val user = ft4.auth.authenticate();
    _staking_request_withdrawal(user, network.CHR);
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
        scope = "staking_delegate",
        flags = [],
        message = staking_delegate_auth_message(*)
    );

function staking_delegate_auth_message(gtv): text {
    val args = struct<staking_delegate>.from_gtv(gtv);
    // TODO Indicate which provider?
    return "Please sign the message to set the provider.";
}

operation staking_delegate(pubkey) {
    val new_provider = require(provider @? { pubkey }, "No provider for this public key.");
    val staker = ft4.auth.authenticate();
    _staking_delegate(staker, pubkey);
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
        scope = "staking_undelegate",
        flags = [],
        message = staking_undelegate_auth_message(*)
    );

function staking_undelegate_auth_message(gtv): text {
    val args = struct<staking_undelegate>.from_gtv(gtv);
    return "Please sign the message to undelegate.";
}

@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(
        scope = "staking_cancel_withdrawal",
        flags = [],
        message = staking_cancel_withdrawal_auth_message(*)
    );

function staking_cancel_withdrawal_auth_message(gtv): text {
    val args = struct<staking_cancel_withdrawal>.from_gtv(gtv);
    return "Please sign the message to cancel withdrawal.";
}

operation staking_cancel_withdrawal() {
    val user = ft4.auth.authenticate();
    update staker_withdrawal_request @* { .staker_state.account == user and .active == true } ( .active = false );
}
