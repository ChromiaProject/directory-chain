@test module;

import ^^.*;
import ^.helper_functions.*;
import common_proposal.test.helper_functions.*;

namespace ft4 {
    import lib.ft4.accounts;
    import lib.ft4.assets;
    import lib.ft4.auth;
    import test_utils: lib.ft4.test.utils;
}
import lib.auth;

struct module_args {
    auth_privkey: byte_array;
    admin_privkey: byte_array;
}

val auth_privkey = chain_context.args.auth_privkey;

val provider_key = rell.test.keypairs.bob;
val provider_pubkey = provider_key.pub;
val provider_alice_pubkey = rell.test.pubkeys.alice;
val cluster_name = "bob_cluster";
val cluster_bob = "bob_cluster";
val cluster_charlie = "charlie_cluster";
val node_pubkey_bob = rell.test.pubkeys.bob;
val node_pubkey_charlie = rell.test.pubkeys.charlie;
val node_pubkey_alice = rell.test.pubkeys.alice;

function test_get_all_tags() {
    val provider = add_provider(provider_pubkey, true, provider_tier.NODE_PROVIDER);
    rell.test.tx().op(
        create_tag(
            name = "tag1",
            scu_price = 1,
            extra_storage_price = 2),
        create_tag(
            name = "tag2",
            scu_price = 3,
            extra_storage_price = 4))
        .sign(provider_key)
        .run();

    val tags = get_tags();

    assert_equals(tags.size(), 2);
}

function test_get_tag_by_name() {
    val provider = add_provider(provider_pubkey, true, provider_tier.NODE_PROVIDER);
    rell.test.tx().op(
        create_tag(
            name = "tag1",
            scu_price = 1,
            extra_storage_price = 2),
        create_tag(
            name = "tag2",
            scu_price = 3,
            extra_storage_price = 4))
        .sign(provider_key)
        .run();

    val tag2 = get_tag_by_name("tag2");
    val non_existing_tag = get_tag_by_name("tagX");

    assert_not_null(tag2);
    assert_null(non_existing_tag);
}


function test_get_clusters() {

    rell.test.tx().op(
        create_test_cluster(cluster_name + "1", "tag-1"),
        create_test_cluster(cluster_name + "2", "tag-2")
    ).sign(provider_key)
        .run();

    val clusters = get_clusters();

    val expected = [
        cluster_data(
            name = cluster_name + "1",
            tag_name = "tag-1"),
        cluster_data(
            name = cluster_name + "2",
            tag_name = "tag-2")
    ];
    assert_equals(clusters, expected);
}

function test_get_cluster() {

    rell.test.tx().op(
        create_test_cluster(cluster_name))
        .sign(provider_key)
        .run();

    val non_existing_cluster = get_cluster_by_name("cluster-name-does-not-exist");
    assert_null(non_existing_cluster);

    val cluster = get_cluster_by_name(cluster_name);
    val expected = cluster_data(
        name = cluster_name,
        tag_name = "test-tag");
    assert_equals(cluster, expected);
}

function test_get_cluster_creation_status_with_success() {

    rell.test.tx().op(
        create_test_cluster(cluster_name))
        .sign(provider_key)
        .run();

    val status = get_cluster_creation_status(cluster_name);

    assert_equals(status, cluster_creation_status.SUCCESS);
}

function test_get_cluster_creation_status_with_unknown() {

    val status = get_cluster_creation_status(cluster_name);

    assert_equals(status, cluster_creation_status.UNKNOWN);
}

function test_get_cluster_creation_status_with_pending_approval() {

    rell.test.tx().op(
        create_pending_cluster(cluster_name,
            "tag1",
            pending_cluster_status.PENDING_APPROVAL)
    )
        .sign(provider_key)
        .run();

    val status = get_cluster_creation_status(cluster_name);

    assert_equals(status, cluster_creation_status.PENDING_APPROVAL);
}

function test_get_cluster_creation_status_with_failure() {

    val provider = add_provider(provider_pubkey, true, provider_tier.NODE_PROVIDER);
    rell.test.tx().op( create_tag(
        name = "tag1",
        scu_price = 1,
        extra_storage_price = 2),
        create_cluster(
            cluster_name,
            "governor_voter_set_name",
            "voter_set_name",
            1,
            1,
            "tag1"),
        receive_create_cluster_error_message_op(cluster_name, "error_message"))
        .sign(provider_key)
        .run();

    val status = get_cluster_creation_status(cluster_name);

    assert_equals(status, cluster_creation_status.FAILURE);
}

function test_get_average_availability_on_a_providers_nodes(){
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    val node_charlie = ensure_node(provider_pubkey, node_pubkey_charlie, true, "SE", 1, 1024, false);
    val last_block_time = get_last_blocktime();
    val node_availability_report1 = node_availability_report(start_time = 0, end_time = last_block_time, [node_pubkey_charlie: 0.90]);
    val node_availability_report2 = node_availability_report(start_time = 0, end_time = last_block_time, [node_pubkey_bob: 1.0]);
    rell.test.tx().op(
        save_node_availability_op(node_availability_report1),
        save_node_availability_op(node_availability_report2))
        .sign(provider_key)
        .run();

    val provider_nodes = get_provider_nodes_pubkeys(provider);
    val average = get_average_availability_on_a_providers_nodes_in_the_last_24h(provider_nodes);

    assert_equals(average, 0.95);
}

function test_get_average_availability_on_a_providers_nodes_only_last_24_hours(){
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    val node_availability_report1 = node_availability_report(start_time = 1, end_time = get_last_blocktime(), [node_pubkey_bob: 1.0]);
    rell.test.block().run();
    rell.test.set_next_block_time(get_last_blocktime() + millis_per_day);
    rell.test.block().run();
    val last_blocktime = get_last_blocktime();
    val node_availability_report2 = node_availability_report(start_time = last_blocktime, end_time = last_blocktime, [node_pubkey_bob: 0.5]);
    rell.test.tx().op(
        save_node_availability_op(node_availability_report1),
        save_node_availability_op(node_availability_report2))
        .sign(provider_key)
        .run();

    val provider_nodes = get_provider_nodes_pubkeys(provider);
    val average = get_average_availability_on_a_providers_nodes_in_the_last_24h(provider_nodes);

    assert_equals(average, 0.5);
}

function test_get_average_availability_on_a_providers_nodes_in_the_last_24h_no_availability_data(){
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);

    val provider_nodes = get_provider_nodes_pubkeys(provider);
    val average = get_average_availability_on_a_providers_nodes_in_the_last_24h(provider_nodes);

    assert_equals(average, 0.0);
}

function test_get_total_number_of_nodes_per_provider() {
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val provider_alice = add_provider(provider_alice_pubkey, false, provider_tier.NODE_PROVIDER);
    val node_charlie = ensure_node(provider_pubkey, node_pubkey_charlie, true, "SE", 1, 1024, false);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    val node_alice = ensure_node(provider_alice_pubkey, node_pubkey_alice, true, "SE", 1, 1024, false);

    val provider_nodes = get_provider_nodes(provider);
    val total = get_total_number_of_nodes_per_provider(provider_nodes);

    assert_equals(total, 2);
}

function test_get_total_number_of_scus_per_provider() {
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val node_charlie = ensure_node(provider_pubkey, node_pubkey_charlie, true, "SE", 1, 1024, false);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 2, 1024, false);

    val provider_nodes = get_provider_nodes(provider);
    val total = get_total_number_of_scus_per_provider(provider_nodes);

    assert_equals(total, 48);
}

function test_get_average_occupancy_rate_of_a_providers_scus_no_occupancy(){
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val cluster1 = ensure_cluster(cluster_bob, false, false, 1, 1024);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);

    rell.test.tx().op(
        create_cluster_node_op(cluster1,node_bob)
    ).run();

    val provider_nodes = get_provider_nodes(provider);
    val total = get_average_occupancy_rate_of_a_providers_scus(provider_nodes);

    assert_equals(total, 0);
}

function test_get_average_occupancy_rate_of_a_providers_scus_full_occupancy(){
    rell.test.tx().op(init()).run();
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val cluster1 = ensure_cluster(cluster_bob, false, false, 1, 1024);
    val cluster2 = ensure_cluster(cluster_charlie, false, false, 2, 1024);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    val node_charlie = ensure_node(provider_pubkey, node_pubkey_charlie, true, "SE", 2, 1024, false);

    val provider_account = require(do_create_account(provider_key, auth_privkey));

    rell.test.tx().op(
        create_cluster_node_op(cluster1, node_bob),
        create_cluster_node_op(cluster2, node_charlie),
        create_lease("lease1", 12, provider_account, cluster1, false),
        create_lease("lease2", 28, provider_account, cluster2, false)
    ).run();

    val provider_nodes = get_provider_nodes(provider);
    val total = get_average_occupancy_rate_of_a_providers_scus(provider_nodes);

    assert_equals(total, 1);
}

function test_get_total_reward_payed_in_the_last_24h(){
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    val node_charlie = ensure_node(provider_pubkey, node_pubkey_charlie, true, "SE", 1, 1024, false);
    val last_block_time = get_last_blocktime();
    rell.test.tx().op(
        save_node_payed_reward_op(node_pubkey_bob, 100, last_block_time),
        save_node_payed_reward_op(node_pubkey_charlie, 200, last_block_time))
        .sign(provider_key)
        .run();

    val provider_nodes = get_provider_nodes_pubkeys(provider);
    val total = get_total_reward_payed_in_the_last_24h(provider_nodes);

    assert_equals(total, 300);
}

function test_get_total_reward_payed_in_the_last_24h_old_rewards(){
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    val old_time = get_last_blocktime();
    rell.test.set_next_block_time(old_time + millis_per_day);
    rell.test.block().run();

    rell.test.tx().op(
        save_node_payed_reward_op(node_pubkey_bob, 100, old_time),
        save_node_payed_reward_op(node_pubkey_bob, 200, get_last_blocktime()))
        .sign(provider_key)
        .run();

    val provider_nodes = get_provider_nodes_pubkeys(provider);
    val total = get_total_reward_payed_in_the_last_24h(provider_nodes);

    assert_equals(total, 200);
}

function test_get_total_reward_payed_in_the_last_24h_no_rewards(){
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);

    val provider_nodes = get_provider_nodes_pubkeys(provider);
    val total = get_total_reward_payed_in_the_last_24h(provider_nodes);

    assert_equals(total, 0);
}

function test_get_economy_metrics(){
    rell.test.tx().op(init()).run();
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val cluster = ensure_cluster(cluster_bob, false, false, 1, 1024);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    val last_block_time = get_last_blocktime();
    val node_availability_report = node_availability_report(start_time = 0, end_time = last_block_time, [node_pubkey_bob: 0.90]);
    val provider_account = require(do_create_account(provider_key, auth_privkey));
    rell.test.tx().op(
        save_node_availability_op(node_availability_report),
        save_node_payed_reward_op(node_pubkey_bob, 200, last_block_time),
        create_cluster_node_op(cluster, node_bob),
        create_lease("lease1", 6, provider_account, cluster, false))
        .sign(provider_key)
        .run();

    val economy_metrics = get_economy_metrics(provider_pubkey);

    val expected = economy_metrics(
        average_availability_on_a_providers_nodes= 0.90,
        total_number_of_nodes_per_provider= 1,
        total_number_of_scus_per_provider= 16,
        average_occupancy_rate_of_a_providers_scus= 0.5,
        amount_of_the_last_reward_payout= 200);

    assert_equals(economy_metrics, expected);
}

function test_get_provider_availabilities() {
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val cluster = ensure_cluster(cluster_bob, false, false, 1, 1024);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    val node_charlie = ensure_node(provider_pubkey, node_pubkey_charlie, true, "SE", 1, 1024, false);
    rell.test.tx().op(
        save_node_availability_op(node_availability_report(start_time = 1001, end_time = 2000, [node_pubkey_bob: 0.90])),
        save_node_availability_op(node_availability_report(start_time = 2001, end_time = 3000, [node_pubkey_bob: 0.90])),
        save_node_availability_op(node_availability_report(start_time = 3001, end_time = 4000, [node_pubkey_bob: 0.94])),
        save_node_availability_op(node_availability_report(start_time = 1001, end_time = 2000, [node_pubkey_charlie: 1.0])),
        save_node_availability_op(node_availability_report(start_time = 2001, end_time = 3000, [node_pubkey_charlie: 1.0])),
        save_node_availability_op(node_availability_report(start_time = 3001, end_time = 4000, [node_pubkey_charlie: 1.0])),
        create_cluster_node_op(cluster, node_bob),
        create_cluster_node_op(cluster, node_charlie))
        .sign(provider_key)
        .run();

    val provider_nodes = node @* { provider } ( .pubkey );

    val availabilities = get_provider_availabilities(provider_nodes, 2500);

    val availability1 = provider_availability(
        availability = 0.95,
        start_time = 2001,
        end_time = 3000
    );

    val availability2 = provider_availability(
        availability = 0.97,
        start_time = 3001,
        end_time = 4000
    );

    assert_equals(availabilities[0], availability1);
    assert_equals(availabilities[1], availability2);
}

function test_get_provider_payed_rewards(){
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val cluster = ensure_cluster(cluster_bob, false, false, 1, 1024);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    val node_charlie = ensure_node(provider_pubkey, node_pubkey_charlie, true, "SE", 1, 1024, false);
    val last_block_time = get_last_blocktime();
    rell.test.tx().op(
        save_node_payed_reward_op(node_pubkey_bob, 200, 1000),
        save_node_payed_reward_op(node_pubkey_bob, 300, 2000),
        save_node_payed_reward_op(node_pubkey_bob, 400, 3000),
        save_node_payed_reward_op(node_pubkey_charlie, 200, 1000),
        save_node_payed_reward_op(node_pubkey_charlie, 350, 2000),
        save_node_payed_reward_op(node_pubkey_charlie, 450, 3000),
        create_cluster_node_op(cluster, node_bob),
        create_cluster_node_op(cluster, node_charlie))
        .sign(provider_key)
        .run();

    val provider_nodes = node @* { provider } ( .pubkey );

    val provider_payed_rewards = get_provider_payed_rewards(provider_nodes, 1500);

    val provider_payed_reward1 = provider_payed_reward(
        time = 2000,
        value = 650
    );

    val provider_payed_reward2 = provider_payed_reward(
        time = 3000,
        value = 850
    );

    assert_equals(provider_payed_rewards[0], provider_payed_reward1);
    assert_equals(provider_payed_rewards[1], provider_payed_reward2);
}

function test_get_provider_performance_metrics(){
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val cluster = ensure_cluster(cluster_bob, false, false, 1, 1024);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    val node_charlie = ensure_node(provider_pubkey, node_pubkey_charlie, true, "SE", 1, 1024, false);
    rell.test.tx().op(
        save_node_availability_op(node_availability_report(start_time = 1000, end_time = 2000, [node_pubkey_bob: 0.90])),
        save_node_availability_op(node_availability_report(start_time = 1000, end_time = 2000, [node_pubkey_charlie: 1.0])),
        save_node_payed_reward_op(node_pubkey_bob, 200, 1000),
        save_node_payed_reward_op(node_pubkey_charlie, 300, 1000),
        create_cluster_node_op(cluster, node_bob),
        create_cluster_node_op(cluster, node_charlie))
        .sign(provider_key)
        .run();

    val provider_performance_metrics = get_provider_performance_metrics(provider_pubkey, 1000);

    val expected = provider_performance_metrics([
        provider_availability(
        availability = 0.95,
        start_time = 1000,
        end_time = 2000
    )],[provider_payed_reward(
        time = 1000,
        value = 500
    )]);

    assert_equals(provider_performance_metrics, expected);
}

function test_get_provider_performance_metrics_periods(){
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val cluster = ensure_cluster(cluster_bob, false, false, 1, 1024);
    val node_bob = ensure_node(provider_pubkey, node_pubkey_bob, true, "SE", 1, 1024, false);
    rell.test.set_next_block_time(get_last_blocktime() + millis_per_year);
    rell.test.block().run();
    val block_time = get_last_blocktime() + 10000;
    rell.test.tx().op(
        save_node_availability_op(node_availability_report(start_time = block_time - millis_per_year, end_time = block_time - millis_per_year, [node_pubkey_bob: 1.00])),
        save_node_availability_op(node_availability_report(start_time = block_time - millis_per_month, end_time = block_time - millis_per_month, [node_pubkey_bob: 0.95])),
        save_node_availability_op(node_availability_report(start_time = block_time - millis_per_week, end_time = block_time - millis_per_week, [node_pubkey_bob: 0.90])),
        save_node_payed_reward_op(node_pubkey_bob, 300, block_time - millis_per_year),
        save_node_payed_reward_op(node_pubkey_bob, 200, block_time - millis_per_month),
        save_node_payed_reward_op(node_pubkey_bob, 100, block_time - millis_per_week),
        create_cluster_node_op(cluster, node_bob))
        .sign(provider_key)
        .run();

    val last_week = get_provider_performance_metrics_last_7_days(provider_pubkey);
    val last_month = get_provider_performance_metrics_last_30_days(provider_pubkey);
    val last_year = get_provider_performance_metrics_last_365_days(provider_pubkey);

    val provider_availability_last_7_days = provider_availability(
        availability = 0.90,
        start_time = block_time - millis_per_week,
        end_time = block_time - millis_per_week
        );
    val provider_payed_reward_last_7_days = provider_payed_reward(
        time = block_time - millis_per_week,
        value = 100
    );
    val provider_availability_last_30_days = provider_availability(
        availability = 0.95,
        start_time = block_time - millis_per_month,
        end_time = block_time - millis_per_month
    );
    val provider_payed_reward_last_30_days = provider_payed_reward(
        time = block_time - millis_per_month,
        value = 200
    );
    val provider_availability_last_365_days = provider_availability(
        availability = 1.00,
        start_time = block_time - millis_per_year,
        end_time = block_time - millis_per_year
    );
    val provider_payed_reward_last_365_days = provider_payed_reward(
        time = block_time - millis_per_year,
        value = 300
    );

    val expected_last_7_days = provider_performance_metrics(
        [provider_availability_last_7_days],
        [provider_payed_reward_last_7_days]);
    val expected_last_30_days = provider_performance_metrics(
        [provider_availability_last_30_days, provider_availability_last_7_days],
        [provider_payed_reward_last_30_days, provider_payed_reward_last_7_days]);
    val expected_last_365_days = provider_performance_metrics(
        [provider_availability_last_365_days, provider_availability_last_30_days, provider_availability_last_7_days],
        [provider_payed_reward_last_365_days, provider_payed_reward_last_30_days, provider_payed_reward_last_7_days]);

    assert_equals(last_week, expected_last_7_days);
    assert_equals(last_month, expected_last_30_days);
    assert_equals(last_year, expected_last_365_days);


}

function test_get_tag_proposal() {

    rell.test.tx().op(
        create_pending_tag_operation("t1", 1, 2))
        .sign(provider_key)
        .run();

    val tag_proposal = get_tag_proposal(get_latest_proposal_id());
    assert_equals(tag_proposal.name, "t1");
    assert_equals(tag_proposal.scu_price, 1);
    assert_equals(tag_proposal.extra_storage_price, 2);
}

function test_get_cluster_create_proposal() {

    rell.test.tx().op(
        create_pending_cluster(cluster_name, "t1", pending_cluster_status.PENDING_APPROVAL))
        .sign(provider_key)
        .run();

    val cluster_create_proposal = get_cluster_create_proposal(get_latest_proposal_id());

    assert_equals(cluster_create_proposal.name, cluster_name);
    assert_equals(cluster_create_proposal.tag, "t1");
    assert_equals(cluster_create_proposal.proposer_pubkey, x"");
    assert_equals(cluster_create_proposal.governor_voter_set_name, "governor_voter_set_name");
    assert_equals(cluster_create_proposal.voter_set_name, "voter_set_name");
    assert_equals(cluster_create_proposal.cluster_units, 1);
    assert_equals(cluster_create_proposal.extra_storage, 1);
    assert_equals(cluster_create_proposal.status, pending_cluster_status.PENDING_APPROVAL);
}

function test_get_cluster_change_tag_proposal() {

    rell.test.tx().op(
        create_pending_cluster_change_tag(cluster_name, "t1", "t2"))
    .sign(provider_key)
    .run();

    val cluster_change_tag_propsal = get_cluster_change_tag_proposal(get_latest_proposal_id());

    assert_equals(cluster_change_tag_propsal.cluster, cluster_name);
    assert_equals(cluster_change_tag_propsal.current_tag, "t1");
    assert_equals(cluster_change_tag_propsal.new_tag, "t2");
}

function test_get_provider_staking_status() {

    val provider = add_provider(provider_pubkey, true, provider_tier.NODE_PROVIDER);
    val provider_account = provider_account @ { provider };

    rell.test.tx().op(
        staking_init_op(),
        add_staking(provider_account, 9999999999)
    ).sign(provider_key).run();

    val staking_status = get_provider_staking_status(provider_pubkey);
    val expected = provider_staking_status(
        own_staking_usd = 49999999995,
        total_staking_usd = 49999999995,
        approved = true
    );
    assert_equals(staking_status, expected);
}
