@test module;

import ^^.*;
import ^.helper_functions.*;
import ^.helper_operations.*;

namespace ft4 {
    import lib.ft4.accounts;
    import lib.ft4.assets;
    import lib.ft4.auth;
    import test_utils: lib.ft4.test.utils;
}

import lib.hbridge;

import lib.auth;

struct module_args {
    auth_privkey: byte_array;
    admin_privkey: byte_array;
    staking_rate_change_delay_ms: integer;
    staking_withdrawal_delay_ms: integer;
}

val auth_privkey = chain_context.args.auth_privkey;
val admin_privkey = chain_context.args.admin_privkey;
val staking_rate_change_delay_ms = chain_context.args.staking_rate_change_delay_ms;

function test_set_rates() {
    rell.test.tx().op(init()).sign(admin_privkey).run();

    rell.test.set_next_block_time_delta(staking_get_cannot_change_before());
    rell.test.tx().op(staking_set_rate(0.1)).sign(admin_privkey).run();
    assert_equals(staking_get_current_rate(), 0.1);

    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.tx().op(staking_set_rate(0.5)).sign(admin_privkey).run();
    assert_equals(staking_get_current_rate(), 0.5);

    rell.test.tx().op(staking_set_rate(0.05)).sign(admin_privkey).run(); // Won't take effect
    assert_equals(staking_get_current_rate(), 0.5);
}

function test_add_remove_providers() {
    rell.test.tx().op(init()).run();

    val test_account_alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val test_account_bob = require(do_create_account(rell.test.keypairs.bob, auth_privkey));
    val test_account_charlie = require(do_create_account(rell.test.keypairs.charlie, auth_privkey));
    val test_account_dave = require(do_create_account(rell.test.keypairs.dave, auth_privkey));

    rell.test.tx()
        .op(staking_set_rate(0.5))
        .op(mint_to(test_account_alice, 9999999))
        .op(mint_to(test_account_dave, 9999999))
    .sign(admin_privkey).run();

    add_provider(rell.test.keypairs.charlie.pub);
    add_provider(rell.test.keypairs.bob.pub);

    // Add some delegation
    // Have A deposit and delegate to C
    do_staking_deposit_native(rell.test.keypairs.alice, 9999999);
    do_staking_delegate(rell.test.keypairs.alice, rell.test.keypairs.charlie.pub);

    // Have D deposit 11 and delagate to B
    do_staking_deposit_native(rell.test.keypairs.dave, 11);
    do_staking_delegate(rell.test.keypairs.dave, rell.test.keypairs.bob.pub);

    // Wait for delegation to take effect
    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.block().run();
    assert_equals(staking_get_balance(test_account_alice.id), 9999999);
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.charlie.pub), 9999999);
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.bob.pub), 11);

    remove_provider(rell.test.keypairs.charlie.pub);

    // Ensure delegates have been removed
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.charlie.pub), 0); // <- Removed immediately
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.bob.pub), 11); // <- Unchanged

    // Should have earned something
    assert_true(staking_rewards_claimable_for(test_account_alice.id) > 0);
}

function test_delegation() {
    rell.test.tx().op(init()).run();

    val test_account_alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val test_account_bob = require(do_create_account(rell.test.keypairs.bob, auth_privkey));
    val test_account_charlie = require(do_create_account(rell.test.keypairs.charlie, auth_privkey));

    rell.test.tx()
        .op(staking_set_rate(0.5))
        .op(mint_to(test_account_alice, 9999999))
    .sign(admin_privkey).run();

    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms + 1);
    rell.test.block().run();

    assert_equals(staking_rewards_claimable_for(test_account_alice.id), 0);
    assert_equals(staking_rewards_claimable_for(test_account_bob.id), 0);

    rell.test.tx().op(
        staking_delegate(test_account_charlie.id)
    ).run_must_fail("No provider for this public key.");

    add_provider(rell.test.keypairs.charlie.pub);

    do_staking_deposit_native(rell.test.keypairs.alice, 8000);
    do_staking_delegate(rell.test.keypairs.alice, rell.test.keypairs.charlie.pub);
    assert_equals(staking_get_next_delegation_change(test_account_alice.id)?.pubkey, rell.test.keypairs.charlie.pub);

    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.block().run();
    assert_equals(staking_get_current_delegate(test_account_alice.id), rell.test.keypairs.charlie.pub);
    assert_null(staking_get_next_delegation_change(test_account_alice.id));

    assert_true(staking_rewards_claimable_for(test_account_alice.id) > 0);

    do_staking_undelegate(rell.test.keypairs.alice);

    assert_equals(staking_get_current_delegate(test_account_alice.id), rell.test.keypairs.charlie.pub); // No change now.

    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.block().run();
    assert_null(staking_get_current_delegate(test_account_alice.id)); // Change in a week
}

function test_staking_deposit() {
    rell.test.tx().op(init()).run();

    val test_account_alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));

    assert_equals(staking_get_balance(test_account_alice.id), 0);
    rell.test.tx()
        .op(mint_to(test_account_alice, 9999999))
    .run();
    do_staking_deposit_native(rell.test.keypairs.alice, 7777);
    assert_equals(staking_get_balance(test_account_alice.id), 7777);
    assert_equals(get_account_balance(get_deposit_account()), 7777);
}

function test_yield_and_payout_crudely () {
    // Basic intialisation
    rell.test.tx()
        .op(init())
        .op(staking_set_rate(0.5))
        .op(mint_to_pool(8888888888))
    .sign(admin_privkey).run();

    val test_account_alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val test_account_bob = require(do_create_account(rell.test.keypairs.bob, auth_privkey));
    val test_account_charlie = require(do_create_account(rell.test.keypairs.charlie, auth_privkey));

    rell.test.tx()
        .op(mint_to(test_account_alice, 9999999))
        .op(mint_to(test_account_bob, 9999999))
    .run();

    // Check no yield
    assert_equals(staking_rewards_claimable_for(test_account_alice.id), 0);
    assert_equals(staking_rewards_claimable_for(test_account_bob.id), 0);
    assert_equals(staking_rewards_claimable_for(test_account_charlie.id), 0);

    // FFWD
    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.block().run(); rell.test.block().run();

    // Check no yield
    assert_equals(staking_rewards_claimable_for(test_account_alice.id), 0);
    assert_equals(staking_rewards_claimable_for(test_account_bob.id), 0);
    assert_equals(staking_rewards_claimable_for(test_account_charlie.id), 0);

    // Deposit 100 with A
    // Deposit 200 with B
    do_staking_deposit_native(rell.test.keypairs.alice, 1000000);
    do_staking_deposit_native(rell.test.keypairs.bob, 2000000);

    // FFWD
    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.block().run(); rell.test.block().run();

    // Check that there is a yield and that B is twice of A (allow for rounding)
    val alice_amount = staking_rewards_claimable_for(test_account_alice.id);
    val bob_amount = staking_rewards_claimable_for(test_account_bob.id);
    assert_true(alice_amount > 0);
    assert_true(bob_amount > 0);
    assert_equals(staking_rewards_claimable_for(test_account_charlie.id), 0);
    assert_true(1 >= abs(2 * alice_amount - bob_amount));

    // FFWD
    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.block().run(); rell.test.block().run();

    // Check both numbers have doubled (allow for rounding)
    assert_true(1 >= abs(staking_rewards_claimable_for(test_account_alice.id) - 2 * alice_amount));
    assert_true(1 >= abs(staking_rewards_claimable_for(test_account_bob.id) - 2 * bob_amount));
    assert_equals(staking_rewards_claimable_for(test_account_charlie.id), 0);

    // Do payout
    rell.test.tx().op(staking_claim_rewards()).sign(admin_privkey).run();

    // Ensure there's no (more than a few seconds worth of) claimable yield after payout
    assert_equals(staking_rewards_claimable_for(test_account_alice.id), 0);
    assert_equals(staking_rewards_claimable_for(test_account_bob.id), 0);
    assert_equals(staking_rewards_claimable_for(test_account_charlie.id), 0);

    // Run the clock forward a 6 months and check we have claimable rewards
    rell.test.set_next_block_time_delta(integer(millis_per_year / 2));
    rell.test.block().run(); rell.test.block().run();
    assert_true(staking_rewards_claimable_for(test_account_alice.id) > 100);
    assert_true(staking_rewards_claimable_for(test_account_bob.id) > 100);

    // Run the clock forward another 24 months and see that we have less, eg. payout has triggered
    rell.test.set_next_block_time_delta(integer(millis_per_year * 2));
    rell.test.block().run(); rell.test.block().run();
    assert_true(staking_rewards_claimable_for(test_account_alice.id) < 100);
    assert_true(staking_rewards_claimable_for(test_account_bob.id) < 100);

    // However the total amount ever earned is not going to be 
    // assert_true(staking_rewards_for(test_account_bob.id) > 100);

    // // Everything paid up
    // assert_equals(staking_rewards_for(test_account_bob.id), staking_get_rewards_paid(test_account_bob.id));
}

function test_withdrawal() {
    rell.test.tx().op(init()).run();
    add_provider(rell.test.keypairs.bob.pub);

    val test_account_alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val test_account_bob = require(do_create_account(rell.test.keypairs.bob, auth_privkey));

    rell.test.tx()
        .op(mint_to(test_account_alice, 9999999))
    .run();

    // Need a deposit to withdraw it
    assert_equals(staking_get_balance(test_account_alice.id), 0);
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.keypairs.alice.priv, staking_request_withdrawal())
    ).op(
        staking_request_withdrawal()
        ).run_must_fail("No staker state for %s".format(test_account_alice.id));

    do_staking_deposit_native(rell.test.keypairs.alice, 1); // Have something to withdraw

    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.keypairs.alice.priv, staking_request_withdrawal())
    ).op(
        staking_request_withdrawal()
    ).run();

    // Simple withdraw
    rell.test.set_next_block_time_delta(chain_context.args.staking_withdrawal_delay_ms);
    rell.test.block().run();
    rell.test.block().run();

    // Automatic withdrawal should have happened here
    assert_equals(staking_get_balance(test_account_alice.id), 0);
    assert_equals(get_account_balance(get_deposit_account()), 0);

    // Ensure that the withdrawal request is cancelled on re-delegation
    do_staking_deposit_native(rell.test.keypairs.alice, 7777);
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.keypairs.alice.priv, staking_request_withdrawal())
    ).op(
        staking_request_withdrawal()
    ).run();
    assert_true(staking_get_withdrawal_time(test_account_alice.id)??);
    assert_equals(staking_get_balance(test_account_alice.id), 7777);
    do_staking_delegate(rell.test.keypairs.alice, rell.test.keypairs.bob.pub);
    assert_false(staking_get_withdrawal_time(test_account_alice.id)??);

    // Only one withdrawal request at a time
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.keypairs.alice.priv, staking_request_withdrawal())
    )
    .op(staking_request_withdrawal())
    .run();
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.keypairs.alice.priv, staking_request_withdrawal())
    )
    .op(staking_request_withdrawal())
        .run_must_fail("Only one withdrawal request allowed at a time");
}

function test_staking_get_total_delegation_to() {
    rell.test.tx().op(init()).run();

    val test_account_alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val test_account_bob = require(do_create_account(rell.test.keypairs.bob, auth_privkey));
    val test_account_charlie = require(do_create_account(rell.test.keypairs.charlie, auth_privkey));
    val test_account_dave = require(do_create_account(rell.test.keypairs.dave, auth_privkey));

    rell.test.tx()
        .op(mint_to(test_account_charlie, 9999999))
        .op(mint_to(test_account_dave, 9999999))
    .run();

    add_provider(rell.test.keypairs.alice.pub);
    add_provider(rell.test.keypairs.bob.pub);

    // Have C deposit 9 and delegate to A
    do_staking_deposit_native(rell.test.keypairs.charlie, 9);
    do_staking_delegate(rell.test.keypairs.charlie, rell.test.keypairs.alice.pub);
        // Have D deposit 11 and delagate to B
    do_staking_deposit_native(rell.test.keypairs.dave, 11);
    do_staking_delegate(rell.test.keypairs.dave, rell.test.keypairs.bob.pub);

    // Check the that neither A nor B has a balance delegated to them
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.alice.pub), 0);
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.bob.pub), 0);

    // Wait a period
    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.block().run();

    // Check that A has 9 delegated to it
    // Check that B has 11 delegated to it
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.alice.pub), 9);
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.bob.pub), 11);

    // Have C deposit an additional 7
    do_staking_deposit_native(rell.test.keypairs.charlie, 7);

    // Check that A has 16 delegated to it (adding stake is immediate)
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.alice.pub), 16);

    // Have D change their their delegation to A
    do_staking_delegate(rell.test.keypairs.dave, rell.test.keypairs.alice.pub);

    // Check that A has 16 delegated to it (changing delegation takes time)
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.alice.pub), 16);

    // Wait a period
    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.block().run();

    // Check that A has 27 delegated to it
    // Check that B has 0 delegated to it
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.alice.pub), 27);
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.bob.pub), 0);

    // Have D undelegate
    do_staking_undelegate(rell.test.keypairs.dave);

    // Wait a period
    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.block().run();

    // Check that A has 16 delegated to it
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.alice.pub), 16);
    assert_equals(staking_get_total_delegation_to(rell.test.keypairs.bob.pub), 0);
}

function test_deposit_and_withdraw_via_evm() {
    rell.test.tx().op(init()).run();

    val alice_evm_address = crypto.eth_pubkey_to_address(rell.test.keypairs.alice.pub);
    do_evm_stake_update_bsc(alice_evm_address, 50 * units_per_asset);

    val test_account_alice = require(do_create_account_using_ras_staking(rell.test.keypairs.alice));

    do_evm_withdrawal_request_bsc(test_account_alice);

    assert_equals(staking_get_balance(test_account_alice.id), 50 * units_per_asset);

    // Can't withdraw on CHR as no balance *there*
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.keypairs.alice.priv, staking_request_withdrawal())
    )
    .op(staking_request_withdrawal())
        .run_must_fail("No staker state for %s".format(test_account_alice.id));

    // Wait a period
    rell.test.set_next_block_time_delta(staking_rate_change_delay_ms);
    rell.test.block().run();

    // Withdraw
    do_evm_stake_update_bsc(test_account_alice.id, 0);

    // Reload
    do_evm_stake_update_bsc(test_account_alice.id, 10);
    rell.test.tx().op(mint_to(test_account_alice, 9999999)).run();
    do_staking_deposit_native(rell.test.keypairs.alice, 10);

    // Request withdrawal on native once (which is fine)
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.keypairs.alice.priv, staking_request_withdrawal())
    )
    .op(staking_request_withdrawal())
    .run();

    // Request withdrawal on native a second time (which is a dup)
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(rell.test.keypairs.alice.priv, staking_request_withdrawal())
    )
    .op(staking_request_withdrawal())
        .run_must_fail("Only one withdrawal request allowed at a time");

    // Request withdrawal again on BSC (which is okay)
    do_evm_withdrawal_request_bsc(test_account_alice);
}

function test_evm_account_creation() {
    rell.test.tx().op(init()).run();

    val alice_evm_address = crypto.eth_privkey_to_address(rell.test.keypairs.alice.priv);

    do_evm_stake_update_bsc(alice_evm_address, 50 * units_per_asset);

    val test_account_alice = do_create_account_using_ras_staking(rell.test.keypairs.alice)!!;

    // See that FT4 account is created
    require(
        ft4.accounts.auth_descriptor_signer @? {.id == alice_evm_address} ( @omit @sort .rowid, .account_auth_descriptor.account ),
        "Cannot find EVM account."
    );
    require(
        require(eif.hbridge.find_ft4_account_for_address(alice_evm_address, 97)) == test_account_alice,
        "EIF Hbridge link is not established"
    );
    assert_equals(
        staking_get_balance(test_account_alice.id), 50 * units_per_asset
    );
}

function test_stats() {
    rell.test.tx().op(init()).run();

    assert_equals(staking_total_stake(), 0);
    assert_equals(staking_total_accounts(), 0);

    val test_account_alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val test_account_bob = require(do_create_account(rell.test.keypairs.bob, auth_privkey));
    val test_account_charlie = require(do_create_account(rell.test.keypairs.charlie, auth_privkey));
    val test_account_dave = require(do_create_account(rell.test.keypairs.dave, auth_privkey));

    assert_equals(staking_total_accounts(), 0);
    assert_equals(staking_total_stake(), 0);

    rell.test.tx()
        .op(mint_to(test_account_charlie, 20))
        .op(mint_to(test_account_dave, 1))
        .run();

    do_staking_deposit_native(rell.test.keypairs.charlie, 10);
    do_staking_deposit_native(rell.test.keypairs.dave, 1);

    assert_equals(staking_total_stake(), 11);
    assert_equals(staking_total_accounts(), 2);
}
