module;

import ^^.*;
import common_proposal.test.helper_operations.*;

operation icmf_message_op(sender: byte_array, topic: text, body: gtv) {
    handle_icmf_message(sender, topic, body);
}

operation empty_account_op(ft4.accounts.account) {
    val balance = get_account_balance(account);
    ft4.assets.Unsafe.transfer(account, get_pool_account(), get_asset(), balance);
}

operation mint_to(account: ft4.accounts.account, amount: big_integer) {
    ft4.assets.Unsafe.mint(account, get_asset(), amount);
}

operation mint_to_pool(amount: big_integer) {
    ft4.assets.Unsafe.mint(get_pool_account(), get_asset(), amount);
}

operation create_pending_cluster(cluster_name: text, tag_name: text, status: pending_cluster_status = pending_cluster_status.PENDING_APPROVAL) {

    val tag = create_or_return_tag(tag_name);
    val proposal = create_proposal(common_proposal_type.ec_cluster_create);

    create pending_cluster(
        name = cluster_name,
        tag,
        proposer_pubkey = x"",
        governor_voter_set_name = "governor_voter_set_name",
        voter_set_name = "voter_set_name",
        cluster_units = 1,
        extra_storage = 1,
        proposal,
        status
    );
}

operation create_pending_tag_operation(name: text, scu_price: integer = -1, extra_storage_price: integer = -1) {

    val proposal = create_proposal(common_proposal_type.ec_tag_create);
    create pending_tag_operation(
        name,
        proposal,
        scu_price = scu_price,
        extra_storage_price = extra_storage_price
    );
}

operation create_pending_cluster_change_tag(cluster_name: text, current_tag_name: text, new_tag_name: text) {

    val current_tag = create_or_return_tag(current_tag_name);
    val new_tag = create_or_return_tag(new_tag_name);
    val proposal = create_proposal(common_proposal_type.ec_cluster_create);

    val cluster = create cluster(cluster_name, true, cluster_units = 1, extra_storage = 1, anchoring_chain = x"", current_tag);
    create pending_cluster_change_tag(cluster, proposal, new_tag);
}

operation create_test_cluster(cluster_name: text, tag_name: text = "test-tag") {
    val tag = create tag(tag_name, scu_price = 1, extra_storage_price = 1);
    create cluster(name = cluster_name, operational = true, cluster_units = 1, extra_storage = 1, anchoring_chain = x"", tag = tag);
}

operation create_lease(container_name: text, container_units: integer, account: ft4.accounts.account, cluster: cluster, expired: boolean) {
    create lease(
        container_name = container_name,
        account = account,
        container_units = container_units,
        cluster = cluster,
        start_time = 0,
        duration_millis = 0,
        expired = expired,
        auto_renew = false,
        extra_storage_gib = 0
    );
}

operation pay_rewards_op(cluster: cluster, node_availability_report: node_availability_report) {
    pay_rewards(cluster, node_availability_report);
}

operation pay_reward_op(pool: ft4.accounts.account, pool_balance: big_integer, account: ft4.accounts.account, reward_debt:big_integer,  reward: big_integer, identity: text) {
    pay_reward(pool, pool_balance, account, reward_debt, reward, identity);
}

operation set_pool_details_last_refill_millis_last_block_time_op() {
    pool_details.last_refill_millis = op_context.last_block_time;
}

operation set_reward_debt_op(provider_pubkey: pubkey, reward_debt: big_integer) {
    val pa = provider_account @ { provider @ { provider_pubkey } };
    pa.reward_debt = reward_debt;
}

operation receive_create_cluster_error_message_op(cluster_name: text, error_message: text) {
    receive_create_cluster_error_message(create_cluster_error_message(name = cluster_name, error_message = error_message).to_gtv());
}

operation receive_cluster_update_message_op(message: cluster_update_message) {
    receive_cluster_update_message(message.to_gtv());
}

operation create_cluster_node_op(cluster, node) {
    create cluster_node(cluster, node);
}

operation save_node_availability_op(report: node_availability_report) {
    save_node_availability(report);
}

operation save_node_payed_reward_op(node: byte_array, value: big_integer, time: timestamp) {
    save_node_payed_reward(node, value, time);
}

operation receive_provider_update_message_op(provider_update_message) {
    receive_provider_update_message(provider_update_message.to_gtv());
}

operation create_tag_removal_proposal_with_voter_set(voter_set_name: text) {
    create_proposal(common_proposal_type.ec_tag_remove, voter_set_name);
}

function create_or_return_tag(tag_name: text) {
    var tag = tag @? { tag_name };
    if (tag == null) {
        tag = create tag(tag_name, scu_price = 1, extra_storage_price = 1);
    }
    return tag;
}

function create_or_return_provider(pubkey, system: boolean) {
    var provider = provider @? { pubkey };
    if (provider == null) {
        provider = create provider(pubkey, system = system, provider_tier.NODE_PROVIDER, active = true);
    }
    return provider;
}

operation create_price_oracle_rates_op(symbol: text, name: text, price: decimal) {
    create price_oracle_rates(symbol, name, price);
}

operation do_test_evm_block(network_id: integer, evm_block_height: integer, evm_block_hash: byte_array, events: list<event_data>) {
    _fn_evm_block(network_id, evm_block_height, evm_block_hash, events);
}


operation create_or_return_provider_op(pubkey, system: boolean) {
    create_or_return_provider(pubkey, system);
}

operation create_proposal_op(proposal_type: common_proposal_type, voter_set_name: text) {

    val voter_set = create_or_return_voter_set(voter_set_name);
    val provider = create_or_return_provider(x"", true);

    create common_proposal(op_context.last_block_time, proposal_type, provider.pubkey, voter_set);
}

function create_proposal(proposal_type: common_proposal_type, voter_set_name: text = "voter-set") {

    val voter_set = create_or_return_voter_set(voter_set_name);
    val provider = create_or_return_provider(x"", true);

    return create common_proposal(op_context.last_block_time, proposal_type, provider.pubkey, voter_set);
}

operation create_test_voter_set_with_member(name: text, pubkey) {

    val voter_set = create common_voter_set(name, 0);
    create common_voter_set_member(voter_set, pubkey);
    create common_voter_set_governance(voter_set = voter_set, governor = voter_set);
}

operation create_test_voter_set_with_members(name: text, members: list<pubkey>) {

    val voter_set = create common_voter_set(name, 0);
    for (m in members) {
        create common_voter_set_member(voter_set, m);
    }
    create common_voter_set_governance(voter_set = voter_set, governor = voter_set);
}

operation register_provider_account_op(provider) {

    register_provider_account(provider);
}
