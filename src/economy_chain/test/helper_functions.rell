@test module;

import ^^.*;
import ^.helper_operations.*;

namespace ft4 {
    import lib.ft4.accounts;
    import lib.ft4.assets;
    import lib.ft4.auth;
    import test_utils: lib.ft4.test.utils;
}
import lib.auth;

val ticket_id_after_init = 74;

function do_create_account(keypair: rell.test.keypair, auth_privkey: byte_array, failure: text? = null): ft4.accounts.account? {
    val eth_address = crypto.eth_privkey_to_address(keypair.priv);
    val auth_descriptor = ft4.accounts.single_sig_auth_descriptor(eth_address, set(["A", "T"]));
    val signature = ft4.test_utils.evm_sign(auth.get_message_to_sign(), keypair.priv);

    val tx = rell.test.tx().op(
        auth.register_account(auth_descriptor, signature)
    ).nop().sign(auth_privkey);

    if (failure != null) {
        tx.run_must_fail(failure);
        return null;
    } else {
        tx.run();
        return ft4.accounts.account_by_id(auth_descriptor.hash());
    }
}

function add_provider(pubkey: pubkey, system: boolean, tier: provider_tier = provider_tier.NODE_PROVIDER): provider {
    rell.test.tx().op(
        icmf_message_op(pubkey, provider_update_topic, body = provider_update_message(
            pubkey, system, tier = tier.name, active = true).to_gtv()
        )
    ).run();
    return require(provider @? { pubkey });
}

function ensure_cluster(name: text, deleted: boolean, operational: boolean, cluster_units: integer, extra_storage: integer, anchoring_chain: byte_array = x""): cluster {
    rell.test.tx().op(
        create_pending_cluster(name, "test-tag"),
        icmf_message_op(x"", cluster_update_topic, body = cluster_update_message(
            name, deleted, operational, cluster_units, extra_storage, anchoring_chain).to_gtv())
    ).run();
    return require(cluster @? { name });
}

function ensure_system_cluster(): cluster {
    rell.test.tx().op(
        icmf_message_op(x"", cluster_update_topic, body = cluster_update_message(
            name = system_cluster_name, deleted = false, operational = true, cluster_units = 1, extra_storage = 0, x"").to_gtv())
    ).run();
    return require(cluster @? { .name == system_cluster_name });
}

function ensure_node(provider_pubkey: pubkey, node_pubkey: pubkey, active: boolean, territory: text, cluster_units: integer, extra_storage: integer, deleted: boolean): node {
    rell.test.tx().op(
        icmf_message_op(x"", node_update_topic, body = node_update_message(
            provider_pubkey = provider_pubkey,
            pubkey = node_pubkey,
            active = active,
            territory = territory,
            cluster_units = cluster_units,
            extra_storage = extra_storage,
            deleted = deleted).to_gtv()
        )
    ).run();
    return require(node @? { node_pubkey });
}

function add_cluster_node(cluster_name: text, node_pubkey: pubkey, replica_node: boolean) {
    rell.test.tx().op(
        icmf_message_op(x"", cluster_node_update_topic, body = cluster_node_update_message(
            name = cluster_name,
            pubkey = node_pubkey,
            replica_node = replica_node,
            deleted = false).to_gtv()
        )
    ).run();
}

function remove_cluster_node(cluster_name: text, node_pubkey: pubkey, replica_node: boolean) {
    rell.test.tx().op(
        icmf_message_op(x"", cluster_node_update_topic, body = cluster_node_update_message(
            name = cluster_name,
            pubkey = node_pubkey,
            replica_node = replica_node,
            deleted = true).to_gtv()
        )
    ).run();
}

function add_assets_to_pool(amount: big_integer) {
    rell.test.tx().op(
        mint_to_pool(amount)
    ).run();
}

function do_staking_deposit(
    keypair: rell.test.keypair,
    amount: integer
) {
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(keypair.priv, staking_deposit(amount, null))
    ).op(
        staking_deposit(amount, null)
    ).run();
}

function do_staking_delegate(
    keypair: rell.test.keypair,
    provider: ft4.accounts.account
) {
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(keypair.priv, staking_delegate(provider.id))
    ).op(
        staking_delegate(provider.id)
    ).run();
}

function do_staking_undelegate(keypair: rell.test.keypair) {
    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(keypair.priv, staking_undelegate())
    ).op(
        staking_undelegate()
    ).run();
}

function do_create_container(
    ft4.accounts.account,
    keypair: rell.test.keypair,
    success: boolean,
    ticket_id: integer,
    cluster_name: text = "Bob's cluster",
    container_units: integer = 2,
    auto_renew: boolean = false): text {
    val container_name = "container name";

    val tag = cluster @ { .name == cluster_name }.tag;
    val cost = calculate_container_cost(1, container_units, 0, tag);

    val initial_balance = get_account_balance(account);
    val initial_pool_balance = get_pool_balance();

    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(keypair.priv, create_container(keypair.pub, container_units, 1, 0, cluster_name, auto_renew))
    ).op(
        create_container(keypair.pub, container_units, 1, 0, cluster_name, auto_renew)
    ).run();
    val tx_rid = transaction @ {} (@sort_desc @omit .rowid, .tx_rid) limit 1;

    assert_events(("icmf_message", (
        topic = create_container_topic,
        body = create_container_message(ticket_id = ticket_id, keypair.pub, container_units = container_units, extra_storage = 0, cluster_name = cluster_name).to_gtv()
    ).to_gtv_pretty()));

    val pending_ticket = container_ticket_data(ticket_id, ticket_type.CREATE_CONTAINER, ticket_state.PENDING, error_message = "", container_name = "");
    assert_equals(require(get_create_container_ticket_by_id(ticket_id)), pending_ticket);
    assert_equals(require(get_create_container_ticket_by_transaction(tx_rid)), pending_ticket);

    assert_equals(get_account_balance(account), initial_balance - cost);
    assert_equals(get_pool_balance(), initial_pool_balance + cost);

    rell.test.tx().op(
        icmf_message_op(x"", ticket_container_result_topic, ticket_container_result_message(ticket_id = ticket_id, error_message = if (success) null else "error", container_name, cluster_name).to_gtv())
    ).run();
    val done_ticket = container_ticket_data(
        ticket_id = ticket_id,
        type = ticket_type.CREATE_CONTAINER,
        state = if (success) ticket_state.SUCCESS else ticket_state.FAILURE,
        error_message = if (success) "" else "error",
        container_name = if (success) container_name else ""
    );
    assert_equals(require(get_create_container_ticket_by_id(ticket_id)), done_ticket);
    assert_equals(require(get_create_container_ticket_by_transaction(tx_rid)), done_ticket);

    if (success) {
        assert_equals(get_account_balance(account), initial_balance - cost);
        assert_equals(get_pool_balance(), initial_pool_balance + cost);
    } else {
        assert_equals(get_account_balance(account), initial_balance);
        assert_equals(get_pool_balance(), initial_pool_balance);
    }

    return container_name;
}

function do_upgrade_container(
    ft4.accounts.account,
    keypair: rell.test.keypair,
    success: boolean,
    block_height: integer,
    ticket_id: integer,
    current_lease: lease,
    cluster_name: text = "Bob's cluster",
    container_units: integer = 2,
    auto_renew: boolean = false,
    upgraded_container_name: text? = null
): text {

    val container_name = current_lease.container_name;
    val new_container_name = if (upgraded_container_name != null) upgraded_container_name else current_lease.container_name;
    val tag = cluster @ { .name == cluster_name }.tag;

    val cost = calculate_container_cost(1, container_units, 0, tag) - calculate_remaining_lease_value(current_lease, rell.test.DEFAULT_FIRST_BLOCK_TIME + rell.test.DEFAULT_BLOCK_INTERVAL * (block_height - 1));

    val initial_balance = get_account_balance(account);
    val initial_pool_balance = get_pool_balance();

    rell.test.tx().op(
        ft4.test_utils.evm_auth_operation_for(keypair.priv, upgrade_container(container_name, container_units, 0, cluster_name))
    ).op(
        upgrade_container(container_name, container_units, 0, cluster_name)
    ).run();
    val tx_rid = transaction @ {} (@sort_desc @omit .rowid, .tx_rid) limit 1;

    assert_events(("icmf_message", (
        topic = upgrade_container_topic,
        body = upgrade_container_message(ticket_id = ticket_id, container_name = container_name, container_units = container_units, extra_storage = 0, cluster_name = cluster_name).to_gtv()
    ).to_gtv_pretty()));

    val pending_ticket = container_ticket_data(ticket_id, ticket_type.UPGRADE_CONTAINER, ticket_state.PENDING, error_message = "", container_name = container_name);
    assert_equals(require(get_upgrade_container_ticket_by_id(ticket_id)), pending_ticket);
    assert_equals(require(get_upgrade_container_ticket_by_transaction(tx_rid)), pending_ticket);

    assert_equals(get_account_balance(account), initial_balance - cost);
    assert_equals(get_pool_balance(), initial_pool_balance + cost);

    rell.test.tx().op(
        icmf_message_op(x"", ticket_container_result_topic, ticket_container_result_message(ticket_id = ticket_id, error_message = if (success) null else "error", container_name = new_container_name, cluster_name).to_gtv())
    ).run();
    val done_ticket = container_ticket_data(
        ticket_id = ticket_id,
        type = ticket_type.UPGRADE_CONTAINER,
        state = if (success) ticket_state.SUCCESS else ticket_state.FAILURE,
        error_message = if (success) "" else "error",
        container_name = if (success) container_name else ""
    );
    assert_equals(require(get_upgrade_container_ticket_by_id(ticket_id)), done_ticket);
    assert_equals(require(get_upgrade_container_ticket_by_transaction(tx_rid)), done_ticket);

    if (success) {
        assert_equals(get_account_balance(account), initial_balance - cost);
        assert_equals(get_pool_balance(), initial_pool_balance + cost);
    } else {
        assert_equals(get_account_balance(account), initial_balance);
        assert_equals(get_pool_balance(), initial_pool_balance);
    }

    return new_container_name;
}

function get_provider_nodes_pubkeys(provider: provider){
    return node @* { provider } ( .pubkey );
}

function get_provider_nodes(provider: provider){
    return node @* { provider };
}

// Create cluster proposal - keypair1 creates it, keypair2 needs to vote yes to approve it
function create_multi_provider_cluster_proposal(cluster_name: text, tag_name: text, keypair1: rell.test.keypair, keypair2: rell.test.keypair) {

    val provider1 = add_provider(keypair1.pub, true, provider_tier.NODE_PROVIDER);

    rell.test.tx().op(
        create_tag(
            name = tag_name,
            scu_price = 1,
            extra_storage_price = 2))
        .sign(keypair1)
        .run();

    val provider2 = add_provider(keypair2.pub, true, provider_tier.NODE_PROVIDER);
    rell.test.tx().op(
        create_cluster(
            name = cluster_name,
            governor_voter_set_name = "governor_voter_set",
            voter_set_name = "voter_set",
            cluster_units = 1,
            extra_storage = 2,
            tag_name = tag_name))
        .sign(keypair1)
        .run();
}

