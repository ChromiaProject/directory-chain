@test module;

import ^^.*;

struct module_args {
    admin_privkey: byte_array;
}

val admin_privkey = chain_context.args.admin_privkey;

function test_economy_constants() {
    val constants: economy_constants_data = get_economy_constants();
    assert_equals(constants.min_lease_time_weeks, 1);
    assert_equals(constants.max_lease_time_weeks, 12);
    assert_equals(constants.chr_per_usd, 5);
    assert_equals(constants.total_cost_system_providers, 828);
    assert_equals(constants.system_provider_fee_share, 0.1);
    assert_equals(constants.staking_reward_fee_share, 0.1);
    assert_equals(constants.chromia_foundation_fee_share, 0.1);
    assert_equals(constants.resource_pool_margin_fee_share, 0.1);
    assert_equals(constants.system_provider_risk_share, 0.1);
    assert_equals(constants.dapp_provider_risk_share, 0.2);

    // Update constants
    rell.test.tx().op(
        update_economy_constants(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    ).run_must_fail("Expected admin signature");

    rell.test.tx().op(
        update_economy_constants(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    ).sign(admin_privkey).run();

    val updated_constants: economy_constants_data = get_economy_constants();
    assert_equals(updated_constants.min_lease_time_weeks, 1);
    assert_equals(updated_constants.max_lease_time_weeks, 2);
    assert_equals(updated_constants.chr_per_usd, 3);
    assert_equals(updated_constants.total_cost_system_providers, 4);
    assert_equals(updated_constants.system_provider_fee_share, 5);
    assert_equals(updated_constants.staking_reward_fee_share, 6);
    assert_equals(updated_constants.chromia_foundation_fee_share, 7);
    assert_equals(updated_constants.resource_pool_margin_fee_share, 8);
    assert_equals(updated_constants.system_provider_risk_share, 9);
    assert_equals(updated_constants.dapp_provider_risk_share, 10);
}