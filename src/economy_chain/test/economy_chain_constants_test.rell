@test module;

import ^^.*;

struct module_args {
    admin_privkey: byte_array;
}

val admin_privkey = chain_context.args.admin_privkey;

function test_economy_constants() {
    val constants: economy_constants_data = get_economy_constants();
    assert_equals(constants.min_lease_time_weeks, 1);
    assert_equals(constants.max_lease_time_weeks, 12);
    assert_equals(constants.chr_per_usd, 5);
    assert_equals(constants.dapp_scu_cost, 1);
    assert_equals(constants.dapp_extra_storage_cost, 1);
    assert_equals(constants.dapp_bridge_chain_cost, 1);
    assert_equals(constants.scu_dapp_reward, 17);
    assert_equals(constants.extra_storage_reward, 0.003);
    assert_equals(constants.system_node_reward, 34);
    assert_equals(constants.bridge_chain_reward, 5);

    // Update constants
    rell.test.tx().op(
        update_economy_constants(42, 42, 42, 42, 42, 42, 42, 42, 42, 42)
    ).run_must_fail("Expected admin signature");

    rell.test.tx().op(
        update_economy_constants(42, 42, 42, 42, 42, 42, 42, 42, 42, 42)
    ).sign(admin_privkey).run();

    val updated_constants: economy_constants_data = get_economy_constants();
    assert_equals(updated_constants.min_lease_time_weeks, 42);
    assert_equals(updated_constants.max_lease_time_weeks, 42);
    assert_equals(updated_constants.chr_per_usd, 42);
    assert_equals(updated_constants.dapp_scu_cost, 42);
    assert_equals(updated_constants.dapp_extra_storage_cost, 42);
    assert_equals(updated_constants.dapp_bridge_chain_cost, 42);
    assert_equals(updated_constants.scu_dapp_reward, 42);
    assert_equals(updated_constants.extra_storage_reward, 42);
    assert_equals(updated_constants.system_node_reward, 42);
    assert_equals(updated_constants.bridge_chain_reward, 42);
}