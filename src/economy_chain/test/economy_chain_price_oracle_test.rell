@test module;

import ^^.*;
import ^.helper_operations.*;

function test_receive_price_oracle_update() {

    val symbol = "tCHR";
    val second_symbol = "BTC";

    // Create sender
    rell.test.tx().op(
        icmf_message_op(x"", blockchain_rid_topic, body = blockchain_rid(rid = x"", name = blockchains.price_oracle_chain_name).to_gtv())
    ).run();

    // Create entity
    rell.test.tx().op(
        icmf_message_op(x"", token_price_changed_topic, body = token_price_changed_body(
            name = "N1",
            symbol = symbol,
            1.1
        ).to_gtv())
    ).run();

    assert_equals(price_oracle_rates @ { .symbol == symbol } ( .price ), 1.1);
    assert_equals(economy_constants.chr_per_usd, 1.1);

    // Update entity
    rell.test.tx().op(
        icmf_message_op(x"", token_price_changed_topic, body = token_price_changed_body(
            name = "N1",
            symbol = symbol,
            1.123456
        ).to_gtv())
    ).run();

    assert_equals(price_oracle_rates @ { .symbol == symbol } ( .price ), 1.123456);
    assert_equals(economy_constants.chr_per_usd, 1.123456);

    // Create a second entity - keeps the first one unchanged
    rell.test.tx().op(
        icmf_message_op(x"", token_price_changed_topic, body = token_price_changed_body(
            name = "N2",
            symbol = second_symbol,
            3.4
        ).to_gtv())
    ).run();

    assert_equals(price_oracle_rates @ { .symbol == second_symbol } ( .price ), 3.4);
    assert_equals(price_oracle_rates @ { .symbol == symbol } ( .price ), 1.123456);
    assert_equals(economy_constants.chr_per_usd, 1.123456);
}

function test_receive_price_oracle_update_invalid_sender() {

    rell.test.tx().op(
        icmf_message_op(x"", token_price_changed_topic, body = token_price_changed_body(
            name = "Chromia",
            symbol = "CHR",
            1.1
        ).to_gtv())
    ).run_must_fail("0x that is not tracked by economy chain");
}