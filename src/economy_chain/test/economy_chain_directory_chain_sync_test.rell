@test module;

import ^^.*;
import ^.helper_functions.*;
import ^.helper_operations.*;
import ^^.ec_proposal.test.helper_functions.*;

struct module_args {
    auth_privkey: byte_array;
    admin_privkey: byte_array;
}

val auth_privkey = chain_context.args.auth_privkey;

val cluster_name = "Bob's cluster";
val tag_1_name = "t1";
val tag_2_name = "t2";
val tag_3_name = "t3";

function test_provider() {
    rell.test.tx().op(init()).run();

    val provider_pubkey = rell.test.keypairs.bob.pub;

    // Add provider
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    assert_false(provider.system);
    assert_equals(provider.tier, provider_tier.NODE_PROVIDER);
}

function test_cluster() {
    rell.test.tx().op(init()).run();

    // Add cluster
    val cluster = ensure_cluster(cluster_name, false, false, 1, 1024);
    assert_false(cluster.operational);
    assert_equals(cluster.cluster_units, 1);
    assert_equals(cluster.extra_storage, 1024);

    // Update cluster
    val updated_cluster = ensure_cluster(cluster_name, false, true, 2, 42);
    assert_true(updated_cluster.operational);
    assert_equals(updated_cluster.cluster_units, 2);
    assert_equals(updated_cluster.extra_storage, 42);

    // Remove cluster
    rell.test.tx().op(
        icmf_message_op(x"", cluster_update_topic, body = cluster_update_message(
            name = cluster_name, deleted = true, operational = false, cluster_units = 1, extra_storage = 1024, anchoring_chain = x"").to_gtv())
    ).run();
    assert_null(cluster @? { .name == cluster_name });
}

function test_node() {
    rell.test.tx().op(init()).run();

    val provider_pubkey = rell.test.keypairs.bob.pub;
    val node_pubkey = rell.test.pubkeys.charlie;

    // Missing provider should fail
    rell.test.tx().op(
        icmf_message_op(x"", node_update_topic, body = node_update_message(
            provider_pubkey = provider_pubkey,
            pubkey = node_pubkey,
            active = true,
            territory = "",
            cluster_units = 1,
            extra_storage = 1024,
            deleted = false).to_gtv()
        )
    ).run_must_fail("due to missing provider");

    // Add provider
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);

    // Add node
    val node = ensure_node(provider_pubkey, node_pubkey, true, "SE", 1, 1024, false);
    assert_true(node.active);
    assert_equals(node.territory, "SE");
    assert_equals(node.cluster_units, 1);
    assert_equals(node.extra_storage, 1024);

    // Update node
    val updated_node = ensure_node(provider_pubkey, node_pubkey, false, "", 10, 42, false);
    assert_false(updated_node.active);
    assert_equals(updated_node.territory, "");
    assert_equals(updated_node.cluster_units, 10);
    assert_equals(updated_node.extra_storage, 42);

    // Remove node
    rell.test.tx().op(
        icmf_message_op(x"", node_update_topic, body = node_update_message(
            provider_pubkey = provider_pubkey,
            pubkey = node_pubkey,
            active = false,
            territory = "",
            cluster_units = 10,
            extra_storage = 1042,
            deleted = true).to_gtv()
        )
    ).run();
    assert_null(node @? { node_pubkey });
}

function test_cluster_node() {
    rell.test.tx().op(init()).run();

    val provider_pubkey = rell.test.keypairs.bob.pub;
    val node_pubkey = rell.test.pubkeys.charlie;
    val cluster_name_replica = "Alice's cluster";

    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val node = ensure_node(provider_pubkey, node_pubkey, true, "SE", 1, 1024, false);
    val cluster = ensure_cluster(cluster_name, false, true, 1, 1024);
    val cluster_replica = ensure_cluster(cluster_name_replica, false, true, 1, 1024);

    // Add cluster_node
    assert_null(cluster_node @? { cluster, node });
    assert_null(cluster_replica_node @? { cluster_replica, node });

    add_cluster_node(cluster_name, node_pubkey, false);
    add_cluster_node(cluster_name_replica, node_pubkey, true);

    assert_not_null(cluster_node @? { cluster, node });
    assert_not_null(cluster_replica_node @? { cluster_replica, node });

    // Remove cluster node
    remove_cluster_node(cluster_name, node_pubkey, false);
    remove_cluster_node(cluster_name_replica, node_pubkey, true);
    assert_null(cluster_node @? { cluster, node });
    assert_null(cluster_replica_node @? { cluster_replica, node });
}

function test_full_cluster_remove() {
    rell.test.tx().op(init()).run();

    val provider_pubkey = rell.test.keypairs.bob.pub;
    val node_pubkey = rell.test.pubkeys.charlie;
    val node_pubkey_2 = rell.test.pubkeys.alice;

    val cluster = ensure_cluster(cluster_name, false, true, 1, 1024);
    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val node = ensure_node(provider_pubkey, node_pubkey, true, "SE", 1, 1024, false);
    val node_2 = ensure_node(provider_pubkey, node_pubkey_2, true, "SE", 1, 1024, false);

    add_cluster_node(cluster_name, node_pubkey, false);
    add_cluster_node(cluster_name, node_pubkey_2, true);

    assert_not_null(cluster_node @? { cluster, node });
    assert_not_null(cluster_replica_node @? { cluster, node_2 });

    // Remove cluster
    rell.test.tx().op(
        icmf_message_op(x"", cluster_update_topic, body = cluster_update_message(
            name = cluster_name, deleted = true, operational = false, cluster_units = 1, extra_storage = 1024, anchoring_chain = x"").to_gtv())
    ).run();

    // Verify
    assert_null(cluster_node @? { cluster, node });
    assert_null(cluster_replica_node @? { cluster, node_2 });
    assert_null(cluster @? { .name == cluster_name });
}

function test_full_node_remove() {
    rell.test.tx().op(init()).run();

    val provider_pubkey = rell.test.keypairs.bob.pub;
    val node_pubkey = rell.test.pubkeys.charlie;
    val cluster_name_replica = "Alice's cluster";

    val provider = add_provider(provider_pubkey, false, provider_tier.NODE_PROVIDER);
    val node = ensure_node(provider_pubkey, node_pubkey, true, "SE", 1, 1024, false);
    val cluster = ensure_cluster(cluster_name, false, true, 1, 1024);
    val cluster_replica = ensure_cluster(cluster_name_replica, false, true, 1, 1024);

    add_cluster_node(cluster_name, node_pubkey, false);
    add_cluster_node(cluster_name_replica, node_pubkey, true);

    assert_not_null(cluster_replica_node @? { cluster_replica, node });
    assert_not_null(cluster_replica_node @? { cluster_replica, node });

    // Remove node
    rell.test.tx().op(
        icmf_message_op(x"", node_update_topic, body = node_update_message(
            provider_pubkey = provider_pubkey,
            pubkey = node_pubkey,
            active = false,
            territory = "",
            cluster_units = 10,
            extra_storage = 1042,
            deleted = true).to_gtv()
        )
    ).run();

    // Verify
    assert_null(cluster_replica_node @? { cluster_replica, node });
    assert_null(cluster_replica_node @? { cluster_replica, node });
    assert_null(node @? { node_pubkey });
}

function test_remove_cluster_with_lease_refund() {
    rell.test.tx().op(init(), create_test_cluster(cluster_name)).run();
    val alice = require(do_create_account(rell.test.keypairs.alice, auth_privkey));
    val account_balance_start = get_account_balance(alice);
    val container_name = do_create_container(alice, rell.test.keypairs.alice, success = true, ticket_id = 23, cluster_name = cluster_name, container_units = 2);
    val account_balance_after_buying_lease = get_account_balance(alice);
    val cost = account_balance_start - account_balance_after_buying_lease;

    val lease = lease @ { container_name };

    val expected_refund = calculate_remaining_lease_value(lease, rell.test.DEFAULT_FIRST_BLOCK_TIME + rell.test.DEFAULT_BLOCK_INTERVAL * 3);

    val message = cluster_update_message(
        name = cluster_name,
        deleted = true,
        operational = true,
        cluster_units = 1,
        extra_storage = 0,
        anchoring_chain = x""
    );
    rell.test.tx().op(
        receive_cluster_update_message_op(message)
    ).run();

    assert_null(lease @? { container_name });
    assert_equals(get_account_balance(alice), account_balance_start - cost + expected_refund);
    assert_equals(get_pool_balance(), cost - expected_refund);
}

function test_receive_provider_update_message_create() {

    assert_null(provider @? { rell.test.pubkeys.alice });

    rell.test.tx().op(
        receive_provider_update_message_op(provider_update_message(
            rell.test.pubkeys.alice,
            system = true,
            tier = provider_tier.NODE_PROVIDER.name,
            active = true
        ))
    ).run();

    assert_not_null(provider @? { rell.test.pubkeys.alice });
    assert_not_null(voter_set_member @? { .voter_set.name == voter_sets.system_p, .provider.pubkey == rell.test.pubkeys.alice });
}

function test_receive_provider_update_message_update() {

    add_provider(rell.test.pubkeys.alice, false, provider_tier.NODE_PROVIDER);
    assert_not_null(provider @? { rell.test.pubkeys.alice });

    rell.test.tx().op(
        receive_provider_update_message_op(provider_update_message(
            rell.test.pubkeys.alice,
            system = true,
            tier = provider_tier.NODE_PROVIDER.name,
            active = true
        ))
    ).run();

    val provider = provider @? { rell.test.pubkeys.alice };
    assert_not_null(provider);
    assert_true(provider.system);
    assert_not_null(voter_set_member @? { .voter_set.name == voter_sets.system_p, .provider.pubkey == rell.test.pubkeys.alice });
}

function test_receive_provider_update_message_update_remove_sp() {

    add_provider(rell.test.pubkeys.alice, false, provider_tier.NODE_PROVIDER);
    assert_not_null(provider @? { rell.test.pubkeys.alice });

    // Create
    rell.test.tx().op(
        receive_provider_update_message_op(provider_update_message(
            rell.test.pubkeys.alice,
            system = true,
            tier = provider_tier.NODE_PROVIDER.name,
            active = true
        ))
    ).run();

    val provider = provider @? { rell.test.pubkeys.alice };
    assert_not_null(provider);
    assert_true(provider.system);
    assert_not_null(voter_set_member @? { .voter_set.name == voter_sets.system_p, .provider.pubkey == rell.test.pubkeys.alice });

    // Update
    rell.test.tx().op(
        receive_provider_update_message_op(provider_update_message(
            rell.test.pubkeys.alice,
            system = false,
            tier = provider_tier.NODE_PROVIDER.name,
            active = true
        ))
    ).run();

    assert_false(provider.system);
    assert_null(voter_set_member @? { .voter_set.name == voter_sets.system_p, .provider.pubkey == rell.test.pubkeys.alice });
}

function test_receive_provider_update_message_update_remove_sp_due_to_inactive() {

    add_provider(rell.test.pubkeys.alice, false, provider_tier.NODE_PROVIDER);
    assert_not_null(provider @? { rell.test.pubkeys.alice });

    // Create
    rell.test.tx().op(
        receive_provider_update_message_op(provider_update_message(
            rell.test.pubkeys.alice,
            system = true,
            tier = provider_tier.NODE_PROVIDER.name,
            active = true
        ))
    ).run();

    val provider = provider @? { rell.test.pubkeys.alice };
    assert_not_null(provider);
    assert_true(provider.system);
    assert_not_null(voter_set_member @? { .voter_set.name == voter_sets.system_p, .provider.pubkey == rell.test.pubkeys.alice });

    // Update
    rell.test.tx().op(
        receive_provider_update_message_op(provider_update_message(
            rell.test.pubkeys.alice,
            system = true,
            tier = provider_tier.NODE_PROVIDER.name,
            active = false
        ))
    ).run();

    assert_true(provider.system);
    assert_false(provider.active);
    assert_null(voter_set_member @? { .voter_set.name == voter_sets.system_p, .provider.pubkey == rell.test.pubkeys.alice });
}


function test_receive_provider_update_message_revoke_proposals_on_sp_changes() {

    val voter_set_2_name = "vs-2";

    // Add 2 providers and add them to the SYSTEM_P voter set.
    add_provider(rell.test.pubkeys.alice, true, provider_tier.NODE_PROVIDER);
    add_provider(rell.test.pubkeys.bob, true, provider_tier.NODE_PROVIDER);
    assert_equals(voter_set_member @? { .voter_set.name == voter_sets.system_p } ( @sum 1 ), 2);

    // Create a separate voter set that won't be affected - should not be revoked by sp changes
    add_provider(rell.test.pubkeys.charlie, true, provider_tier.NODE_PROVIDER);
    rell.test.tx().op(
        create_proposal_op(ec_proposal_type.tag_create, voter_set_2_name))
        .run();

    val create_tag_1_proposal_id = get_latest_proposal_id();
    val voter_set_2 = voter_set @ { voter_set_2_name };
    val provider_charlie = provider @ { rell.test.pubkeys.charlie };

    rell.test.tx().op(
        create_voter_set_member_op(voter_set_2, provider_charlie))
        .run();

    // Create a proposal to be rejected because is has the SYSTEM_P voter set
    rell.test.tx().op(
        create_tag(
            name = tag_1_name,
            scu_price = 3,
            extra_storage_price = 4))
        .sign(rell.test.keypairs.alice)
        .run();
    val create_tag_2_proposal_id = get_latest_proposal_id();

    // Remove one provider as system provider to trigger the revoke
    rell.test.tx().op(
        receive_provider_update_message_op(provider_update_message(
            rell.test.pubkeys.alice,
            system = false,
            tier = provider_tier.NODE_PROVIDER.name,
            active = true
        ))
    ).run();

    // The tag create 1 proposal should still be PENDING, but the tag create 2 proposal revoked
    assert_null(voter_set_member @? { .voter_set.name == voter_sets.system_p, .provider.pubkey == rell.test.pubkeys.alice });
    assert_not_null(voter_set_member @? { .voter_set.name == voter_sets.system_p, .provider.pubkey == rell.test.pubkeys.bob });
    assert_equals(proposal @ { create_tag_1_proposal_id } ( .state ), proposal_state.PENDING);
    assert_equals(proposal @ { create_tag_2_proposal_id } ( .state ), proposal_state.REVOKED);

    // Lets also test adding a SP

    // Add a new SP to make it 2 and avoid auto approval of the new proposal
    rell.test.tx().op(
        receive_provider_update_message_op(provider_update_message(
            rell.test.pubkeys.dave,
            system = false,
            tier = provider_tier.NODE_PROVIDER.name,
            active = true
        ))
    ).run();

    // Add proposal of creating tag 3
    rell.test.tx().op(
        create_tag(
            name = tag_3_name,
            scu_price = 3,
            extra_storage_price = 4))
        .sign(rell.test.keypairs.bob)
        .run();
    val create_tag_3_proposal_id = get_latest_proposal_id();

    assert_equals(proposal @ { create_tag_3_proposal_id } ( .state ), proposal_state.PENDING);

    // Add a new SP
    rell.test.tx().op(
        receive_provider_update_message_op(provider_update_message(
            rell.test.pubkeys.eve,
            system = true,
            tier = provider_tier.NODE_PROVIDER.name,
            active = true
        ))
    ).run();

    // Create tag 3 proposal should be revoked, create tag 1 proposal still pending
    assert_equals(voter_set_member @? { .voter_set.name == voter_sets.system_p } ( @sum 1 ), 3);
    assert_equals(proposal @ { create_tag_1_proposal_id } ( .state ), proposal_state.PENDING);
    assert_equals(proposal @ { create_tag_2_proposal_id } ( .state ), proposal_state.REVOKED);
}
