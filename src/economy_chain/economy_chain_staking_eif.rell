namespace ft4 {
    import lib.ft4.accounts;
    import lib.ft4.assets;
    import lib.ft4.auth;
}
import lib.auth;

val STAKING_NETWORK_ID_BSC = 56;
val STAKING_NETWORK_ID_ETH = 1;
val STAKING_NETWORK_ID_BSC_TEST = 97;

struct event_data {
    tnx_hash: byte_array;
    log_index: integer;
    signature: byte_array;
    contract_address: byte_array;
    name: text;
    indexed_values: list<gtv>;
    non_indexed_values: list<gtv>;
}

function _staking_network_id_to_enum(network_id: integer) = when (network_id) {
    STAKING_NETWORK_ID_ETH -> staking_network.ETH;
    STAKING_NETWORK_ID_BSC -> staking_network.BSC;
    STAKING_NETWORK_ID_BSC_TEST -> staking_network.BSC;
    else -> staking_network.CHR;
};

entity provisional_stake_balance {
    key address: byte_array, staking_network;
    mutable staked_balance: integer;
}

function flush_provisional_stake_balance(account: ft4.accounts.account, address: byte_array) {
    val provisional = provisional_stake_balance @* { address };
    for (p in provisional) {
        _staking_update_from_evm(account, p.staked_balance, p.staking_network);
        delete p;
    }
}

function __staking_evm_block(network_id: integer, evm_block_height: integer, evm_block_hash: byte_array, events: list<event_data>) {
    for (event in events) {
        val evm_address = byte_array.from_gtv(event.indexed_values[0]);

        val current_network = _staking_network_id_to_enum(network_id);
        if (current_network == staking_network.CHR) {
            log("Unknown staking staking_network id: ", network_id);
            return;
        }

        val ft4_account = eif.hbridge.find_ft4_account_for_address(evm_address, network_id);

        if (event.name == "WithdrawRequest") {
            if (exists(ft4_account)) {
                _staking_request_withdrawal(ft4_account, current_network);
            } else {
                delete provisional_stake_balance @? { evm_address, current_network };
            }
        } else if (event.name == "StakeUpdate") {
            val staked_balance = integer.from_gtv(event.non_indexed_values[0]);

            if (exists(ft4_account)) {
                _staking_update_from_evm(ft4_account, staked_balance, current_network);
            } else {
                val provisional = provisional_stake_balance @? { evm_address, current_network };
                if (exists(provisional)) {
                    provisional.staked_balance = staked_balance;
                } else {
                    create provisional_stake_balance (
                        .address = evm_address,
                        .staking_network = current_network,
                        .staked_balance = staked_balance
                    );
                }
            }
        } else {
            log("Unknown EIF event: ", event.name);
        }
    }
}
