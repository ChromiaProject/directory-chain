function register_provider_account_impl(provider_pubkey: pubkey) {
    val provider = require(provider @? { provider_pubkey }, "No provider found with pubkey %s".format(provider_pubkey));
    require(provider_account @? { provider } == null, "Account already registered. Only one account per provider is allowed");

    val auth_descriptor = ft4.accounts.single_sig_auth_descriptor(provider_pubkey, set(["A", "T"]));
    val account = ft4.accounts.create_account_with_auth(auth_descriptor);

    create provider_account(provider, account);
}

function register_account_impl(pubkey) {
    require_admin();

    val auth_descriptor = ft4.accounts.single_sig_auth_descriptor(pubkey, set(["A", "T"]));

    before_account_registration(auth_descriptor);
    val account = ft4.accounts.Unsafe.create_account_with_auth(auth_descriptor);
    after_account_registration(account, auth_descriptor);
}

@extend(auth.before_account_registration) function(ft4.accounts.auth_descriptor, ft4.auth.signature) {
    before_account_registration(auth_descriptor);
}

function before_account_registration(ft4.accounts.auth_descriptor) {
    require_initialized();
}

@extend(auth.after_account_registration) function(ft4.accounts.account, ft4.accounts.auth_descriptor, ft4.auth.signature) {
    after_account_registration(account, auth_descriptor);
}

function after_account_registration(ft4.accounts.account, ft4.accounts.auth_descriptor) {
    log("Account created: %s".format(account.id));

    ft4.assets.Unsafe.mint(account, get_asset(), chain_context.args.amount_to_mint);

    create user(account = account, last_refill_millis = op_context.last_block_time);
}

function get_account_balance(ft4.accounts.account): big_integer =
        (ft4.assets.balance @? { account, get_asset() }.amount) ?: 0L;

function get_asset(): ft4.assets.asset {
    val asset_id = (chain_context.args.asset_name, chain_context.blockchain_rid).hash();
    return ft4.assets.asset @ { .id == asset_id };
}

function create_pool_account(): ft4.accounts.account {
    return ft4.accounts.Unsafe.create_account_with_auth(get_pool_account_auth_descriptor());
}

function get_pool_account() = ft4.accounts.account_by_id(get_pool_account_auth_descriptor().hash());

function get_pool_account_auth_descriptor() = ft4.accounts.single_sig_auth_descriptor(chain_context.args.pool_account_pubkey, set(["A", "T"]));

function create_chromia_foundation_account(): ft4.accounts.account {
    return ft4.accounts.Unsafe.create_account_with_auth(get_chromia_foundation_account_auth_descriptor());
}

function get_chromia_foundation_account() = ft4.accounts.account_by_id(get_chromia_foundation_account_auth_descriptor().hash());

function get_chromia_foundation_account_auth_descriptor() = ft4.accounts.single_sig_auth_descriptor(chain_context.args.chromia_foundation_account_pubkey, set(["A", "T"]));

function register_assets() {
    ft4.assets.Unsafe.register_asset(
        chain_context.args.asset_name,
        chain_context.args.asset_symbol,
        chain_context.args.asset_decimals,
        chain_context.blockchain_rid,
        chain_context.args.asset_icon
    );
}

function ft4_from_account_id(account_id: byte_array) = require(ft4.accounts.account @? { account_id }, "Account %s not found".format(account_id));