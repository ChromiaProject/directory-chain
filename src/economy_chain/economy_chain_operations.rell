operation register_account(pubkey) {
    register_account_impl(pubkey);
}

operation register_provider_account(provider_pubkey: pubkey) {
    register_provider_account_impl(provider_pubkey);
}

operation create_container(provider_pubkey: pubkey, container_units: integer,
    duration_weeks: integer, extra_storage_gib: integer, cluster_name: text, auto_renew: boolean) {
    create_container_impl(provider_pubkey, container_units, duration_weeks, extra_storage_gib, cluster_name, auto_renew);
}

operation upgrade_container(container_name: text, upgraded_container_units: integer,
    upgraded_extra_storage_gib: integer, upgraded_cluster_name: text) {
    upgrade_container_impl(container_name, upgraded_container_units, upgraded_extra_storage_gib, upgraded_cluster_name);
}

operation renew_container(container_name: text, duration_weeks: integer) {
     renew_container_impl(container_name, duration_weeks);
}

operation auto_renew_container(container_name: text) {
    auto_renew_container_impl(container_name);
}

operation cancel_renew_container(container_name: text) {
    cancel_renew_container_impl(container_name);
}

operation transfer_to_pool(amount: big_integer) {
    transfer_to_pool_impl(amount);
}

operation update_system_provider_economy_constants(
    total_cost_system_providers: integer?,
    system_provider_fee_share: decimal?,
    system_provider_risk_share: decimal?
){
    require_admin();
    economy_constants.total_cost_system_providers = total_cost_system_providers ?: economy_constants.total_cost_system_providers;
    economy_constants.system_provider_fee_share = system_provider_fee_share ?: economy_constants.system_provider_fee_share;
    economy_constants.system_provider_risk_share = system_provider_risk_share ?: economy_constants.system_provider_risk_share;
}

operation update_chr_per_usd(
    chr_per_usd: decimal?
) {
    require_admin();
    economy_constants.chr_per_usd = chr_per_usd ?: economy_constants.chr_per_usd;
}

operation update_economy_constants(
    min_lease_time_weeks: integer?,
    max_lease_time_weeks: integer?,
    staking_reward_fee_share: decimal?,
    chromia_foundation_fee_share: decimal?,
    resource_pool_margin_fee_share: decimal?,
    dapp_provider_risk_share: decimal?
) {
    val provider = require_system_provider_signer_entity();

    val proposal = create_system_p_proposal(ec_proposal_type.economy_constants_update, provider, "Update economy constants");
    create pending_economy_constants(
        proposal,
        min_lease_time_weeks = get_integer_or_default(min_lease_time_weeks, -1)!!,
        max_lease_time_weeks = get_integer_or_default(max_lease_time_weeks, -1)!!,
        staking_reward_fee_share = get_decimal_or_default(staking_reward_fee_share, -1)!!,
        chromia_foundation_fee_share = get_decimal_or_default(chromia_foundation_fee_share, -1)!!,
        resource_pool_margin_fee_share = get_decimal_or_default(resource_pool_margin_fee_share, -1)!!,
        dapp_provider_risk_share = get_decimal_or_default(dapp_provider_risk_share, -1)!!
    );

    internal_vote(provider, proposal, true);
}

operation create_tag(
    name: text,
    scu_price: integer,
    extra_storage_price: integer
) {
    val provider = require_system_provider_signer_entity();
    require(tag @? { .name == name } == null, "Tag %s already exists".format(name));
    require(pending_tag_operation @? { .name == name } == null, "A proposal for creating tag %s already exists".format(name));

    val proposal = create_system_p_proposal(ec_proposal_type.tag_create, provider, "Create tag %s".format(name));
    create pending_tag_operation(name = name, scu_price = scu_price, extra_storage_price = extra_storage_price, proposal);

    internal_vote(provider, proposal, true);
}

operation update_tag(
    name: text,
    scu_price: integer?,
    extra_storage_price: integer?
) {
    val provider = require_system_provider_signer_entity();
    val tag = require_tag(name);

    val proposal = create_system_p_proposal(ec_proposal_type.tag_update, provider, "Update tag %s".format(name));
    create pending_tag_operation(name = name, scu_price = scu_price ?: -1, extra_storage_price = extra_storage_price ?: -1, proposal);

    internal_vote(provider, proposal, true);
}

operation remove_tag(
    name: text
) {
    val provider = require_system_provider_signer_entity();
    val tag = require_tag(name);

    val clusters = cluster @* { tag };
    require(clusters.empty(), "Tag with name %s is in use.".format(name));

    val proposal = create_system_p_proposal(ec_proposal_type.tag_remove, provider, "Remove tag %s".format(name));
    create pending_tag_operation(name = name, proposal);

    internal_vote(provider, proposal, true);
}

operation create_cluster(
    name,
    governor_voter_set_name: text,
    voter_set_name: text,
    cluster_units: integer,
    extra_storage: integer,
    tag_name: text
) {
    val provider = require_system_provider_signer_entity();

    require(empty(cluster @* { .name == name }), "Cluster %s already exists".format(name));
    require(pending_cluster @? { name } == null, "There is already a pending request to create cluster with name %s".format(name));
    val tag = require_tag(tag_name);

    val proposal = create_system_p_proposal(ec_proposal_type.cluster_create, provider, "Create economy chain cluster %s".format(name));

    create pending_cluster(
        name = name,
        tag,
        proposer_pubkey = provider.pubkey,
        governor_voter_set_name = governor_voter_set_name,
        voter_set_name = voter_set_name,
        cluster_units,
        extra_storage,
        proposal,
        pending_cluster_status.PENDING_APPROVAL
    );

    internal_vote(provider, proposal, true);
}

operation change_cluster_tag(
    cluster_name: text,
    tag_name: text
) {
    val provider = require_system_provider_signer_entity();
    val tag = require_tag(tag_name);
    val cluster = require_cluster(cluster_name);

    val proposal = create_system_p_proposal(ec_proposal_type.cluster_change_tag, provider, "Change tag for cluster %s".format(cluster_name));
    create pending_cluster_change_tag(cluster, tag, proposal);

    internal_vote(provider, proposal, true);
}

operation add_bridge_lease(container_name: text, blockchain_rid: byte_array, evm_network_id: integer, validator_contract: text, bridge_contract: text, initial_signers: list<byte_array>) {
    add_bridge_lease_impl(container_name, blockchain_rid, evm_network_id, validator_contract, bridge_contract, initial_signers);
}

operation update_bridge_lease(blockchain_rid: byte_array, evm_network_id: integer, updated_validator_contract: text?, updated_bridge_contract: text?, updated_signers: list<byte_array>?) {
    update_bridge_lease_impl(blockchain_rid, evm_network_id, updated_validator_contract, updated_bridge_contract, updated_signers);
}

operation remove_bridge_lease(blockchain_rid: byte_array, evm_network_id: integer) {
    remove_bridge_lease_impl(blockchain_rid, evm_network_id);
}

function create_system_p_proposal(ec_proposal_type, provider, description: text): proposal {

    return create proposal(
        op_context.last_block_time,
        ec_proposal_type,
        provider,
        system_p_voter_set(),
        description);
}