@extend(remove_provider_handler)
function(
    provider_account
) = _staking_offboard_provider(
    provider_account
        .provider
        .pubkey
);

@extend(after_pay_reward)
function(pay_reward_result) = _staking_shared_rewards(pay_reward_result);

function __staking_begin_block(height: integer) {
    if (
        (_staking_last_known_time() - _staking_state.last_reward_distribution) > chain_context.args.staking_payout_interval_ms
    ) {
        _staking_distribute_rewards();
        _staking_state.last_reward_distribution = _staking_last_known_time();
    }
    if (
        (_staking_last_known_time() - _staking_state.last_withdrawal_distribution) > chain_context.args.staking_withdrawal_delay_ms
    ) {
        _staking_distribute_withdrawals();
        _staking_state.last_withdrawal_distribution = _staking_last_known_time();
    }
}

function __staking_init() {
    _staking_set_rate_at(chain_context.args.staking_initial_reward_rate, _staking_last_known_time());
    create provider ( get_null_account(), system = true, provider_tier.NODE_PROVIDER, active = true );
}