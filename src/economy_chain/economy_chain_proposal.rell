@extend(apply_voting_result_handlers) function() = [ec_proposal_type.tag_create.name: apply_tag_create(*)];
@extend(apply_voting_result_handlers) function() = [ec_proposal_type.tag_update.name: apply_tag_update(*)];
@extend(apply_voting_result_handlers) function() = [ec_proposal_type.tag_remove.name: apply_tag_remove(*)];
@extend(apply_voting_result_handlers) function() = [ec_proposal_type.cluster_create.name: apply_cluster_create(*)];
@extend(apply_voting_result_handlers) function() = [ec_proposal_type.cluster_change_tag.name: apply_cluster_change_tag(*)];

function apply_tag_remove(proposal) {

    val pending_tag = pending_tag_operation @ { proposal };
    val tag = tag @ { pending_tag.name };

    log("Remove tag %s after approval".format(tag.name));

    val clusters = cluster @* { tag };
    require(clusters.empty(), "Tag with name %s is in use.".format(tag.name));

    delete tag;
}

function apply_tag_update(proposal) {

    val pending_tag = pending_tag_operation @ { proposal };
    val tag = tag @ { pending_tag.name };

    log("Update tag %s after approval".format(tag.name));

    if (pending_tag.scu_price != -1) tag.scu_price = pending_tag.scu_price;
    if (pending_tag.extra_storage_price != -1) tag.extra_storage_price = pending_tag.extra_storage_price;
}

function apply_tag_create(proposal) {

    val pending_tag = pending_tag_operation @ { proposal };

    log("Create tag %s after approval".format(pending_tag.name));

    create tag(name = pending_tag.name, scu_price = pending_tag.scu_price, extra_storage_price = pending_tag.extra_storage_price);
}

function apply_cluster_create(proposal) {

    val pending_cluster = pending_cluster @? { proposal };

    if (pending_cluster == null) {
        log("Received accepted cluster creation proposal with no pending_cluster. Proposal: %s".format(proposal));
    } else {

        val create_cluster_message = create_cluster_message(
            name = pending_cluster.name,
            governor_voter_set_name = pending_cluster.governor_voter_set_name,
            voter_set_name = pending_cluster.voter_set_name,
            cluster_units = pending_cluster.cluster_units,
            extra_storage = pending_cluster.extra_storage,
            proposer_pubkey = pending_cluster.proposer_pubkey);

        send_message(create_cluster_topic, create_cluster_message.to_gtv());

        pending_cluster.status = pending_cluster_status.PENDING_CREATION;

        log("Message sent to create cluster %s".format(pending_cluster.name));
    }
}

function apply_cluster_change_tag(proposal) {

    val pending_cluster_change_tag = pending_cluster_change_tag @ { proposal };

    log("Changing tag of cluster %s to %s after approval".format(pending_cluster_change_tag.cluster.name, pending_cluster_change_tag.tag.name));

    pending_cluster_change_tag.cluster.tag = pending_cluster_change_tag.tag;
}

@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [ec_proposal_type.tag_create.name: cleanup_pending_tag_operation(*)];
@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [ec_proposal_type.tag_update.name: cleanup_pending_tag_operation(*)];
@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [ec_proposal_type.tag_remove.name: cleanup_pending_tag_operation(*)];
@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [ec_proposal_type.cluster_create.name: cleanup_pending_cluster_create(*)];
@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [ec_proposal_type.cluster_change_tag.name: cleanup_pending_cluster_change_tag(*)];

function cleanup_pending_cluster_create(proposal) {

    val pending_cluster = pending_cluster @? { proposal };

    // Only cleanup if this was a revoke or a failed cluster creation
    if (pending_cluster != null and
        (pending_cluster.status == pending_cluster_status.PENDING_APPROVAL or
        pending_cluster.status == pending_cluster_status.FAILURE)
    ) {

        log("Revoked and removed pending cluster %s".format(pending_cluster.name));

        delete pending_cluster @ { proposal };
    }
}

function cleanup_pending_tag_operation(proposal) {

    log("Cleaning up pending_tag_operation");

    delete pending_tag_operation @ { proposal };
}

function cleanup_pending_cluster_change_tag(proposal) {

    log("Cleaning up pending_cluster_change_tag");

    delete pending_cluster_change_tag @ { proposal };
}
