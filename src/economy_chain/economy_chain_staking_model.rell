
// It might be better for this to live in a table
enum network {
    BSC, ETH, CHR
}

object _staking_state {
    mutable last_reward_distribution: integer = 0;
    mutable last_withdrawal_distribution: integer = 0;
}

entity staker_withdrawal_request {
    index finish_at: timestamp;
    index staker_state;
    index mutable active: boolean;
}

entity staker_state {
    key ft4.accounts.account, network;
    mutable balance: integer;
    mutable last_update: timestamp;
    mutable pending_token_time: integer;
}

entity staker_state_to_provider {
    index timestamp;
    index staker_state;
    provider;
}

entity reward_rate {
    index timestamp;
    rate: decimal;
}

entity staking_payment {
    index timestamp;
    amount: integer;
    ft4.accounts.account;
}

function _update_pending_token_time(staker_state) {
    update staker_state (
        pending_token_time = .balance * (_staking_last_known_time() - .last_update),
        last_update = _staking_last_known_time()
    );
}

function _update_pending_token_time_all() {
    update staker_state @* { } (
        pending_token_time = .balance * (_staking_last_known_time() - .last_update),
        last_update = _staking_last_known_time()
    );
}