query get_pool_balance(): big_integer = get_account_balance(get_pool_account());

query get_create_container_ticket_by_transaction(tx_rid: byte_array): container_ticket_data? =
        create_container_ticket @? { .ticket.transaction.tx_rid == tx_rid }
            (container_ticket_data(.ticket.rowid.to_integer(), .ticket.type, .ticket.state, error_message = .ticket.error_message, container_name = .container_name));

query get_create_container_ticket_by_id(ticket_id: integer): container_ticket_data? =
        create_container_ticket @? { .ticket.rowid == rowid(ticket_id) }
            (container_ticket_data(.ticket.rowid.to_integer(), .ticket.type, .ticket.state, error_message = .ticket.error_message, container_name = .container_name));

query get_upgrade_container_ticket_by_transaction(tx_rid: byte_array): container_ticket_data? =
        upgrade_container_ticket @? { .ticket.transaction.tx_rid == tx_rid }
            (container_ticket_data(.ticket.rowid.to_integer(), .ticket.type, .ticket.state, error_message = .ticket.error_message, container_name = .container_name));

query get_upgrade_container_ticket_by_id(ticket_id: integer): container_ticket_data? =
        upgrade_container_ticket @? { .ticket.rowid == rowid(ticket_id) }
            (container_ticket_data(.ticket.rowid.to_integer(), .ticket.type, .ticket.state, error_message = .ticket.error_message, container_name = .container_name));

query get_leases_by_account(account_id: byte_array): list<lease_data> =
        lease @* { .account.id == account_id } (lease_data(.container_name, .cluster_name, container_units = .container_units, extra_storage_gib = .extra_storage_gib, expire_time_millis = .start_time + .duration_millis, .expired, .auto_renew));

query get_lease_by_container_name(container_name: text): lease_data? =
        lease @? { container_name } (lease_data(.container_name, .cluster_name, container_units = .container_units, extra_storage_gib = .extra_storage_gib, expire_time_millis = .start_time + .duration_millis, .expired, .auto_renew));

query get_min_lease_duration(): integer = economy_constants.min_lease_time_weeks;

query get_max_lease_duration(): integer = economy_constants.max_lease_time_weeks;

query get_chr_asset() = ft4.assets.map_asset(get_asset());

query get_balance(account_id: byte_array): big_integer {
    val account = require(ft4.accounts.account @? { account_id }, "Account %s not found".format(account_id));
    return get_account_balance(account);
}

query get_provider_account_id(provider_pubkey: pubkey): byte_array? {
        val provider = require(provider @? { provider_pubkey }, "No provider found with pubkey %s".format(provider_pubkey));
        val account = provider_account @? { provider }.account;
        return account?.id;
}

query get_economy_constants(): economy_constants_data = economy_constants_data(
    min_lease_time_weeks = economy_constants.min_lease_time_weeks,
    max_lease_time_weeks = economy_constants.max_lease_time_weeks,
    chr_per_usd = economy_constants.chr_per_usd,
    dapp_scu_cost = economy_constants.dapp_scu_cost,
    dapp_extra_storage_cost = economy_constants.dapp_extra_storage_cost,
    dapp_bridge_chain_cost = economy_constants.dapp_bridge_chain_cost,
    scu_dapp_reward = economy_constants.scu_dapp_reward,
    extra_storage_reward = economy_constants.extra_storage_reward,
    system_node_reward = economy_constants.system_node_reward,
    bridge_chain_reward = economy_constants.bridge_chain_reward
);