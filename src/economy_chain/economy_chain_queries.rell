query get_tags(): list<tag_data> = tag @* {} (tag_data(.name, .scu_price, .extra_storage_price));

query get_tag_by_name(name): tag_data? = tag @? { name } (tag_data(.name, .scu_price, .extra_storage_price));

query get_pool_balance(): big_integer = get_account_balance(get_pool_account());

query get_create_container_ticket_by_transaction(tx_rid: byte_array): container_ticket_data? =
        create_container_ticket @? { .ticket.transaction.tx_rid == tx_rid }
            (container_ticket_data(.ticket.rowid.to_integer(), .ticket.type, .ticket.state, error_message = .ticket.error_message, container_name = .container_name));

query get_create_container_ticket_by_id(ticket_id: integer): container_ticket_data? =
        create_container_ticket @? { .ticket.rowid == rowid(ticket_id) }
            (container_ticket_data(.ticket.rowid.to_integer(), .ticket.type, .ticket.state, error_message = .ticket.error_message, container_name = .container_name));

query get_upgrade_container_ticket_by_transaction(tx_rid: byte_array): container_ticket_data? =
        upgrade_container_ticket @? { .ticket.transaction.tx_rid == tx_rid }
            (container_ticket_data(.ticket.rowid.to_integer(), .ticket.type, .ticket.state, error_message = .ticket.error_message, container_name = .container_name));

query get_upgrade_container_ticket_by_id(ticket_id: integer): container_ticket_data? =
        upgrade_container_ticket @? { .ticket.rowid == rowid(ticket_id) }
            (container_ticket_data(.ticket.rowid.to_integer(), .ticket.type, .ticket.state, error_message = .ticket.error_message, container_name = .container_name));

query get_leases_by_account(account_id: byte_array): list<lease_data> =
        lease @* { .account.id == account_id } (lease_data(container_name = .container_name, cluster_name = .cluster.name, container_units = .container_units, extra_storage_gib = .extra_storage_gib, expire_time_millis = .start_time + .duration_millis, .expired, .auto_renew));

query get_lease_by_container_name(container_name: text): lease_data? =
        lease @? { container_name } (lease_data(container_name = .container_name, cluster_name = .cluster.name, container_units = .container_units, extra_storage_gib = .extra_storage_gib, expire_time_millis = .start_time + .duration_millis, .expired, .auto_renew));

query get_min_lease_duration(): integer = economy_constants.min_lease_time_weeks;

query get_max_lease_duration(): integer = economy_constants.max_lease_time_weeks;

query get_chr_asset() = ft4.assets.map_asset(get_asset());

query get_balance(account_id: byte_array): big_integer {
    val account = require(ft4.accounts.account @? { account_id }, "Account %s not found".format(account_id));
    return get_account_balance(account);
}

query get_provider_account_id(provider_pubkey: pubkey): byte_array? {
    val provider = require(provider @? { provider_pubkey }, "No provider found with pubkey %s".format(provider_pubkey));
    val account = provider_account @? { provider }.account;
    return account?.id;
}

query get_economy_constants(): economy_constants_data = economy_constants_data(
    min_lease_time_weeks = economy_constants.min_lease_time_weeks,
    max_lease_time_weeks = economy_constants.max_lease_time_weeks,
    chr_per_usd = economy_constants.chr_per_usd,
    total_cost_system_providers = economy_constants.total_cost_system_providers,
    system_provider_fee_share = economy_constants.system_provider_fee_share,
    staking_reward_fee_share = economy_constants.staking_reward_fee_share,
    chromia_foundation_fee_share = economy_constants.chromia_foundation_fee_share,
    resource_pool_margin_fee_share = economy_constants.resource_pool_margin_fee_share,
    system_provider_risk_share = economy_constants.system_provider_risk_share,
    dapp_provider_risk_share = economy_constants.dapp_provider_risk_share
);

query get_clusters(): list<cluster_data> {
    return cluster @* {} (
        cluster_data(
            name = .name,
            tag_name = .tag.name
        ));
}

query get_cluster_by_name(name): cluster_data? = cluster @? { name } (
    cluster_data(
        name = .name,
        tag_name = .tag.name
    )
);

query get_cluster_creation_status(name): cluster_creation_status {
    var status = cluster_creation_status.SUCCESS;
    val cluster = cluster @? { name };
    if (cluster == null) {
        val pending_cluster = pending_cluster @? { name };
        if (pending_cluster == null) {
            status = cluster_creation_status.UNKNOWN;
        } else if (pending_cluster.status == pending_cluster_status.PENDING_APPROVAL) {
            status = cluster_creation_status.PENDING_APPROVAL;
        } else if (pending_cluster.status == pending_cluster_status.PENDING_CREATION) {
            status = cluster_creation_status.PENDING_CREATION;
        } else if (pending_cluster.status == pending_cluster_status.FAILURE) {
            status = cluster_creation_status.FAILURE;
        }
    }
    return status;
}

query get_provider_performance_metrics(pubkey, start: timestamp): provider_performance_metrics {
    val provider = require_provider(pubkey);
    val provider_nodes = node @* { provider } ( .pubkey );

    val availabilities = get_provider_availabilities(provider_nodes, start);
    val payed_rewards = get_provider_payed_rewards(provider_nodes, start);

    return provider_performance_metrics(
        availabilities,
        payed_rewards
    );
}

query get_provider_performance_metrics_last_7_days(pubkey): provider_performance_metrics {
    return get_provider_performance_metrics(pubkey, get_last_blocktime() - millis_per_week);
}

query get_provider_performance_metrics_last_30_days(pubkey): provider_performance_metrics {
    return get_provider_performance_metrics(pubkey, get_last_blocktime() - millis_per_month);
}

query get_provider_performance_metrics_last_365_days(pubkey): provider_performance_metrics {
    return get_provider_performance_metrics(pubkey, get_last_blocktime() - millis_per_year);
}

query get_economy_metrics(pubkey): economy_metrics {
    val provider = require_provider(pubkey);
    val provider_nodes = node @* { provider };
    val provider_nodes_pubkeys = node @* { provider } ( .pubkey );

    val average_availability_on_a_providers_nodes = get_average_availability_on_a_providers_nodes_in_the_last_24h(provider_nodes_pubkeys);
    val total_number_of_nodes_per_provider = get_total_number_of_nodes_per_provider(provider_nodes);
    val total_number_of_scus_per_provider = get_total_number_of_scus_per_provider(provider_nodes);
    val average_occupancy_rate_of_a_providers_scus = get_average_occupancy_rate_of_a_providers_scus(provider_nodes);
    val amount_of_the_last_reward_payout = get_total_reward_payed_in_the_last_24h(provider_nodes_pubkeys);

    return economy_metrics(
        average_availability_on_a_providers_nodes,
        total_number_of_nodes_per_provider,
        total_number_of_scus_per_provider,
        average_occupancy_rate_of_a_providers_scus,
        amount_of_the_last_reward_payout
    );
}

function get_average_availability_on_a_providers_nodes_in_the_last_24h(provider_nodes: list<pubkey>): decimal {
    val provider_availabilities = get_provider_availabilities(provider_nodes, get_last_blocktime() - millis_per_day);
    val number_of_availabilities = provider_availabilities.size();
    var total_availability = 0.0;
    for (availability in provider_availabilities) {
        total_availability += availability.availability;
    }
    return if (number_of_availabilities != 0 ) total_availability / number_of_availabilities  else 0.0;
}

function get_provider_availabilities(provider_nodes: list<pubkey>, start: timestamp): list<provider_availability> {
    val result = list<provider_availability>();
    val availabilities = node_availability @* { .node in provider_nodes  and .end_time >= start } (
        @group .start_time, @group .end_time, @sum node_count = 1, @sum availability_sum = .availability
    );
    for (availability in availabilities) {
        val provider_availability_average = availability.availability_sum / availability.node_count;
        result.add(provider_availability(availability = provider_availability_average, start_time = availability.start_time, end_time = availability.end_time));
    }
    return result;
}

function get_total_number_of_nodes_per_provider(provider_nodes: list<node>): integer {
    return provider_nodes.size();
}

function get_total_number_of_scus_per_provider(provider_nodes: list<node>): integer {
    var provider_nodes_total_cluster_units = 0;
    for (node in provider_nodes) {
        provider_nodes_total_cluster_units += node.cluster_units;
    }
    return provider_nodes_total_cluster_units * standard_cluster_unit.container_units;
}

function get_average_occupancy_rate_of_a_providers_scus(provider_nodes: list<node>): decimal {
    var occupancy_rate = 0.0;
    for (node in provider_nodes) {
        val cluster = cluster_node @ { node } ( .cluster );
        occupancy_rate += occupancy_rate(cluster);
    }
    return occupancy_rate / provider_nodes.size();
}

function get_total_reward_payed_in_the_last_24h(provider_nodes: list<pubkey>) {
    val provider_payed_rewards = get_provider_payed_rewards(provider_nodes, get_last_blocktime() - millis_per_day);
    var total_reward = 0L;
    for (provider_payed_reward in provider_payed_rewards) {
        total_reward += provider_payed_reward.value;
    }
    return total_reward;
}

function get_provider_payed_rewards(provider_nodes: list<pubkey>, start: timestamp): list<provider_payed_reward> {
    val result = list<provider_payed_reward>();
    val provider_payed_rewards = node_payed_reward @* { .node in provider_nodes and .time >= start }
        ( @group .time, @sum total_reward = .value );
    for (provider_payed_reward in provider_payed_rewards) {
        result.add(provider_payed_reward(provider_payed_reward.time, provider_payed_reward.total_reward));
    }
    return result;
}

query get_tag_proposal(proposal_id: rowid): tag_data {

    val proposal = require_common_proposal(proposal_id);
    val pending_tag_operation = require(pending_tag_operation @? { proposal }, "Proposal is of different type: %s".format(proposal.proposal_type));

    return tag_data(name = pending_tag_operation.name, scu_price = pending_tag_operation.scu_price, extra_storage_price = pending_tag_operation.extra_storage_price);
}

query get_cluster_create_proposal(proposal_id: rowid): pending_cluster_data {

    val proposal = require_common_proposal(proposal_id);
    val pending_cluster = pending_cluster @ { proposal };

    return pending_cluster_data(
        name = pending_cluster.name,
        tag = pending_cluster.tag.name,
        proposer_pubkey = pending_cluster.proposer_pubkey,
        governor_voter_set_name = pending_cluster.governor_voter_set_name,
        voter_set_name = pending_cluster.voter_set_name,
        cluster_units = pending_cluster.cluster_units,
        extra_storage = pending_cluster.extra_storage,
        status = pending_cluster.status
    );
}

query get_cluster_change_tag_proposal(proposal_id: rowid) {

    val proposal = require_common_proposal(proposal_id);
    val pending_cluster_change_tag = pending_cluster_change_tag @ { proposal };

    return pending_cluster_change_tag_data(
        cluster = pending_cluster_change_tag.cluster.name,
        current_tag = pending_cluster_change_tag.cluster.tag.name,
        new_tag = pending_cluster_change_tag.tag.name
    );
}

query get_econony_constants_proposal(proposal_id: rowid) {

    val proposal = require_common_proposal(proposal_id);
    val pending_economy_constants = pending_economy_constants @ { proposal };

    return pending_economy_constants_data(
        min_lease_time_weeks = get_integer_or_default(pending_economy_constants.min_lease_time_weeks, null),
        max_lease_time_weeks = get_integer_or_default(pending_economy_constants.max_lease_time_weeks, null),
        staking_reward_fee_share = get_decimal_or_default(pending_economy_constants.staking_reward_fee_share, null),
        chromia_foundation_fee_share = get_decimal_or_default(pending_economy_constants.chromia_foundation_fee_share, null),
        resource_pool_margin_fee_share = get_decimal_or_default(pending_economy_constants.resource_pool_margin_fee_share, null),
        dapp_provider_risk_share = get_decimal_or_default(pending_economy_constants.dapp_provider_risk_share, null)
    );
}

query get_bridge_lease_for_blockchain(blockchain_rid: byte_array, evm_network_id: integer) = bridge_lease @? { blockchain_rid, evm_network_id } (
    bridge_lease_data(
        blockchain_rid = blockchain_rid,
        evm_network_id = evm_network_id,
        container_name = .lease.container_name,
        expired = .lease.expired,
        validator_contract = .validator_contract,
        bridge_contract = .bridge_contract
    )
);

query get_all_bridge_leases_for_blockchain(blockchain_rid: byte_array) = bridge_lease @* { blockchain_rid } (
    bridge_lease_data(
        blockchain_rid = blockchain_rid,
        evm_network_id = .evm_network_id,
        container_name = .lease.container_name,
        expired = .lease.expired,
        validator_contract = .validator_contract,
        bridge_contract = .bridge_contract
    )
);

query get_all_bridge_leases_for_container(container_name: text) = (bridge_lease, lease) @* { lease.container_name == container_name, bridge_lease.lease == lease } (
    bridge_lease_data(
        blockchain_rid = .blockchain_rid,
        evm_network_id = .evm_network_id,
        container_name = container_name,
        expired = .lease.expired,
        validator_contract = .validator_contract,
        bridge_contract = .bridge_contract
    )
);

query get_blockchains_with_bridge_and_anomaly_detection() = bridge_lease @* { .anomaly_detection } (
    bridge_anomaly_detector_data(
        blockchain_rid = .blockchain_rid,
        evm_network_id = .evm_network_id,
        bridge_contract = .bridge_contract
    )
);

function get_integer_or_default(value: integer?, default: integer?): integer? {
    if (value != null and value >= 0) {
        return value;
    }
    return default;
}

function get_decimal_or_default(value: decimal?, default: decimal?): decimal? {
    if (value != null and value >= 0) {
        return value;
    }
    return default;
}

function get_last_blocktime(){
    return block @ {} (@max .timestamp) ?: 0;
}
