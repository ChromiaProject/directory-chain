module;

import ^^.*;
import ^^^.test.helper_operations;

operation create_test_proposal(
    proposal_type: ec_proposal_type,
    provider,
    voter_set_name: text
) {
    var voter_set = create_or_return_voter_set(voter_set_name);
    create_voter_set_member(voter_set, provider);
    create proposal(op_context.last_block_time, proposal_type, provider, voter_set);
}

function create_or_return_voter_set(voter_set_name: text) {
    var voter_set = voter_set @? { voter_set_name };
    if (voter_set == null) {
        voter_set = create voter_set(voter_set_name);
    }
    return voter_set;
}

function create_or_return_tag(tag_name: text) {
    var tag = tag @? { tag_name };
    if (tag == null) {
        tag = create tag(tag_name, scu_price = 1, extra_storage_price = 1);
    }
    return tag;
}

function create_or_return_provider(pubkey, system: boolean) {
    var provider = provider @? { pubkey };
    if (provider == null) {
        provider = create provider(pubkey, system = system, provider_tier.NODE_PROVIDER, active = true);
    }
    return provider;
}

operation create_voter_set_op(name: text) {
    create_or_return_voter_set(name);
}

operation create_or_return_provider_op(pubkey, system: boolean) {
    create_or_return_provider(pubkey, system);
}

operation create_voter_set_member_op(voter_set, provider) {

    create_voter_set_member(voter_set, provider);
}

operation create_proposal_op(proposal_type: ec_proposal_type, voter_set_name: text) {

    val voter_set = create_or_return_voter_set(voter_set_name);
    val provider = create_or_return_provider(x"", true);

    create proposal(op_context.last_block_time, proposal_type, provider, voter_set);
}

function create_proposal(proposal_type: ec_proposal_type, voter_set_name: text = "voter-set") {

    val voter_set = create_or_return_voter_set(voter_set_name);
    val provider = create_or_return_provider(x"", true);

    return create proposal(op_context.last_block_time, proposal_type, provider, voter_set);
}

function create_voter_set_member(voter_set, provider) {
    create voter_set_member(voter_set, provider);
}
