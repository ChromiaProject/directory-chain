module;

import messaging.economy_chain.*;
import messaging.bridge_mapping.*;
import messaging.node_availability_reporting.*;
import messaging.blockchain_rid.*;
import messaging.evm_transaction_submitter_cost.*;
import messaging.icmf.*;
import messaging.icmf.receiver.*;
import .ec_proposal.*;
import constants.*;

namespace eif {
    import event_receiver: lib.eif_event_receiver_chain.messaging.*;
    import messaging: lib.eif.messaging;
    import lib.eif.main;
}

import lib.auth;
import lib.eif_ft4;

namespace ft4 {
    import lib.ft4.accounts;
    import lib.ft4.assets;
    import lib.ft4.auth;
    import lib.ft4.version;
}

struct module_args {
    asset_name: text;
    asset_symbol: text;
    asset_icon: text;
    asset_decimals: integer;
    amount_to_mint: big_integer;
    pool_amount_to_mint: big_integer;
    pool_account_pubkey: pubkey;
    evm_asset_network_id: integer;
    evm_asset_address: byte_array;
    evm_asset_name: text;
    evm_asset_symbol: text;
    evm_asset_decimals: integer;
    chromia_foundation_account_pubkey: pubkey;
    admin_pubkey: pubkey;
    staking_initial_reward_rate: decimal;
    staking_rate_change_delay_ms: integer;
    staking_withdrawal_delay_ms: integer;
    staking_delegation_delay_ms: integer;
    staking_payout_interval_ms: integer;
    test_chr_refill_limit_millis: integer;
    test_chr_pool_refill_limit_millis: integer;
    max_bridge_leases_per_container: integer;
    evm_transaction_submitters_bonus: decimal;
    default_providers: gtv;
}

// Rell does not have a power function/operator
val units_per_asset = integer("1" + "0".repeat(chain_context.args.asset_decimals));

val millis_per_day = 24 * 60 * 60 * 1000;
val millis_per_week = 7 * millis_per_day;
val millis_per_month = 30 * millis_per_day;
val millis_per_year = 365 * millis_per_day;

operation init() {
    require(state.initialized == false, "Economy chain is already initialized");
    state.initialized = true;

    register_assets();

    create_pool_account();

    create_chromia_foundation_account();

    __staking_init();

    create_evm_asset_link();

    log("Economy chain was initialized");
}

operation __begin_block(height: integer) {
    if (state.initialized) {
        if (not try_call(expire_leases(op_context.last_block_time, *))) log("Failed lease expiry.");
        if (not try_call(__staking_begin_block(height, *))) log("Failed staking payout.");
    }
}

function require_initialized() {
    require(state.initialized == true, "Economy chain is not initialized");
}

function require_pubkey(pubkey) {
    require(pubkey.size() == 33 or pubkey.size() == 65 or pubkey.size() == 1336, "Value is not pubkey: " + pubkey);
}

function require_is_signer(pubkey) {
    require(op_context.is_signer(pubkey), "Operation must be signed by " + pubkey);
}

