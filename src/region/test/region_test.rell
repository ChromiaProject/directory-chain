@test module;

import ^.helpers.*;
import ^^^.direct_cluster.*;
import ^^^.common.operations.*;
import ^^^.common.test.setup.*;
import ^^^.common.test.util.*;
import ^^^.proposal_provider.*;

function test_cluster_is_not_in_region() {
    setup_module();

    rell.test.tx().op(
        init_region_data()
    ).run();

    rell.test.tx().op(
        register_provider(initial_provider.pub, rell.test.pubkeys.bob, provider_tier.NODE_PROVIDER),
        propose_provider_state(initial_provider.pub, rell.test.pubkeys.bob, true),
        create_cluster(initial_provider.pub, "cluster1", voter_sets.system_p, [initial_provider.pub, rell.test.pubkeys.bob]),
        register_node_with_territory_and_units(initial_provider.pub, rell.test.pubkeys.charlie, "host", 7777, "http://host/api_url", "SE", 1, ["cluster1"]),
        register_node_with_territory_and_units(rell.test.pubkeys.bob, rell.test.pubkeys.grace, "host", 7777, "http://host/api_url", "GB", 1, ["cluster1"])
    ).sign(initial_provider, rell.test.keypairs.bob).run();

    val cluster = cluster @ { .name == "cluster1" };
    val region = region @ { .name == "EU" };

    assert_false(is_cluster_in_region(cluster, region));
}

function test_cluster_is_in_region() {
    setup_module();

    rell.test.tx().op(
        init_region_data()
    ).run();

    rell.test.tx().op(
        register_provider(initial_provider.pub, rell.test.pubkeys.bob, provider_tier.NODE_PROVIDER),
        propose_provider_state(initial_provider.pub, rell.test.pubkeys.bob, true),
        create_cluster(initial_provider.pub, "cluster1", voter_sets.system_p, [initial_provider.pub, rell.test.pubkeys.bob]),
        register_node_with_territory_and_units(initial_provider.pub, rell.test.pubkeys.charlie, "host", 7777, "http://host/api_url", "SE", 1, ["cluster1"]),
        register_node_with_territory_and_units(rell.test.pubkeys.bob, rell.test.pubkeys.grace, "host", 7777, "http://host/api_url", "FI", 1, ["cluster1"])
    ).sign(initial_provider, rell.test.keypairs.bob).run();

    val cluster = cluster @ { .name == "cluster1" };
    val region = region @ { .name == "EU" };

    assert_true(is_cluster_in_region(cluster, region));
}
