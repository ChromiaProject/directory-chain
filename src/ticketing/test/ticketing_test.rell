@test module;

import ^^^.common.operations.*;
import ^^^.common.test.setup.*;
import ^^^.common.test.util.*;
import ^^^.direct_cluster.*;
import ^^.*;
import ^.helpers.*;

function test_init_ticketing() {
    setup_module();

    assert_equals(ticket_chain.rid, x"");

    val conf = ["config_consensus_strategy": "HEADER_HASH".to_gtv()];

    rell.test.tx().op(
        init_ticketing(initial_provider.pub, conf.to_gtv().to_bytes())
    ).sign(initial_provider).run();
    assert_not_equals(ticket_chain.rid, x"");
    val bc = blockchain @ { .name == ticket_chain_name };
    assert_equals(bc.state, blockchain_state.RUNNING);
    assert_true(bc.system);
    assert_equals(bc.rid, ticket_chain.rid);
    assert_not_null(container_blockchain @? { bc, .container.cluster.name == clusters.system });

    conf["nonce"] = "whatever".to_gtv();
    rell.test.tx().op(
        init_ticketing(initial_provider.pub, conf.to_gtv().to_bytes())
    ).sign(initial_provider).run_must_fail("Ticket chain is already started");
    assert_not_equals(ticket_chain.rid, x"");
}

function test_create_container_with_auto_create_provider() {
    setup_module();

    val test_provider = rell.test.keypairs.bob;
    val cluster_name = "Bob's cluster";
    val cluster_quota = cluster_quota_data(cluster_units = 12, extra_storage = 1024);
    val register_node_data = register_node_data(
        rell.test.pubkeys.charlie, host = "host", port = 7777, api_url = "http://host/api_url", ["Bob's cluster"],
        cluster_units = 12, extra_storage = 1024
    );

    rell.test.tx().op(
        create_cluster_with_cluster_quota_data(initial_provider.pub, cluster_name, system_voter_set().name, [initial_provider.pub], cluster_quota),
        register_node_with_node_data(initial_provider.pub, register_node_data)
    ).sign(initial_provider).run();
    val bob_cluster = cluster @ { cluster_name };

    assert_null(provider @? { test_provider.pub });

    rell.test.tx().op(
        create_container_op(create_container_message(
            ticket_id = 1,
            pubkey = test_provider.pub,
            container_units = 1,
            cluster_class = "",
            extra_storage = 0
        ).to_gtv())).run();
    val container1 = container @ { bob_cluster, .system == false };
    assert_events(("icmf_message", (
        topic = ticket_result_topic,
        body = ticket_result_message(1, error_message = null, container_name = container1.name).to_gtv(),
        block_height = 2).to_gtv_pretty()
    ));

    assert_not_null(provider @? { test_provider.pub });

    rell.test.tx().op(
        create_container_op(create_container_message(
            ticket_id = 2,
            pubkey = test_provider.pub,
            container_units = 2,
            cluster_class = "",
            extra_storage = 1024
        ).to_gtv())).run();
    val container2 = container @ { bob_cluster, .system == false, .name != container1.name };
    assert_events(("icmf_message", (
        topic = ticket_result_topic,
        body = ticket_result_message(2, error_message = null, container_name = container2.name).to_gtv(),
        block_height = 3).to_gtv_pretty()
    ));

    val container_scu_limit = container_resource_limit @ { container2, .container_resource_limit_type == container_resource_limit_type.container_units }.value;
    assert_equals(container_scu_limit, 2);

    val container_extra_storage_limit = container_resource_limit @ { container2, .container_resource_limit_type == container_resource_limit_type.extra_storage }.value;
    assert_equals(container_extra_storage_limit, 1024);

    assert_not_null(provider @? { test_provider.pub });
}

function test_create_container_fail() {
    setup_module();

    val test_provider = rell.test.keypairs.bob;
    val cluster_name = "Bob's cluster";

    rell.test.tx().op(
        create_cluster(initial_provider.pub, cluster_name, system_voter_set().name, [initial_provider.pub]),
        register_node_with_territory_and_units(initial_provider.pub, rell.test.pubkeys.charlie, "host", 7777, "http://host/api_url", "SE", 1, ["Bob's cluster"])
    ).sign(initial_provider).run();
    val bob_cluster = cluster @ { cluster_name };

    rell.test.tx().op(
        create_container_op(create_container_message(
            ticket_id = 1,
            pubkey = test_provider.pub,
            container_units = 1,
            cluster_class = "2::",
            extra_storage = 0
        ).to_gtv())).run();

    assert_events(("icmf_message", (
        topic = ticket_result_topic,
        body = ticket_result_message(1, error_message = "Unable to find suitable cluster", container_name = "").to_gtv(),
        block_height = 2).to_gtv_pretty()
    ));

    assert_not_null(provider @? { test_provider.pub });
}
