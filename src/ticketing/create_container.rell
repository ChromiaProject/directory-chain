import ^.common;
import ^.messaging.icmf.*;
import ^.messaging.ticketing.*;

@extend(common.receive_icmf_message) function receive_create_container(sender: byte_array, topic: text, body: gtv) {
    if (topic != create_container_topic) return;

    if (sender != ticket_chain.rid) {
        log("Sender %s is not the ticket chain, ignoring".format(sender));
        return;
    }

    receive_create_container_impl(body);
}

function receive_create_container_impl(body: gtv) {
    val message = create_container_message.from_gtv(body);

    val container_cluster_names = try_call(create_container_from_ticket(
        provider_pubkey = message.provider_pubkey,
        container_units = message.container_units,
        cluster_class = message.cluster_class,
        extra_storage = message.extra_storage,
        cluster_name = message.cluster_name,
        *));

    val error_message = if (container_cluster_names == null)
        "Unexpected error"
    else if (container_cluster_names.container_name.empty())
        "Unable to find suitable cluster"
    else null;
    send_message(ticket_result_topic, ticket_result_message(
        ticket_id = message.ticket_id,
        error_message = error_message,
        container_name = container_cluster_names?.container_name,
        cluster_name = container_cluster_names?.cluster_name
    ).to_gtv());
}
