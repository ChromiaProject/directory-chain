
@extend(receive_icmf_message) function receive_create_container(sender: byte_array, topic: text, body: gtv) {
    if (topic != create_container_topic) return;

    if (sender != ticket_chain.rid) {
        log("Sender %s is not the ticket chain, ignoring".format(sender));
        return;
    }

    receive_create_container_impl(body);
}

function receive_create_container_impl(body: gtv) {
    val message = create_container_message.from_gtv(body);

    val container_cluster_names = try_call(create_container_from_ticket(
        provider_pubkey = message.provider_pubkey,
        container_units = message.container_units,
        cluster_class = message.cluster_class,
        extra_storage = message.extra_storage,
        cluster_name = message.cluster_name,
        *));

    val error_message = if (container_cluster_names == null)
        "Unexpected error"
    else if (container_cluster_names.container_name.empty())
        "Unable to find suitable cluster"
    else null;
    send_message(ticket_container_result_topic, ticket_container_result_message(
        ticket_id = message.ticket_id,
        error_message = error_message,
        container_name = container_cluster_names?.container_name,
        cluster_name = container_cluster_names?.cluster_name,
        cluster_class = container_cluster_names?.cluster_class
    ).to_gtv());
}

function create_container_from_ticket(
    provider_pubkey: pubkey,
    container_units: integer,
    cluster_class: text,
    extra_storage: integer,
    cluster_name: text
): (container_name: text, cluster_name: text, cluster_class: text) {
    require_pubkey(provider_pubkey);
    require(not cluster_name.empty() or not cluster_class.empty(), "Cluster name and/or cluster class must be specified");

    val provider = create_provider_if_not_exist(provider_pubkey);

    val clusters = cluster @* { cluster.name != clusters.system, .operational };
    for (cluster in clusters) {
        val available_container_units = get_available_container_units(cluster);
        val available_extra_storage = get_available_extra_storage(cluster);
        if (available_container_units >= container_units
            and available_extra_storage >= extra_storage
            and (cluster_name.empty() or cluster_name == cluster.name)
            and (cluster_class.empty() or cluster_class == cluster.cluster_class)
        ) {
            val container = create_container_in_cluster(provider, cluster, container_units, extra_storage);
            return (container_name = container.name, cluster_name = cluster.name, cluster_class = cluster.cluster_class);
        }
    }
    return (container_name = "", cluster_name = "", cluster_class = "");
}

function create_container_in_cluster(provider, cluster, container_units: integer, extra_storage: integer): container {
    val name = [cluster.to_gtv(), provider.pubkey.to_gtv(), op_context.transaction.tx_rid.to_gtv()].hash().to_hex();
    return create_container_impl(
        provider, name, cluster, 1, [provider.pubkey],
        container_units,
        standard_container_defaults.max_blockchains,
        extra_storage
    );
}