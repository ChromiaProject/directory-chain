@test module;

import ^^.*;
import common.test.ops.*;
import common.test.setup.*;
import common.test.util.*;
import proposal.voting.test.ops.*;
import proposal_blockchain.*;
import proposal_container.*;
import direct_container.*;
import nm_api.*;

function test_propose_import_blockchain() {
    setup_module();
    val foreign_node = rell.test.keypairs.bob;
    val foreign_chain0 = "foreign_chain0".to_gtv().hash();

    val container = system_container_name(clusters.system);
    val conf = ["config_consensus_strategy": "HEADER_HASH".to_gtv(),
        "blockstrategy": ["mininterblockinterval": (1000).to_gtv()].to_gtv(),
        "signers": [foreign_node.pub].to_gtv(), "serial": (0).to_gtv()];
    val brid = conf.hash();

    // Asserting that blockchain_configuration_options through NM API is null for unknown blockchain
    val options = nm_get_blockchain_configuration_options(brid, 0);
    assert_true(empty(options));

    // Step 1: proposing foreign blockchain import, blockchain will be created in IMPORTING state
    rell.test.tx().op(
        propose_foreign_blockchain_import(
            initial_provider.pub,
            foreign_node.pub, "node0.foreign", 9870, "http://node0.foreign:7740/", foreign_chain0,
            "foo_chain", brid, conf.to_gtv().to_bytes(), container
        )
    ).sign(initial_provider).run();
    val bc = blockchain @? { brid };
    assert_not_null(bc);
    assert_equals(bc.state, blockchain_state.IMPORTING);
    assert_true(exists(blockchain_configuration @? { bc, 0 }));
    assert_true(exists(blockchain_configuration_signers @? { bc, 0 }));
    assert_true(exists(blockchain_configuration_options @? { bc, 0 }));
    assert_equals(blockchain_configuration_options @ { bc, 0 } ( .suppress_special_transaction_validation ), true);
    // NM API request
    val options0 = nm_get_blockchain_configuration_options(bc.rid, 0);
    assert_true(exists(options0));
    assert_true(options0!!.suppress_special_transaction_validation);
    // fbi object
    val fbi = importing_foreign_blockchain @? { .pubkey == foreign_node.pub };
    assert_true(exists(fbi));
    val fbi0 = fbi!!;
    assert_equals(
        (fbi0.pubkey, fbi0.host, fbi0.port, fbi0.api_url, fbi0.chain0_rid, fbi0.blockchain_rid, fbi0.final_height).to_gtv(),
        (foreign_node.pub, "node0.foreign", 9870, "http://node0.foreign:7740/", foreign_chain0, brid, -1).to_gtv()
    );

    // proposing a new config
    conf["serial"] = (10).to_gtv();
    rell.test.tx().op(
        propose_import_configuration(initial_provider.pub, brid, 10, conf.to_gtv().to_bytes())
    ).sign(initial_provider).run();
    assert_true(exists(blockchain_configuration @? { bc, 10 }));
    assert_true(exists(blockchain_configuration_signers @? { bc, 10 }));
    assert_equals((blockchain_configuration_options @* { bc }) .size(), 1);
    assert_equals(blockchain_configuration_options @ { bc, 0 } ( .suppress_special_transaction_validation ), true);
    // NM API request
    val options10 = nm_get_blockchain_configuration_options(bc.rid, 10);
    assert_true(exists(options10));
    assert_true(options10!!.suppress_special_transaction_validation);

    // proposing a new config at same height
    conf["serial"] = (11).to_gtv();
    rell.test.tx().op(
        propose_import_configuration(initial_provider.pub, brid, 10, conf.to_gtv().to_bytes())
    ).sign(initial_provider).run_must_fail("Configuration at height 10 already exists for blockchain");

    // proposing a new config without signers
    val conf2 = ["config_consensus_strategy": "HEADER_HASH".to_gtv(),
        "blockstrategy": ["mininterblockinterval": (1000).to_gtv()].to_gtv(), "serial": (100).to_gtv()];
    rell.test.tx().op(
        propose_import_configuration(initial_provider.pub, brid, 11, conf2.to_gtv().to_bytes())
    ).sign(initial_provider).run_must_fail("No signers in configuration");

    // importing exiting blockchain
    rell.test.tx().op(
        propose_foreign_blockchain_import(
            initial_provider.pub,
            foreign_node.pub, "node1.foreign", 9870, "http://node1.foreign:7740/", foreign_chain0,
            "bar_chain", brid, conf.to_gtv().to_bytes(), container
        )
    ).sign(initial_provider).run_must_fail("already exists");

    // unarchiving moving blockchain at step 1
    rell.test.tx().op(
        propose_blockchain_unarchive_action(initial_provider.pub, brid, "container", 0)
    ).sign(initial_provider).run_must_fail("Importing blockchain can't be unarchived");

    // Step 2: proposing foreign blockchain blocks import
    /// final_height < last_config_height
    rell.test.tx().op(
        propose_foreign_blockchain_blocks_import(initial_provider.pub, brid, 9)
    ).sign(initial_provider).run_must_fail("Given height 9 must be greater than or equal to the last config height 10 for blockchain");
    /// final_height == last_config_height
    rell.test.tx().op(
        propose_foreign_blockchain_blocks_import(initial_provider.pub, brid, 10)
    ).sign(initial_provider).run();
    assert_equals(bc.state, blockchain_state.RUNNING);
    assert_true(exists(blockchain_configuration_signers @? { bc, 10 }));
    assert_equals(fbi.final_height, 10);
    assert_equals((blockchain_configuration_options @* { bc }) .size(), 2);
    assert_equals(blockchain_configuration_options @ { bc, 11 } ( .suppress_special_transaction_validation ), false);
    // NM API request
    val options11 = nm_get_blockchain_configuration_options(bc.rid, 11);
    assert_true(exists(options11));
    assert_false(options11!!.suppress_special_transaction_validation);

    // proposing a new config import for a running blockchain
    conf["serial"] = (12).to_gtv();
    rell.test.tx().op(
        propose_import_configuration(initial_provider.pub, brid, 12, conf.to_gtv().to_bytes())
    ).sign(initial_provider).run_must_fail("Blockchain must be in IMPORTING state to import configurations");

    // The following cases can not be tested due to limitations of Rell Test Framework
    /// Imitating that ICMF configuration_update message is processed by chain0 and foreign_blockchain_import is finished
    /// delete fbi;
    /// 1. Proposing foreign blockchain blocks import for blockchain not being imported / already imported
    /// 2. Proposing foreign blockchain import finishing for blockchain not being imported / already imported

    // Asserting that other requirements are honored
    // importing blockchain to a full container
    val limits = map<container_resource_limit_type, integer>();
    limits[container_resource_limit_type.max_blockchains] = 2;
    conf["serial"] = (13).to_gtv();
    val brid2 = conf.hash();
    val foreign_node2 = rell.test.keypairs.charlie;
    rell.test.tx().op(
        propose_container_limits(initial_provider.pub, container, limits),
        propose_foreign_blockchain_import(
            initial_provider.pub,
            foreign_node2.pub, "node3.foreign", 9870, "http://node3.foreign:7740/", foreign_chain0,
            "foobar_chain", brid2, conf.to_gtv().to_bytes(), container
        )
    ).sign(initial_provider).run_must_fail("Can't add blockchain, container system is full");

    // importing blockchain without signers
    conf.remove_or_null("signers");
    rell.test.tx().op(
        propose_foreign_blockchain_import(
            initial_provider.pub,
            foreign_node2.pub, "node3.foreign", 9870, "http://node3.foreign:7740/", foreign_chain0,
            "foobar_chain", brid2, conf.to_gtv().to_bytes(), container
        )
    ).sign(initial_provider).run_must_fail("No signers in configuration");
}
