@test module;

import ^^.*;
import common.test.ops.*;
import common.test.setup.*;
import common.test.util.*;
import proposal.voting.test.ops.*;
import proposal_blockchain.*;
import proposal_container.*;
import direct_container.*;

function test_propose_import_blockchain() {
    setup_module();

    val container = system_container_name(clusters.system);
    val conf = ["config_consensus_strategy": "HEADER_HASH".to_gtv(),
        "blockstrategy": ["mininterblockinterval": (1000).to_gtv()].to_gtv(),
        "signers": [initial_provider.pub].to_gtv(), "serial": (0).to_gtv()];
    val brid = conf.hash();

    // proposing import, blockchain will be created in IMPORTING state
    rell.test.tx().op(
        propose_import_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), brid, "foo_chain", container)
    ).sign(initial_provider).run();
    val bc = blockchain @? { brid };
    assert_not_null(bc);
    assert_equals(bc.state, blockchain_state.IMPORTING);
    assert_true(exists(blockchain_configuration @? { bc, 0 }));
    assert_true(exists(blockchain_configuration_signers @? { bc, 0 }));

    // proposing a new config
    conf["serial"] = (10).to_gtv();
    rell.test.tx().op(
        propose_import_configuration(initial_provider.pub, brid, 10, conf.to_gtv().to_bytes())
    ).sign(initial_provider).run();
    assert_true(exists(blockchain_configuration @? { bc, 10 }));
    assert_true(exists(blockchain_configuration_signers @? { bc, 10 }));

    // proposing a new config at same height
    conf["serial"] = (11).to_gtv();
    rell.test.tx().op(
        propose_import_configuration(initial_provider.pub, brid, 10, conf.to_gtv().to_bytes())
    ).sign(initial_provider).run_must_fail("Configuration at height 10 already exists for blockchain");

    // proposing a new config without signers
    val conf_no_signers = ["config_consensus_strategy": "HEADER_HASH".to_gtv(),
        "blockstrategy": ["mininterblockinterval": (1000).to_gtv()].to_gtv(), "serial": (100).to_gtv()];
    rell.test.tx().op(
        propose_import_configuration(initial_provider.pub, brid, 15, conf_no_signers.to_gtv().to_bytes())
    ).sign(initial_provider).run_must_fail("No signers in configuration");

    // importing exiting blockchain
    rell.test.tx().op(
        propose_import_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), brid, "bar_chain", container)
    ).sign(initial_provider).run_must_fail("already exists");

    // proposing finishing import, blockchain will be activated and signers updated
    val final_height = 123; // can be any in this test
    rell.test.tx().op(
        propose_finish_import_blockchain(initial_provider.pub, brid, final_height)
    ).sign(initial_provider).run();
    assert_equals(bc.state, blockchain_state.RUNNING);
    assert_true(exists(blockchain_configuration_signers @? { bc, 123 + 1 }));

    // proposing a new config import for a running blockchain
    conf["serial"] = (20).to_gtv();
    rell.test.tx().op(
        propose_import_configuration(initial_provider.pub, brid, 20, conf.to_gtv().to_bytes())
    ).sign(initial_provider).run_must_fail("Blockchain must be in IMPORTING state to import configurations");

    // proposing finishing import for a running blockchain
    rell.test.tx().op(
        propose_finish_import_blockchain(initial_provider.pub, brid, final_height, "unique description")
    ).sign(initial_provider).run_must_fail("Blockchain must be in IMPORTING state to finish import");

    // importing blockchain with invalid name
    conf["serial"] = (25).to_gtv();
    val brid_invalid_name = conf.hash();
    rell.test.tx().op(
        propose_import_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), brid_invalid_name, "bar@chain", container)
    ).sign(initial_provider).run_must_fail("Entity name can only contain letters, numerals, and underscores");

    // importing blockchain to a full container
    val limits = map<container_resource_limit_type, integer>();
    limits[container_resource_limit_type.max_blockchains] = 2;
    conf["serial"] = (30).to_gtv();
    val brid2 = conf.hash();
    rell.test.tx().op(
        propose_container_limits(initial_provider.pub, container, limits),
        propose_import_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), brid2, "bar_chain", container)
    ).sign(initial_provider).run_must_fail("Can't add blockchain, container system is full");

    // importing blockchain without signers
    conf.remove_or_null("signers");
    rell.test.tx().op(
        propose_import_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), brid2, "bar_chain", container)
    ).sign(initial_provider).run_must_fail("No signers in configuration");

}
