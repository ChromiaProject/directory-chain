entity pending_blockchain_import {
    key proposal;
    name;
    blockchain_rid: byte_array;
    config_data: byte_array;
    container;
}

@extend(apply_voting_result_handlers) function() = [proposal_type.blockchain_import.name: apply_blockchain_import(*)];
@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [proposal_type.blockchain_import.name: delete_pending_blockchain_import(*)];

operation propose_import_blockchain(my_pubkey: pubkey, config_data: byte_array, blockchain_rid: byte_array, bc_name: text, container_name: text,
                                    description: text = "Propose import blockchain") {
    val me = require_is_provider_with_rate_limit(my_pubkey);
    val container = require_container(container_name);
    require_container_deployer(container, me);

    require(empty(blockchain @? { blockchain_rid }), "Blockchain with RID %s already exists".format(blockchain_rid));

    require("signers" in map<text, gtv>.from_gtv(gtv.from_bytes(config_data)), "No signers in configuration");

    // Require container resource limits are honored
    require_container_is_not_full(container);

    require(empty(pending_blockchain_import @* { .blockchain_rid == blockchain_rid, .proposal.state == proposal_state.PENDING } limit 1), "Already proposed");
    val prop = create proposal(op_context.last_block_time, proposal_type.blockchain_import, me, container.deployer, description);
    create pending_blockchain_import(prop, bc_name, blockchain_rid, config_data, container);
    internal_vote(me, prop, true);
}

function apply_blockchain_import(proposal) {
    val pbi = pending_blockchain_import @? { proposal };
    if (pbi == null) return;

    require(empty(blockchain @? { pbi.blockchain_rid }), "Blockchain with RID %s already exists".format(pbi.blockchain_rid));

    val nodes = cluster_node @* { pbi.container.cluster } (@sort .node.pubkey);
    // do not write new configuration when size is 0 since it's impossible to recover from that
    require(nodes.size() > 0, "Cluster must have at least one node");
    require_container_is_not_full(pbi.container);        

    val blockchain = create blockchain(pbi.blockchain_rid, pbi.name, system = false, state = blockchain_state.IMPORTING);
    create container_blockchain(pbi.container, blockchain);

    add_configuration_with_signers(blockchain, 0, pbi.config_data);

    log("Blockchain import started: %s / %s".format(pbi.name, pbi.blockchain_rid));
}

function delete_pending_blockchain_import(proposal) {
    delete pending_blockchain_import @? { proposal };
}

query get_blockchain_import_proposal(rowid?):
    (name: text, blockchain_rid: byte_array, config_data: byte_array, container: text)?
{
    val proposal = get_latest_proposal(rowid, proposal_type.blockchain_import);
    if (proposal == null) return null;
    return pending_blockchain_import @ { proposal } (
        name = .name,
        blockchain_rid = .blockchain_rid,
        config_data = .config_data,
        container = .container.name
    );
}
