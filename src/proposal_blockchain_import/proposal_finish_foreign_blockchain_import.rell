entity pending_finish_foreign_blockchain_import {
    key proposal;
    blockchain: blockchain;
    final_height: integer;
}

@extend(apply_voting_result_handlers) function() = [proposal_type.finish_foreign_blockchain_import.name: apply_finish_foreign_blockchain_import(*)];
@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [proposal_type.finish_foreign_blockchain_import.name: delete_pending_finish_foreign_blockchain_import(*)];

operation propose_finish_foreign_blockchain_import(
    my_pubkey: pubkey, blockchain_rid: byte_array, final_height: integer, description: text = "Propose finish import blockchain"
) {
    val me = require_is_provider_with_rate_limit(my_pubkey);
    val blockchain = require_blockchain_entity(blockchain_rid);
    val container = container_blockchain @ { blockchain }.container;
    require_container_deployer(container, me);

    require(exists(foreign_blockchain_import @? { blockchain_rid }),
        "Can't find foreign blockchain being imported: %s".format(blockchain_rid));
    require(empty(pending_finish_foreign_blockchain_import @* { blockchain, .proposal.state == proposal_state.PENDING } limit 1), "Already proposed");
    val last_config_height = blockchain_configuration_signers @? { blockchain, .height >= final_height } (@sort_desc .height) limit 1;
    require(empty(last_config_height),
        "Proposed height (%s) to finish foreign import must be greater than the height (%s) of the latest imported configuration: %s"
            .format(final_height, last_config_height, blockchain_rid)
    );

    val prop = create proposal(op_context.last_block_time, proposal_type.finish_foreign_blockchain_import, me, container.deployer, description);
    create pending_finish_foreign_blockchain_import(prop, blockchain, final_height);
    internal_vote(me, prop, true);
}

function apply_finish_foreign_blockchain_import(proposal) {
    val pbi = pending_finish_foreign_blockchain_import @? { proposal };
    if (pbi == null) return;

    val container = container_blockchain @ { pbi.blockchain }.container;
    val nodes = cluster_node @* { container.cluster } (@sort .node.pubkey);
    require(nodes.size() > 0, "Cluster must have at least one node");

    val fbi = require(foreign_blockchain_import @? { .blockchain_rid == pbi.blockchain.rid }, "Can't find foreign blockchain being imported: %s".format(pbi.blockchain.rid));
    require(pbi.final_height != -1, "Final height (%s) already proposed for foreign blockchain import: %s".format(pbi.final_height, pbi.blockchain.rid));

    val last_config_height = blockchain_configuration_signers @? { pbi.blockchain, .height >= pbi.final_height } (@sort_desc .height) limit 1;
    require(empty(last_config_height),
        "Proposed height (%s) to finish foreign import must be greater than the height (%s) of the latest imported configuration: %s"
            .format(pbi.final_height, last_config_height, pbi.blockchain.rid)
    );

    create blockchain_configuration_signers(pbi.blockchain, pbi.final_height, nodes.to_gtv().to_bytes());
    fbi.final_height = pbi.final_height;

    log("Foreign blockchain import finished: %s".format(pbi.blockchain.rid));
}

function delete_pending_finish_foreign_blockchain_import(proposal) {
    delete pending_finish_foreign_blockchain_import @? { proposal };
}

query get_finish_foreign_blockchain_import_proposal(rowid?): (blockchain_rid: byte_array, final_height: integer)? {
    val proposal = get_latest_proposal(rowid, proposal_type.finish_foreign_blockchain_import);
    if (proposal == null) return null;
    return pending_finish_foreign_blockchain_import @ { proposal } (
        blockchain_rid = .blockchain.rid,
        final_height = .final_height
    );
}
