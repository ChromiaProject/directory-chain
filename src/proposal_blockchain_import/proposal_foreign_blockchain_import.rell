entity pending_foreign_blockchain_import {
    key proposal;
    pubkey;
    host: text;
    port: integer;
    api_url: text;
    chain0_rid: byte_array;
    blockchain_name: text;
    blockchain_rid: byte_array;
    initial_config_data: byte_array;
    container;
}

@extend(apply_voting_result_handlers) function() = [proposal_type.foreign_blockchain_import.name: apply_foreign_blockchain_import(*)];
@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [proposal_type.foreign_blockchain_import.name: delete_pending_foreign_blockchain_import(*)];

operation propose_foreign_blockchain_import(
    my_pubkey: pubkey,
    node_pubkey: pubkey,
    host: text,
    port: integer,
    api_url: text,
    chain0_rid: byte_array,
    blockchain_name: text,
    blockchain_rid: byte_array,
    initial_config_data: byte_array,
    container_name: text,
    description: text = "Propose import foreign blockchain"
) {
    val me = require_is_provider_with_rate_limit(my_pubkey);
    val container = require_container(container_name);
    require_container_deployer(container, me);

    require(empty(blockchain @? { blockchain_rid }), "Blockchain with RID %s already exists".format(blockchain_rid));
    require("signers" in map<text, gtv>.from_gtv(gtv.from_bytes(initial_config_data)), "No signers in configuration");
    // Require container resource limits are honored
    require_container_is_not_full(container);
    require(empty(pending_foreign_blockchain_import @* { .blockchain_rid == blockchain_rid, .proposal.state == proposal_state.PENDING } limit 1), "Already proposed");

    val prop = create proposal(op_context.last_block_time, proposal_type.foreign_blockchain_import, me, container.deployer, description);
    create pending_foreign_blockchain_import(
        prop,
        pubkey = node_pubkey, host, port, api_url,
        chain0_rid,
        blockchain_name, blockchain_rid, initial_config_data,
        container);
    internal_vote(me, prop, true);
}

function apply_foreign_blockchain_import(proposal) {
    val pfbi = pending_foreign_blockchain_import @? { proposal };
    if (pfbi == null) return;

    require(empty(blockchain @? { pfbi.blockchain_rid }), "Blockchain with RID %s already exists".format(pfbi.blockchain_rid));

    val nodes = cluster_node @* { pfbi.container.cluster } (@sort .node.pubkey);
    require(nodes.size() > 0, "Cluster must have at least one node");
    require_container_is_not_full(pfbi.container);

    val blockchain = create blockchain(pfbi.blockchain_rid, pfbi.blockchain_name, system = false, state = blockchain_state.IMPORTING);
    create container_blockchain(pfbi.container, blockchain);
    add_configuration_with_signers(blockchain, 0, pfbi.initial_config_data);
    create foreign_blockchain_import(
        pubkey = pfbi.pubkey,
        host = pfbi.host,
        port = pfbi.port,
        api_url = pfbi.api_url,
        chain0_rid = pfbi.chain0_rid,
        blockchain_rid = pfbi.blockchain_rid
    );

    log("Foreign blockchain import started: %s / %s".format(pfbi.blockchain_name, pfbi.blockchain_rid));
}

function delete_pending_foreign_blockchain_import(proposal) {
    delete pending_foreign_blockchain_import @? { proposal };
}

query get_foreign_blockchain_import_proposal(rowid?) {
    val proposal = get_latest_proposal(rowid, proposal_type.blockchain_import);
    if (proposal == null) return null;
    return pending_foreign_blockchain_import @ { proposal } (
        foreign_node = .pubkey,
        host = .host,
        port = .port,
        api_url = .api_url,
        chain0_rid = .chain0_rid,
        blockchain_name = .blockchain_name,
        blockchain_rid = .blockchain_rid,
        container = .container.name
    );
}
