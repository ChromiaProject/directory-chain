entity pending_foreign_blockchain_blocks_import {
    key proposal;
    blockchain: blockchain;
    final_height: integer;
}

@extend(apply_voting_result_handlers) function() = [proposal_type.foreign_blockchain_blocks_import.name: apply_foreign_blockchain_blocks_import(*)];
@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [proposal_type.foreign_blockchain_blocks_import.name: delete_pending_foreign_blockchain_blocks_import(*)];

operation propose_foreign_blockchain_blocks_import(
    my_pubkey: pubkey, blockchain_rid: byte_array, final_height: integer, description: text = "Propose import foreign blockchain blocks"
) {
    val me = require_is_provider_with_rate_limit(my_pubkey);
    val blockchain = require_blockchain_entity(blockchain_rid);
    require(blockchain.state == blockchain_state.IMPORTING, "Blockchain must be in %s state to start importing blocks".format(blockchain_state.IMPORTING));

    val container = container_blockchain @ { blockchain }.container;
    require_container_deployer(container, me);

    require(exists(importing_foreign_blockchain @* { blockchain_rid }), "Can't find foreign blockchain being imported: %s".format(blockchain_rid));
    require(empty(pending_foreign_blockchain_blocks_import @* { blockchain, .proposal.state == proposal_state.PENDING } limit 1), "Already proposed");
    require_height_is_greater_or_equal_to_last_config_height(blockchain, final_height);

    val prop = create proposal(op_context.last_block_time, proposal_type.foreign_blockchain_blocks_import, me, container.deployer, description);
    create pending_foreign_blockchain_blocks_import(prop, blockchain, final_height);
    internal_vote(me, prop, true);
}

function apply_foreign_blockchain_blocks_import(proposal) {
    val pfbbi = pending_foreign_blockchain_blocks_import @? { proposal };
    if (pfbbi == null) return;

    val container = container_blockchain @ { pfbbi.blockchain }.container;
    val nodes = cluster_node @* { container.cluster } (@sort .node.pubkey);
    require(nodes.size() > 0, "Cluster must have at least one node");
    require(exists(importing_foreign_blockchain @* { .blockchain_rid == pfbbi.blockchain.rid }),
        "Can't find foreign blockchain being imported: %s".format(pfbbi.blockchain.rid));
    require_height_is_greater_or_equal_to_last_config_height(pfbbi.blockchain, pfbbi.final_height);
    val fbi = require(importing_foreign_blockchain @? { .blockchain_rid == pfbbi.blockchain.rid },
        "Can't find foreign blockchain being imported: %s".format(pfbbi.blockchain.rid)
    );
    require(pfbbi.final_height != -1,
        "A final_height (%s) already proposed for foreign blockchain import: %s".format(pfbbi.final_height, pfbbi.blockchain.rid)
    );

    update blockchain @ { pfbbi.blockchain.rid } (.state = blockchain_state.RUNNING);
    create blockchain_configuration_signers(pfbbi.blockchain, pfbbi.final_height + 1, nodes.to_gtv().to_bytes());
    fbi.final_height = pfbbi.final_height;
    create blockchain_configuration_options(
        pfbbi.blockchain, pfbbi.final_height + 1, suppress_special_transaction_validation = false
    );

    log("Foreign blockchain blocks import started: %s / %s".format(pfbbi.blockchain.name, pfbbi.blockchain.rid));
}

function delete_pending_foreign_blockchain_blocks_import(proposal) {
    delete pending_foreign_blockchain_blocks_import @? { proposal };
}

query get_foreign_blockchain_blocks_import_proposal(rowid?): (blockchain_rid: byte_array, final_height: integer)? {
    val proposal = get_latest_proposal(rowid, proposal_type.foreign_blockchain_blocks_import);
    if (proposal == null) return null;
    return pending_foreign_blockchain_blocks_import @ { proposal } (
        blockchain_rid = .blockchain.rid,
        final_height = .final_height
    );
}
