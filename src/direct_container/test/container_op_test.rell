@test module;

import ^^.*;
import common.operations.*;
import common.test.setup.*;
import common.test.ops.*;
import common.test.util.constants.*;
import proposal_cluster.*;

function test_create_container() {
    setup_module(provider_quota_max_containers = 1);
    val deployer1 = rell.test.keypairs.bob;
    val deployer2 = rell.test.keypairs.trudy;

    // Register provider as tier 0
    rell.test.tx().op(
        create_test_provider("", deployer1.pub, provider_tier.DAPP_PROVIDER),
        create_test_provider("", deployer2.pub, provider_tier.DAPP_PROVIDER)
    ).run();

    val deployers = list<pubkey>();
    deployers.add(deployer1.pub);

    // Try to create container with too many cluster units
    rell.test.tx().op(
        create_container_with_units(initial_provider.pub, "too_big", clusters.system, 1, deployers, 100)
    ).sign(initial_provider).run_must_fail();

    // Try to create container with too few cluster units
    rell.test.tx().op(
        create_container_with_units(initial_provider.pub, "too_small", clusters.system, 1, deployers, 0)
    ).sign(initial_provider).run_must_fail();

    // Create first container
    rell.test.tx().op(
        create_container(initial_provider.pub, "foo", clusters.system, 1, deployers)
    ).sign(initial_provider).run();

    // The second container, must fail due to providers `max_containers` restrictions
    rell.test.tx().op(
        create_container(initial_provider.pub, "foo2", clusters.system, 1, deployers)
    ).sign(initial_provider).run_must_fail();

    assert_not_null(container @? { "foo" });
    assert_not_null(voter_set @? { "container_foo_deployer" });
    val vs = voter_set @ { "container_foo_deployer" };
    assert_equals((voter_set_member @* { vs }).size(), 1);
    assert_equals(voter_set_governance @ { .voter_set == vs }.governor, vs);

    rell.test.tx().op(
        add_container_deployer(initial_provider.pub, "foo", deployer2.pub)
        ).sign(initial_provider).run();
    assert_equals((voter_set_member @* { vs }).size(), 2);

    rell.test.tx().op(
        remove_container_deployer(initial_provider.pub, "foo", deployer1.pub)
        ).sign(initial_provider).run();
    assert_equals((voter_set_member @* { vs }).size(), 1);

    rell.test.tx().op(
        remove_container(initial_provider.pub, "foo")
        ).sign(initial_provider).run();

    assert_null(container @? { "foo" });
    assert_not_null(voter_set @? { "container_foo_deployer" });
}
