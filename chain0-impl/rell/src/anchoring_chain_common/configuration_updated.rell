
@extend(after_anchoring_block) function process_configuration_updated(block_rid: byte_array, header: block_header) {
    log("-------------- process_configuration_updated ----------------");
    if (not pcu_enabled()) return;

    if (not header.extra.contains("config_hash")) return;
    val current_config_hash = header.extra["config_hash"];
    val blockchain_rid = header.blockchain_rid;

    // TODO debug logging, remove later
    log("Anchor chain %s anchoring for chain %s at height %d with config_hash %s".format(
        chain_context.blockchain_rid, blockchain_rid, header.height, current_config_hash));

    val prev_config_hash = anchor_block @? { blockchain_rid, .block_height < header.height } (
        @omit @sort_desc .block_height,
        block_header.from_bytes($.block_header).extra.get_or_null("config_hash")
    ) limit 1;
    log("prev_config_hash: " + prev_config_hash);

    if (prev_config_hash != null and current_config_hash != prev_config_hash) {
        log("Anchoring chain %s detected updated configuration for chain %s at height %d to %s".format(
            chain_context.blockchain_rid, blockchain_rid, header.height, current_config_hash));
        send_message(
            configuration_updated_topic,
            configuration_updated(blockchain_rid, header.height, config_hash = byte_array.from_gtv(current_config_hash)).to_gtv()
        );
    }
    log("-------------- END of process_configuration_updated ----------------");
}



// =====================

object cluster_anchoring_config_hash {
    mutable config_hash: byte_array = x"";
}

operation __begin_block(height: integer) {
    if (not pcu_enabled()) return;

    if (cluster_anchoring_config_hash.config_hash == x"") {
        log("Cluster anchoring chain %s at height %d init config_hash to %s".format(
            chain_context.blockchain_rid, height, chain_context.raw_config.hash()));
        cluster_anchoring_config_hash.config_hash = chain_context.raw_config.hash();
    } else {
        val new_config_hash = chain_context.raw_config.hash();

        // TODO debug logging, remove later
        log("Cluster anchoring chain %s at height %d with config_hash %s".format(
            chain_context.blockchain_rid, height, new_config_hash));

        if (cluster_anchoring_config_hash.config_hash != new_config_hash) {
            log("Cluster anchoring chain %s detected updated configuration for itself at height %d to %s"
                .format(chain_context.blockchain_rid, height, new_config_hash)
            );
            cluster_anchoring_config_hash.config_hash = new_config_hash;
            send_message(
                configuration_updated_topic,
                configuration_updated(
                    blockchain_rid = chain_context.blockchain_rid,
                    height,
                    config_hash = new_config_hash
                ).to_gtv()
            );
        }
    }
}

