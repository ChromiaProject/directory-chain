
import ^.common.cluster.*;

operation propose_remove_cluster(my_pubkey: pubkey, name, description: text = "") {
    val me = require_provider(my_pubkey);
    require_provider_auth_with_rl(me);
    val c = require(cluster @? { name }, "Unknown cluster %s".format(name));
    require_cluster_governor(c, me);
    require_cluster_available_for_removal(c);

    val prop = create proposal(op_context.last_block_time, proposal_type.cluster_remove, me, c.governance, description);
    create pending_remove_cluster(prop, c);
    internal_vote(me, prop, true);
}

// The operation is mostly needed to make rell-maven-plugin generate code for enum `cluster_resource_limit_type`
operation propose_cluster_limits(my_pubkey: pubkey, cluster_name: text, limits: map<cluster_resource_limit_type, integer>, description: text = "") {
    val limits_map = _get_current_cluster_resource_limits(cluster_name);
    limits_map.put_all(limits);

    val me = require_provider(my_pubkey);
    //check that provider authority and that it is a cluster governor
    require_provider_auth_with_rl(me);
    val cluster = require_cluster(cluster_name);
    require_cluster_governor(cluster, me);
    val prop = create proposal(op_context.last_block_time, proposal_type.cluster_limits, me, cluster.governance, description);
    create pending_cluster_limits(
        prop,
        cluster,
        max_containers = limits_map[cluster_resource_limit_type.max_containers],
        default_container_max_blockchains = limits_map[cluster_resource_limit_type.default_container_max_blockchains],
        default_container_cpu = limits_map[cluster_resource_limit_type.default_container_cpu],
        default_container_ram = limits_map[cluster_resource_limit_type.default_container_ram],
        default_container_storage = limits_map[cluster_resource_limit_type.default_container_storage],
        default_container_io_read = limits_map[cluster_resource_limit_type.default_container_io_read],
        default_container_io_write = limits_map[cluster_resource_limit_type.default_container_io_write]
    );
    internal_vote(me, prop, true);
}

function _get_current_cluster_resource_limits(cluster_name: text): map<cluster_resource_limit_type, integer> {
    var limits_map = map<cluster_resource_limit_type, integer>();
    val cur_limits_list = cluster_resource_limit @* { .cluster.name == cluster_name };
    for (l in cur_limits_list) {
        limits_map[l.cluster_resource_limit_type] = l.value;
    }
    return limits_map;
}
