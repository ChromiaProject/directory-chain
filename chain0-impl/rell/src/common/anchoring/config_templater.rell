import ^.*;

struct blockstrategy_config {
    maxblocktime: integer;
}

struct rell_config {
   modules: list<text>;
   sources: map<text, text>;
   version: text;
}

struct gtx_config {
    modules: list<text>;
    rell: rell_config;
}

struct blockchain_config {
    cluster: text;
    configurationfactory: text;
    blockstrategy: blockstrategy_config;
    gtx: gtx_config;
}

// Builds config for anchoring chain; uses cluster_name to make config unique;
function get_anchoring_config(cluster_name: text, anchoring_code: text): gtv {
    val chain0_rell_version = text.from_gtv(map<text, gtv>.from_gtv(map<text, gtv>.from_gtv(map<text, gtv>.from_gtv(chain_context.raw_config)["gtx"])["rell"])["version"]);

    val sources = map<text, text>();
    sources["anchoring/module.rell"] = anchoring_code;

    val config = blockchain_config(
        cluster = cluster_name,
        configurationfactory = "net.postchain.gtx.GTXBlockchainConfigurationFactory",
        blockstrategy = blockstrategy_config(
            maxblocktime = 2000
        ),
        gtx = gtx_config(
            modules = [
                "net.postchain.rell.module.RellPostchainModuleFactory",
                "net.postchain.gtx.StandardOpsGTXModule",
                "net.postchain.d1.anchor.AnchorGTXModule"
            ],
            rell = rell_config(
                modules = ["anchoring"],
                sources = sources,
                version = chain0_rell_version
            )
        )
    );

    return config.to_gtv_pretty();
}
