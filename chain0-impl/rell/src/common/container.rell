
function create_container_with_resource_limits(name, cluster, voter_set, max_blockchains: integer = -1, cpu: integer = -1, ram: integer = -1, storage: integer = -1): container {
	val c = create container(name, cluster, voter_set);
    create container_resource_limit(c, container_resource_limit_type.max_blockchains, max_blockchains);
    create container_resource_limit(c, container_resource_limit_type.cpu, cpu);
    create container_resource_limit(c, container_resource_limit_type.ram, ram);
    create container_resource_limit(c, container_resource_limit_type.storage, storage);
    return c;
}

function remove_container_impl(container) {
    delete container_resource_limit @* { container };
    delete container;
}

function require_container_available_for_removal(container) {
    require(container.name != "system", "System cluster can't be deleted");
    require(
        empty(container_blockchain @* { container }),
        "Container %s is not empty and can't be deleted. Delete blockchains first".format(container.name)
    );
}
