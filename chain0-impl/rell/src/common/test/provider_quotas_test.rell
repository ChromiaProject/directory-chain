@test module;

import ^.ops.*;
import ^.setup.*;
import ^^^.cluster.*;
import ^^^.cluster.cluster_op.*;
import ^^^.container.container_op.*;
import ^^^.container.container_proposal.*;
import ^.util.constants.*;

// Container / create_

function test__create_container__when__max_containers_is_0() {
    setup_module(provider_quota_max_containers = 0);

    rell.test.tx().op(
        create_container(initial_provider.pub, "container1",  clusters.system, 0, list<pubkey>()),
        create_container(initial_provider.pub, "container2",  clusters.system, 0, list<pubkey>())
    ).sign(initial_provider).run();
}

function test__create_container__when__max_containers_is_limited() {
    setup_module(provider_quota_max_containers = 1);

    rell.test.tx().op(
        create_container(initial_provider.pub, "container1",  clusters.system, 0, list<pubkey>())
    ).sign(initial_provider).run();

    rell.test.tx().op(
        create_container(initial_provider.pub, "container2",  clusters.system, 0, list<pubkey>())
    ).sign(initial_provider).run_must_fail();
}


// Container / propose_

function test__propose_container__when__max_containers_is_0() {
    setup_module(provider_quota_max_containers = 0);

    rell.test.tx().op(
        propose_container(initial_provider.pub, clusters.system, "container1", voter_sets.system_p),
        propose_container(initial_provider.pub, clusters.system, "container2", voter_sets.system_p)
    ).sign(initial_provider).run();
}

function test__propose_container__when__max_containers_is_limited() {
    setup_module(provider_quota_max_containers = 1);

    rell.test.tx().op(
        propose_container(initial_provider.pub, clusters.system, "container1", voter_sets.system_p)
    ).sign(initial_provider).run();

    rell.test.tx().op(
        propose_container(initial_provider.pub, clusters.system, "container2", voter_sets.system_p)
    ).sign(initial_provider).run_must_fail();
}

function test_changing_provider_quota__max_containers() {
    setup_module(provider_quota_max_containers = 1);

    assert_equals(get_max_container_np_quota(), 1);
    rell.test.tx().op(
        propose_provider_quota(initial_provider.pub, provider_tier.NODE_PROVIDER, provider_quota_type.max_containers, 10)
    ).sign(initial_provider).run();
    assert_equals(get_max_container_np_quota(), 10);

    // 0, -1
    rell.test.tx().op(
        propose_provider_quota(initial_provider.pub, provider_tier.NODE_PROVIDER, provider_quota_type.max_containers, 0),
        propose_provider_quota(initial_provider.pub, provider_tier.NODE_PROVIDER, provider_quota_type.max_containers, -1)
    ).sign(initial_provider).run();
    assert_equals(get_max_container_np_quota(), -1);

    // -2, must fail
    rell.test.tx().op(
        propose_provider_quota(initial_provider.pub, provider_tier.NODE_PROVIDER, provider_quota_type.max_containers, -2)
    ).sign(initial_provider).run_must_fail();
}

function get_max_container_np_quota(): integer {
    return provider_quota @ { provider_tier.NODE_PROVIDER, provider_quota_type.max_containers } (.value);
}
