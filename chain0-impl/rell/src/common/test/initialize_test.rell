@test module;

/* Makes sure the module is initialized with the correct state */
import ^^.*;
import ^.ops.*;
import ^.setup.*;
import ^.util.constants.*;

function test_initialization() {
    setup_module();

    // Provider quotas are created
    for (quota in provider_quota_type.values()) {
        when (quota) {
            max_actions_per_day -> assert_provider_quota(quota, [provider_tier.COMMUNITY_NODE_PROVIDER, provider_tier.NODE_PROVIDER]);
        	max_nodes -> assert_provider_quota(quota, [provider_tier.COMMUNITY_NODE_PROVIDER, provider_tier.NODE_PROVIDER]);
        	max_containers -> assert_provider_quota(quota, [provider_tier.NODE_PROVIDER]);
        }
    }

    /* System voter sets are self-governed. */
    val system = voter_set @? { voter_sets.system };
    val system_p = voter_set @? { voter_sets.system_p };
    assert_not_null(system);
    assert_not_null(system_p);
    assert_equals(voter_set_governance @ { .voter_set==system } ( .governor ), system);
    assert_equals(voter_set_governance @ { .voter_set==system_p } ( .governor ), system_p);
    assert_null(voter_set_member @? { system }); // SYSTEM has no members
    
    /* System cluster is governed by SYSTEM_P */
    val cluster1 = cluster @? { clusters.system };
    assert_not_null(cluster1);
    assert_equals(cluster1.governance, system_p);
    
    /* Initial provider is a provider of system cluster */
    val p1 = provider @? { rell.test.pubkeys.alice };
    assert_not_null(p1);
    assert_true(p1.active);
    assert_equals(cluster_provider @ { cluster1 }.provider, p1);
    assert_equals(voter_set_member @ { system_p }.provider, p1);
    
    /* System container is part of system cluster */
    val container1 = container @? { containers.system };
    assert_not_null(container1);
    assert_equals(container1.cluster, cluster1);

    val summary = get_summary();
    assert_equals(summary.providers, 1);
    assert_equals(summary.clusters, 1);
    assert_equals(summary.containers, 1);
    assert_equals(summary.voter_sets, 2);
    assert_equals(summary.blockchains, 1);
}

function test_initialization_with_anchoring() {
    setup_module(anchoring_config = ["any": "value".to_gtv()]);

    val summary = get_summary();
    assert_equals(summary.containers, 2);
    assert_equals(summary.blockchains, 2);
}

function assert_provider_quota(quota: provider_quota_type, tiers: list<provider_tier>) {
    for (tier in tiers) {
        assert_true(exists(provider_quota @* { tier, quota }));
    }
}