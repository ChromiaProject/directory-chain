@test module;

import ^^.*;

function test_custom_majoriy_limit() {
    assert_equals(_compute_proposal_status(45, 0, 100, 46), proposal_status.pending);
    assert_equals(_compute_proposal_status(45, 0, 100, 45), proposal_status.approved);
    assert_equals(_compute_proposal_status(0, 67, 100, 44), proposal_status.rejected);
}

function test_majority_even() {
    assert_equals(_compute_proposal_status(50, 0, 100, -1), proposal_status.pending);
    assert_equals(_compute_proposal_status(51, 0, 100, -1), proposal_status.approved);
    assert_equals(_compute_proposal_status(0, 50, 100, -1), proposal_status.rejected);
}

function test_majority_odd() {
    assert_equals(_compute_proposal_status(51, 0, 101, -1), proposal_status.approved);
    assert_equals(_compute_proposal_status(0, 50, 101, -1), proposal_status.pending);
    assert_equals(_compute_proposal_status(0, 51, 101, -1), proposal_status.rejected);
}

function test_super_majority_divisible_by_3() {
    assert_equals(_compute_proposal_status(2, 0, 3, 0), proposal_status.pending);
    assert_equals(_compute_proposal_status(3, 0, 3, 0), proposal_status.approved);
    assert_equals(_compute_proposal_status(0, 1, 3, 0), proposal_status.rejected);
    assert_equals(_compute_proposal_status(66, 0, 99, 0), proposal_status.pending);
    assert_equals(_compute_proposal_status(67, 0, 99, 0), proposal_status.approved);
    assert_equals(_compute_proposal_status(0, 33, 99, 0), proposal_status.rejected);
}

function test_super_majority_non_divisible_by_3() {
    assert_equals(_compute_proposal_status(2, 0, 4, 0), proposal_status.pending);
    assert_equals(_compute_proposal_status(3, 0, 4, 0), proposal_status.approved);
    assert_equals(_compute_proposal_status(0, 2, 4, 0), proposal_status.rejected);
    assert_equals(_compute_proposal_status(66, 33, 100, 0), proposal_status.pending);
    assert_equals(_compute_proposal_status(67, 0, 100, 0), proposal_status.approved);
    assert_equals(_compute_proposal_status(0, 34, 100, 0), proposal_status.rejected);
}
