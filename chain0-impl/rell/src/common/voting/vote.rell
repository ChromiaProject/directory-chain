
enum voting_result {
	pending,
	approved,
	rejected
}

function compute_voting_result(proposal): voting_result {
	return _compute_voting_result(
		positive_votes(proposal),
		negative_votes(proposal),
		max_votes(proposal.voter_set),
		proposal.voter_set.threshold
	);
}

function positive_votes(proposal) = vote @? { proposal, .vote == true } (@sum 1) ?: 0;
function negative_votes(proposal) = vote @? { proposal, .vote == false } (@sum 1) ?: 0;
function max_votes(voter_set) = voter_set_member @ { voter_set } (@sum 1);

function _compute_voting_result(yes: integer, no: integer, max: integer, threshold: integer): voting_result {
	require (threshold >= -1 and threshold <= max, "Invalid threshold, must be in range [%d, %d] but was: %d".format(-1, max, threshold));
	require (yes + no <= max, "Too many votes");
	when (threshold) {
		-1 -> return _compute_voting_result_majority(yes, no, max);
		0 -> return _compute_voting_result_super_majority(yes, no, max);
		else -> return _compute_voting_result_custom(yes, no, max, threshold);
	}
}

function _compute_voting_result_custom(yes: integer, no: integer, max: integer, threshold: integer): voting_result {
	return _voting_result(yes, no, max, threshold	);
}

function _compute_voting_result_majority(yes: integer, no: integer, max: integer): voting_result {
	val required = max / 2 + 1;
	return _voting_result(yes, no, max, required);
}

function _compute_voting_result_super_majority(yes: integer, no: integer, max: integer): voting_result {
	val required = max - (max - 1) / 3;
	return _voting_result(yes, no, max, required);
}

function _voting_result(yes: integer, no: integer, max: integer, required: integer): voting_result {
	print("Votes - positive: %d, negative: %d, required: %d, maximum: %d".format(yes, no, required, max));
	return when {
		yes >= required -> voting_result.approved;
		no > max - required -> voting_result.rejected;
		else -> voting_result.pending;
	};
}
