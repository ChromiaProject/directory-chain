entity blockchain { 
    key rid: byte_array; 
    mutable name: text;
    system: boolean = false;
    mutable active: boolean = true;
}

entity blockchain_added { 
    key blockchain, transaction;
    key blockchain;
}

entity blockchain_configuration {
    key blockchain, height: integer;
    mutable data: byte_array; // base_config, without signers
}

entity pending_blockchain_configuration {
    key blockchain, minimum_height: integer;
    key blockchain, config_hash: byte_array;
    base_config: byte_array;
    signers: byte_array;
}

entity blockchain_configuration_signers {
    key blockchain, height: integer;
    mutable signers: byte_array;
}

entity blockchain_replica_node { 
    key blockchain, node; 
}

/**
* For blockchain dependency tracking. Dependency is not static.
* Blockchain (me) might be dependent on different blockchains (dependent_on) at different heights.
*/
entity blockchain_dependency { 
    key me: blockchain, height: integer, dependent_on: blockchain; 
}

enum blockchain_action {
    pause,
    resume,
    remove
}

function get_signers_for_configuration(blockchain, height: integer): gtv {
    val raw_signers = blockchain_configuration_signers @ { blockchain, .height <= height }
        (@omit @sort_desc .height, .signers) limit 1;
    return gtv.from_bytes(raw_signers);
}
