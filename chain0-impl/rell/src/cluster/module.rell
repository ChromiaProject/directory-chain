module;

import ^.model.*;

function create_cluster_impl(name, governor: voter_set, providers: list<pubkey>, max_containers: integer = -1, cpu: integer = -1, ram: integer = -1, storage: integer = -1) {
    require(empty(cluster @* { name }), "Cluster with name %s already exists".format(name));
    val c = create cluster(name, governor);
    create cluster_resource_limit(c, cluster_resource_limit_type.max_containers , max_containers);
	create cluster_resource_limit(c, cluster_resource_limit_type.default_container_max_blockchains, -1);
	create cluster_resource_limit(c, cluster_resource_limit_type.default_container_cpu, cpu);
	create cluster_resource_limit(c, cluster_resource_limit_type.default_container_ram, ram);
	create cluster_resource_limit(c, cluster_resource_limit_type.default_container_storage, storage);
    for (p_key in providers) {
        val provider = require_provider(p_key);
        require_node_access(provider);
        create cluster_provider(c, provider);
    }
    after_cluster_creation(c);
    return c;
}

@extendable function after_cluster_creation(cluster) {}
