module;

import ^.model.*;
import ^.common.util.*;

function create_container_impl(me: provider, name, cluster, consensus_threshold: integer, deployers: list<pubkey>) {
    require(consensus_threshold >= -1 and consensus_threshold <= deployers.size(), "Invalid threshold");

    val vs = create_voter_set_internal("container_" + name + "_deployer", consensus_threshold, cluster.governance);
    for (deployer_key in deployers) {
        val deployer = require_provider(deployer_key);
        create voter_set_member(vs, deployer);
    }

    val max_blockchains = _get_cluster_limit_or_default(cluster, cluster_resource_limit_type.default_container_max_blockchains);
    val cpu = _get_cluster_limit_or_default(cluster, cluster_resource_limit_type.default_container_cpu);
    val ram = _get_cluster_limit_or_default(cluster, cluster_resource_limit_type.default_container_ram);
    val storage = _get_cluster_limit_or_default(cluster, cluster_resource_limit_type.default_container_storage);
    create_container_with_resource_limits(me, name, cluster, vs, max_blockchains, cpu, ram, storage);
}

operation remove_container(me: pubkey, container_name: text) {
    val provider = require_is_provider_with_rl(me);
    val container = require_container(container_name);
    require_cluster_governor(container.cluster, provider);
    require_container_available_for_removal(container);
    remove_container_and_voter_set(container);
}

function remove_container_and_voter_set(container) {
    if (is_container_available_for_removal(container)[0]) {
        val vs = container.deployer;
        remove_container_impl(container);
        remove_voter_set_impl(vs);
    }
}

function _get_cluster_limit_or_default(cluster, type: cluster_resource_limit_type): integer {
    return cluster_resource_limit @? { cluster, .cluster_resource_limit_type == type } (.value) ?: -1;
}
