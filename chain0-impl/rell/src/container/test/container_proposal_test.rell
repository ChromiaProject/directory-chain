@test module;

import ^^.container_proposal.*;
import ^^^.common.test.setup.*;

function test_propose_and_remove_container() {
    setup_module();
    val alice = provider @ { rell.test.pubkeys.alice };

    // 1. Deleting system container. Must fail.
    rell.test.tx().op(
        propose_remove_container(alice.pubkey, "system")
    ).sign(rell.test.keypairs.alice).run_must_fail();

    // 2. Deleting unknown container. Must fail.
    rell.test.tx().op(
        propose_remove_container(alice.pubkey, "unknown")
    ).sign(rell.test.keypairs.alice).run_must_fail();

    // 3. Proposing container by provider that is not a member of cluster's governance
    rell.test.tx().op(
        register_provider(alice.pubkey, rell.test.pubkeys.bob, provider_tier.COMMUNITY_NODE_PROVIDER)
    ).sign(rell.test.keypairs.alice).run();
    assert_not_null(provider @? { rell.test.pubkeys.bob });
    rell.test.tx().op(
        propose_container(rell.test.pubkeys.bob, clusters.system, "container1", voter_sets.system_p)
    ).sign(rell.test.keypairs.bob).run_must_fail();

    // 4. Adding a new container
    rell.test.tx().op(
        propose_container(alice.pubkey, clusters.system, "container1", voter_sets.system_p)
    ).sign(rell.test.keypairs.alice).run();

    // Asserting container is added
    val container1 = container @? { "container1" };
    assert_not_null(container1);

    // Adding blockchain to container1
    assert_null(blockchain @? { "foo_chain" });

    var conf = map<text, text>();
    rell.test.tx().op(
        propose_blockchain(rell.test.pubkeys.alice, conf.to_gtv().to_bytes(), "foo_chain", "container1")
    ).sign(rell.test.keypairs.alice).run();

    // Asserting blockchain is added to container1
    val bcFoo = blockchain @? { "foo_chain" };
    assert_not_null(bcFoo);
    assert_not_null(container_blockchain @? { container1, bcFoo });

    // Trying to remove container and fail due to the fact it contains a foo_chain
    rell.test.tx().op(
        propose_remove_container(rell.test.pubkeys.alice, "container1")
    ).sign(rell.test.keypairs.alice).run_must_fail();

    // Deleting blockchain
    rell.test.tx().op(
        propose_blockchain_action(rell.test.pubkeys.alice, bcFoo.rid, blockchain_action.remove)
    ).sign(rell.test.keypairs.alice).run();

    // Trying to remove container1
    rell.test.tx().op(
        propose_remove_container(rell.test.pubkeys.alice, "container1")
    ).sign(rell.test.keypairs.alice).run();

    // Asserting that container1 is removed
    assert_null(container @? { "container1" });
    assert_true(empty(
        container_resource_limit @* { .container in container @* { "container1" } }
    ));
}
