@test module;

import ^^^.common.operations.*;
import ^^^.common.test.setup.*;
import ^^^.common.test.util.*;
import ^^^.model.util.constants.*;
import ^^^.proposal_cluster.*;
import ^^^.proposal_provider.*;

function test_propose_and_remove_container() {
    setup_module();

    // 0. governance
    val cnp = rell.test.keypairs.bob;
    val sp = rell.test.keypairs.trudy;

    val system_cluster_limits = map<cluster_resource_limit_type, integer>();
    system_cluster_limits[cluster_resource_limit_type.max_containers] = 2;

    rell.test.tx().op(
        propose_cluster_limits(initial_provider.pub, clusters.system, system_cluster_limits),
        register_provider(initial_provider.pub, cnp.pub, provider_tier.COMMUNITY_NODE_PROVIDER),
        register_provider(initial_provider.pub, sp.pub, provider_tier.NODE_PROVIDER),
        propose_provider_is_system(initial_provider.pub, sp.pub, true)
    ).sign(initial_provider).run();

    // 1. Deleting system container. Must fail.
    rell.test.tx().op(
        propose_remove_container(initial_provider.pub, system_container_name(clusters.system))
    ).sign(initial_provider).run_must_fail();

    // 2. Deleting unknown container. Must fail.
    rell.test.tx().op(
        propose_remove_container(initial_provider.pub, "unknown")
    ).sign(initial_provider).run_must_fail();

    // 3. Proposing container by provider that is not a member of cluster's governance
    rell.test.tx().op(
        propose_container(cnp.pub, clusters.system, "container1", voter_sets.system_p)
    ).sign(cnp).run_must_fail();

    // 4. Adding a new container
    rell.test.tx().op(
        propose_container(initial_provider.pub, clusters.system, "container1", voter_sets.system_p)
    ).sign(initial_provider).run();
    _make_vote(sp);

    // Adding a second container, must fail due to `max_containers` restrictions
    rell.test.tx().op(
        propose_container(initial_provider.pub, clusters.system, "container2", voter_sets.system_p)
    ).sign(initial_provider).run_must_fail();

    // Asserting container is added
    val container1 = container @? { "container1" };
    assert_not_null(container1);

    // Adding blockchain to container1
    assert_null(blockchain @? { "foo_chain" });

    var conf = ["config_consensus_strategy": "HEADER_HASH".to_gtv()];
    rell.test.tx().op(
        propose_blockchain(initial_provider.pub, conf.to_gtv().to_bytes(), "foo_chain", "container1")
    ).sign(initial_provider).run();
    _make_vote(sp);

    // Asserting blockchain is added to container1
    val bcFoo = blockchain @? { "foo_chain" };
    assert_not_null(bcFoo);
    assert_not_null(container_blockchain @? { container1, bcFoo });

    // Trying to remove container and fail due to the fact it contains a foo_chain
    rell.test.tx().op(
        propose_remove_container(initial_provider.pub, "container1")
    ).sign(initial_provider).run_must_fail();

    // Deleting blockchain
    rell.test.tx().op(
        propose_blockchain_action(initial_provider.pub, bcFoo.rid, blockchain_action.remove)
    ).sign(initial_provider).run();
    _make_vote(sp);

    // Proposing container limits and container blockchain
    val limits = map<container_resource_limit_type, integer>();
    var conf_bar = ["config_consensus_strategy": "HEADER_HASH".to_gtv()];
    conf_bar["foo"] = "bar".to_gtv();
    rell.test.tx().op(
        propose_container_limits(initial_provider.pub, "container1", limits),
        propose_blockchain(initial_provider.pub, conf_bar.to_gtv().to_bytes(), "bar_chain", "container1")
    ).sign(initial_provider).run();
    // _make_vote(sp); Not votes,
    assert_true(exists(pending_container_limits @? { .container.name == "container1" }));
    assert_true(exists(pending_blockchain @? { .container.name == "container1" }));

    // Trying to remove container1 and fail due to the fact there are other container1 related proposal(s)
    rell.test.tx().op(
        propose_remove_container(initial_provider.pub, "container1")
    ).sign(initial_provider).run_must_fail();

    // IP revokes pending proposal and tries to remove container again
    _revoke_proposal(initial_provider);
    rell.test.tx().op(
        propose_remove_container(initial_provider.pub, "container1")
    ).sign(initial_provider).run_must_fail();

    // IP revokes 2nd pending proposal and tries to remove container again
    _revoke_proposal(initial_provider);
    rell.test.tx().op(
        propose_remove_container(initial_provider.pub, "container1")
    ).sign(initial_provider).run();

    // SP votes for container removal
    _make_vote(sp);

    // Asserting that container1 is removed
    assert_null(container @? { "container1" });
    assert_true(empty(
        container_resource_limit @* { .container in container @* { "container1" } }
    ));
}

function _make_vote(voter: rell.test.keypair) {
    rell.test.tx().op(
        make_vote(voter.pub, last_proposal().rowid.to_integer(), true)
    ).sign(voter).run();
}

function _revoke_proposal(voter: rell.test.keypair) {
    rell.test.tx().op(
        revoke_proposal(voter.pub, last_proposal().rowid)
    ).sign(voter).run();
}
