function get_cluster_node_blockchains(node): set<blockchain_info> {
    val blockchains = set(
        (cluster_node, container_blockchain) @* {
            cluster_node.node == node,
            cluster_node.cluster == container_blockchain.container.cluster,
            container_blockchain.blockchain.state in [blockchain_state.RUNNING, blockchain_state.PAUSED]
        } ( blockchain_info(container_blockchain.blockchain.rid, container_blockchain.blockchain.system, container_blockchain.blockchain.state) )
    );

    blockchains.add_all(
        signer_excluded_from_pending_configuration @* { .pubkey == node.pubkey }
            ( blockchain_info(.blockchain.rid, .blockchain.system, .blockchain.state) )
    );

    return blockchains;
}

function get_cluster_replica_node_blockchains(node) = set(
    (cluster_replica_node, container_blockchain) @* {
        cluster_replica_node.node == node,
        cluster_replica_node.cluster == container_blockchain.container.cluster,
        container_blockchain.blockchain.state in [blockchain_state.RUNNING, blockchain_state.PAUSED]
    } ( blockchain_info(container_blockchain.blockchain.rid, container_blockchain.blockchain.system, container_blockchain.blockchain.state) )
);

function get_blockchains_replicated_by_node(node) = set(
    blockchain_replica_node @* { 
        node, .blockchain.state in [blockchain_state.RUNNING, blockchain_state.PAUSED] 
    } (blockchain_info(.blockchain.rid, .blockchain.system, .blockchain.state))
);

function get_blockchain_replica_nodes(blockchain_rid: byte_array): set<byte_array> {
    val replicas = set<byte_array>();

    // cluster_replica_node
    val replica_nodes = (crn: cluster_replica_node, cb: container_blockchain) @* {
        cb.blockchain.rid == blockchain_rid,
        cb.container.cluster == crn.cluster
    } (.node.pubkey);
    replicas.add_all(replica_nodes);

    // blockchain_replica_node
    replicas.add_all(blockchain_replica_node @* { .blockchain.rid == blockchain_rid } (.node.pubkey));

    return replicas;
}
