
import ^.model.*;

namespace roles {

    function has_system_access(provider) = provider.active and provider.system;

    function has_node_access(provider) = provider.active and provider.tier == provider_tier.NODE_PROVIDER;

    function has_deploy_access(provider, container) = provider.active and exists(voter_set_member @? { provider, container.deployer });

}

function require_system_access(provider) = require(roles.has_system_access(provider), "Provider " + provider.pubkey + " must have system priviliges");
function require_node_access(provider) = require(roles.has_node_access(provider), "Provider " + provider.pubkey + " must have permissions to deploy nodes");
function require_deploy_access(provider, container) = require(roles.has_deploy_access(provider, container), "Provider " + provider.pubkey + " must have permissions to deploy in container " + container.name);

namespace enroll {
    function system(provider, active: boolean = true) {
        provider.active = active;
        provider.system = true;
        node(provider);
        if (active) {
            create voter_set_member(provider, system_p_voter_set());
            create cluster_provider(provider, system_cluster());
        }
    }

    function node(provider) {
        provider.tier = provider_tier.NODE_PROVIDER;
    }

}

namespace revoke {
    function system(provider) {
        provider.system = false;
        delete voter_set_member @ { provider, system_container().deployer};
        delete cluster_provider @ { provider, system_cluster() };
    }

    function node(provider) {
        require(roles.has_system_access(provider) != true, "Cannot revoke node access for a system provider. Revoke system access");
        provider.tier = provider_tier.COMMUNITY_NODE_PROVIDER;
        // TODO inactivate all nodes?
    }

}
