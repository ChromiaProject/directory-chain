entity pending_voter_set_update {
    key proposal, voter_set;
}

namespace voter_set_update {
    entity threshold {
        key pending_voter_set_update;
        threshold: integer;
    }

    entity governor {
        key pending_voter_set_update;
        governor: voter_set;
    }

    entity new_member {
        index pending_voter_set_update;
        provider;
    }

    entity remove_member {
        index pending_voter_set_update;
        provider;
    }
}

@extend(apply_voting_result_handlers) function() = [proposal_type.voter_set_update.name: apply_voter_set_update(*)];

function apply_voter_set_update(proposal) {
    val vsp = pending_voter_set_update @? { proposal };
    if (vsp == null) return;
    val threshold = voter_set_update.threshold @? { vsp }.threshold;
    if (threshold != null) vsp.voter_set.threshold = threshold;
    val governor = voter_set_update.governor @? { vsp }.governor;
    if (governor != null) update voter_set_governance @ { .voter_set == vsp.voter_set } (.governor = governor);
    val new_member = voter_set_update.new_member @* { vsp }.provider;
    for (m in new_member) {
        create voter_set_member(vsp.voter_set, m);
    }
    val remove_member = voter_set_update.remove_member @* { vsp }.provider;
    for (m in remove_member) {
        delete voter_set_member @ { vsp.voter_set, m };
    }
}

@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [proposal_type.voter_set_update.name: delete_pending_voter_set_update(*)];

function delete_pending_voter_set_update(proposal) {
    val p = pending_voter_set_update @? { proposal };
    if (p == null) return;
    delete voter_set_update.threshold @? { p };
    delete voter_set_update.governor  @? { p };
    delete voter_set_update.new_member  @* { p };
    delete voter_set_update.remove_member  @* { p };
    delete p;
}

operation propose_update_voter_set(my_pubkey: pubkey, voter_set_name: text, new_threshold: integer?, new_governor: name?, new_member: list<pubkey>, remove_member: list<pubkey>, description: text = "") {
    val provider = require_is_provider_with_rl(my_pubkey);
    val voter_set = require_voter_set(voter_set_name);
    require(voter_set.name != constants.voter_sets.system_p, "Cannot update system voter set. Update this by proposing system provider role");
    require_voter_set_governor(voter_set, provider);
    require(empty(proposal @* { voter_set }), "Cannot have more than one pending proposal involving this voter set.");

    val prop = create proposal(
        op_context.last_block_time,
        proposal_type.voter_set_update,
        provider,
        voter_set_governance @ { voter_set }.governor,
        description
    );
    val update_prop = create pending_voter_set_update(prop, voter_set);
    if (new_threshold != null) {
        require(new_threshold >= -1 and new_threshold <= (voter_set_member @* { voter_set }).size(), 
        "Invalid threshold level, muste be in range [-1, voter_set.size()]");
        create voter_set_update.threshold(update_prop, new_threshold);
    }
    if (new_governor != null) {
        val g = require_voter_set(new_governor);
        create voter_set_update.governor(update_prop, g);
    }
    for (m in new_member) {
        val p = require_provider(m);
        require(p.tier == provider_tier.NODE_PROVIDER, "Cannot add a provider that has no voting right to a voter set");
        create voter_set_update.new_member(update_prop, p);
    }
    for (m in remove_member) {
        val p = require_provider(m);
        create voter_set_update.remove_member(update_prop, p);
    }
    internal_vote(provider, prop, true);
}

query get_voter_set_update_proposal(id: integer) {
    val p = proposal @? { rowid(id) };
    if (p == null) return null;
    val pvsu = pending_voter_set_update @? { p };
    if (pvsu == null) return null;
    return (
        voter_set = pvsu.voter_set.name,
        threshold = voter_set_update.threshold @? { pvsu },
        governor = voter_set_update.governor @? { pvsu } .governor.name,
        add_member = voter_set_update.new_member @* { pvsu } .provider.pubkey,
        remove_member = voter_set_update.remove_member @* { pvsu } .provider.pubkey
    );
}
