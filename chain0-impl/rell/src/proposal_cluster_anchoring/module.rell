module;

import ^.proposal.*;
import ^.model.*;
import ^.cluster_anchoring.*;

entity pending_cluster_anchoring_configuration {
    key proposal;
    data: byte_array;  // map<string, gtv>
}

@extend(apply_voting_result_handlers) function() = [proposal_type.cluster_anchoring_configuration.name: apply_cluster_anchoring_configuration(*)];

function apply_cluster_anchoring_configuration(proposal) {
    val pcac = pending_cluster_anchoring_configuration @? { proposal };
    if (pcac == null) return;
    cluster_anchoring.set_config(pcac.data);
}

@extend(delete_proposal_handlers) function(): map<text, (proposal) -> unit> = [proposal_type.cluster_anchoring_configuration.name: delete_pending_cluster_anchoring_configuration(*)];

function delete_pending_cluster_anchoring_configuration(proposal) {
    val p = pending_cluster_anchoring_configuration @? { proposal };
    if (p == null) return;
    delete p;
}

operation propose_cluster_anchoring_configuration(my_pubkey: pubkey, config_data: byte_array) {
    val me = require_is_provider_with_rl(my_pubkey);
    require_is_system_provider(my_pubkey);

    val current_config = map<text,gtv>.from_gtv(gtv.from_bytes(cluster_anchoring_config.raw_config));
    require(current_config.size() > 0, "Cluster anchoring is disabled");

    val new_config = map<text, gtv>.from_gtv(gtv.from_bytes(config_data)); // Validate that config is a map
    require(new_config.size() > 0, "Configuration must not be empty");

    val prop = create proposal(op_context.last_block_time, proposal_type.cluster_anchoring_configuration, me, system_p_voter_set());
    create pending_cluster_anchoring_configuration(prop, config_data);
    internal_vote(me, prop, true);
}

query get_cluster_anchoring_configuration_proposal(rowid?) {
    val proposal = get_latest_proposal(rowid, proposal_type.cluster_anchoring_configuration);
    if (proposal == null) return null;
    val pcac = pending_cluster_anchoring_configuration @ { proposal };
    val current_conf = cluster_anchoring.get_cluster_anchoring_configuration();
    return (
        current_conf = current_conf,
        proposed_conf = pcac.data
    );
}